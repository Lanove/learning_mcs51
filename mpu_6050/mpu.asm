	;====================================================================
	; Main.asm file generated by New Project wizard
	;
	; Created: Fri Oct 25 2024
	; Processor: 80C51
	; Compiler: ASEM - 51 (Proteus)
	;====================================================================
	
	$NOMOD51
	$INCLUDE (80C52.MCU)
	
	;====================================================================
	; DEFINITIONS
	;====================================================================
	
	;====================================================================
	; VARIABLES
	;====================================================================
	
	;====================================================================
	; RESET and INTERRUPT VECTORS
	;====================================================================
	
	; Reset Vector
	org 0000h
	jmp Start
	
	;====================================================================
	; CODE SEGMENT
	;====================================================================
	
	org 0100h
	SDA equ p0.1
	SCL equ p0.0
	LCD_RS equ p1.0
	LCD_EN equ p1.1
	LCD_PORT equ p3
	
	mpu_addr_w equ 11010010b
	mpu_addr_r equ 11010011b
	
	mpu_pwr_mgmt equ 6bh
	mpu_gyro_cfg equ 1bh
	mpu_gyro_xh equ 43h
	
Start:
	call lcd_initialize
	
	lcall i2c_init
	lcall i2c_start
	mov a, #mpu_addr_w
	acall i2c_transmit
	mov a, #mpu_pwr_mgmt
	acall i2c_transmit
	mov a, #00h
	acall i2c_transmit
	acall i2c_stop
	
	lcall i2c_init
	lcall i2c_start
	mov a, #mpu_addr_w
	acall i2c_transmit
	mov a, #mpu_gyro_cfg
	acall i2c_transmit
	mov a, #00h
	acall i2c_transmit
	acall i2c_stop
	
Loop:
	lcall i2c_init
	lcall i2c_start
	mov a, #mpu_addr_w
	acall i2c_transmit
	mov a, #mpu_gyro_xh
	acall i2c_transmit
	lcall i2c_start
	mov a, #mpu_addr_r
	acall i2c_transmit
	acall i2c_receive
	acall i2c_nack
	acall i2c_stop
	
	mov r0, a
	call lcd_clear
	call lcd_print_hex
	
	call delay_long
	
	jmp Loop
	
delay_long:
	mov R3, #2
outer2_loop_delay_long:
	mov R2, #255
outer_loop_delay_long:
	mov R1, #255
inner_loop_delay_long:
	djnz R1, inner_loop_delay_long
	djnz R2, outer_loop_delay_long
	djnz R3, outer2_loop_delay_long
	ret
	
i2c_init:
	setb sda
	setb scl
	ret

i2c_restart:
	clr scl
	setb sda
	setb scl
	clr sda
	ret
	
i2c_start:
	setb scl
	clr sda
	clr scl
	ret
	
i2c_stop:
	clr scl
	clr sda
	setb scl
	setb sda
	ret
	
i2c_transmit:
	mov r7, #08
i2c_transmit_back:
	clr scl
	rlc a
	mov sda, c
	setb scl
	djnz r7, i2c_transmit_back
	clr scl
	setb sda
	setb scl
	mov c, sda
	clr scl
	ret
	
i2c_ack:
	clr sda
	setb scl
	clr scl
	setb sda
	ret
	
i2c_nack:
	setb sda
	setb scl
	clr scl
	setb scl
	ret
	
i2c_receive:
	mov r7, #08
i2c_receive_back:
	clr scl
	setb scl
	mov c, sda
	rlc a
	djnz r7, i2c_receive_back
	clr scl
	setb sda
	ret
	
lcd_print_hex:
	; convert binary in r0 to ascii digits
	mov a, r0
	mov b, #100
	div ab                       ; a = quotient (hundreds), b = remainder
	mov r1, a                    ; store the result of hundreds to r1
	mov a, b
	
	mov b, #10                   ; divide the remainder by 10 and store to r2
	div ab
	mov r2, a
	mov r3, b                    ; after dividing by 10, the remainder is stored on r3
	
	; convert each digit to ascii
	mov a, r1
	add a, #48
	mov r1, a
	
	mov a, r2
	add a, #48
	mov r2, a
	
	mov a, r3
	add a, #48
	mov r3, a
	
	; send each ascii digit to the lcd
	mov a, r1
	call lcd_send_data           ; display hundreds digit on lcd
	
	mov a, r2
	call lcd_send_data           ; display tens digit on lcd
	
	mov a, r3
	call lcd_send_data           ; display units digit on lcd
	
	ret
	
lcd_initialize:
	mov a, #00111000b
	call lcd_send_instruction
	mov a, #00000110b
	call lcd_send_instruction
	mov a, #00001100b
	call lcd_send_instruction
	mov a, #00000001b
	call lcd_send_instruction
	ret
	
lcd_clear:
	mov a, #00000001b
	call lcd_send_instruction
	ret
	
lcd_send_instruction:
	clr LCD_RS
	jmp lcd_clock
lcd_send_data:
	setb LCD_RS
lcd_clock:
	setb LCD_EN
	mov LCD_PORT, a
	call lcd_delay
	clr LCD_EN
	setb LCD_EN
	call lcd_delay
	ret
	
lcd_delay:
	mov r6, #10
outer_loop:
	mov r7, #50
inner_loop:
	djnz r7, inner_loop
	djnz r6, outer_loop
	ret
	
	;====================================================================
	END
