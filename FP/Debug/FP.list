
FP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014304  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080144a8  080144a8  000154a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014940  08014940  000167c0  2**0
                  CONTENTS
  4 .ARM          00000008  08014940  08014940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014948  08014948  000167c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08014948  08014948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014958  08014958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007c0  20000000  0801495c  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a68  200007c0  0801511c  000167c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002228  0801511c  00017228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000167c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bbdc  00000000  00000000  000167f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ed3  00000000  00000000  000423cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  000482a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e6  00000000  00000000  00049ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221b3  00000000  00000000  0004b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023571  00000000  00000000  0006d241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adc5d  00000000  00000000  000907b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e40f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008488  00000000  00000000  0013e454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001468dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200007c0 	.word	0x200007c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801448c 	.word	0x0801448c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200007c4 	.word	0x200007c4
 80001dc:	0801448c 	.word	0x0801448c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c76:	f000 b9d3 	b.w	8001020 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f86b 	bl	8000d64 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f85e 	bl	8000d64 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f84d 	bl	8000d64 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f83f 	bl	8000d64 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b988 	b.w	8001020 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f824 	bl	8000d64 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc69 	bl	8000608 <__aeabi_dmul>
 8000d36:	f000 f975 	bl	8001024 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fbea 	bl	8000514 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc60 	bl	8000608 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faa2 	bl	8000298 <__aeabi_dsub>
 8000d54:	f000 f966 	bl	8001024 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__aeabi_d2uiz>:
 8001024:	004a      	lsls	r2, r1, #1
 8001026:	d211      	bcs.n	800104c <__aeabi_d2uiz+0x28>
 8001028:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800102c:	d211      	bcs.n	8001052 <__aeabi_d2uiz+0x2e>
 800102e:	d50d      	bpl.n	800104c <__aeabi_d2uiz+0x28>
 8001030:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001034:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001038:	d40e      	bmi.n	8001058 <__aeabi_d2uiz+0x34>
 800103a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800103e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001042:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001046:	fa23 f002 	lsr.w	r0, r3, r2
 800104a:	4770      	bx	lr
 800104c:	f04f 0000 	mov.w	r0, #0
 8001050:	4770      	bx	lr
 8001052:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001056:	d102      	bne.n	800105e <__aeabi_d2uiz+0x3a>
 8001058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800105c:	4770      	bx	lr
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	4770      	bx	lr

08001064 <_ZN6ButtonC1EP12GPIO_TypeDeftmm>:
#include "Button.h"
#include "stm32f4xx_hal.h"

Button::Button(GPIO_TypeDef *port, uint16_t pin, uint32_t holdDurationMs, uint32_t doubleClickIntervalMs)
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	80fb      	strh	r3, [r7, #6]
    : port(port), pin(pin), state(IDLE), lastPressTime(0), lastReleaseTime(0),
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	88fa      	ldrh	r2, [r7, #6]
 800107e:	809a      	strh	r2, [r3, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	719a      	strb	r2, [r3, #6]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
      holdDuration(holdDurationMs), doubleClickInterval(doubleClickIntervalMs), isPressed(false) {}
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	761a      	strb	r2, [r3, #24]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_ZN6Button15handleInterruptEv>:


void Button::handleInterrupt() {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80010ba:	f004 fa8b 	bl	80055d4 <HAL_GetTick>
 80010be:	60f8      	str	r0, [r7, #12]

    if (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET) { // Button pressed
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	889b      	ldrh	r3, [r3, #4]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f005 fdc4 	bl	8006c58 <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d01c      	beq.n	800111a <_ZN6Button15handleInterruptEv+0x68>
        if (!isPressed) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e1b      	ldrb	r3, [r3, #24]
 80010e4:	f083 0301 	eor.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d022      	beq.n	8001134 <_ZN6Button15handleInterruptEv+0x82>
            isPressed = true;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	761a      	strb	r2, [r3, #24]
            lastPressTime = currentTime;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	609a      	str	r2, [r3, #8]


            if (currentTime - lastReleaseTime <= doubleClickInterval) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	1ad2      	subs	r2, r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	429a      	cmp	r2, r3
 8001108:	d803      	bhi.n	8001112 <_ZN6Button15handleInterruptEv+0x60>
                state = DOUBLE_CLICK;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2203      	movs	r2, #3
 800110e:	719a      	strb	r2, [r3, #6]
            lastReleaseTime = currentTime;

            state = IDLE; // Reset state to idle after release
        }
    }
}
 8001110:	e010      	b.n	8001134 <_ZN6Button15handleInterruptEv+0x82>
                state = PRESSED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	719a      	strb	r2, [r3, #6]
}
 8001118:	e00c      	b.n	8001134 <_ZN6Button15handleInterruptEv+0x82>
        if (isPressed) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7e1b      	ldrb	r3, [r3, #24]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <_ZN6Button15handleInterruptEv+0x82>
            isPressed = false;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	761a      	strb	r2, [r3, #24]
            lastReleaseTime = currentTime;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	60da      	str	r2, [r3, #12]
            state = IDLE; // Reset state to idle after release
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	719a      	strb	r2, [r3, #6]
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZN6Button4loopEv>:

void Button::loop() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8001144:	f004 fa46 	bl	80055d4 <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

    if (isPressed && (currentTime - lastPressTime >= holdDuration)) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e1b      	ldrb	r3, [r3, #24]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00a      	beq.n	8001168 <_ZN6Button4loopEv+0x2c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	429a      	cmp	r2, r3
 8001160:	d302      	bcc.n	8001168 <_ZN6Button4loopEv+0x2c>
        state = HOLD;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2202      	movs	r2, #2
 8001166:	719a      	strb	r2, [r3, #6]
    }
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZNK6Button8getStateEv>:

Button::ButtonState Button::getState() const {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    return state;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	799b      	ldrb	r3, [r3, #6]
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZN3LCDC1EP17I2C_HandleTypeDefh>:
#include "LCD.h"
#include "stm32f4xx_hal.h"

// Constructor
LCD::LCD(I2C_HandleTypeDef* i2c_handle, uint8_t lcd_address)
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4613      	mov	r3, r2
 8001194:	71fb      	strb	r3, [r7, #7]
    : i2c(i2c_handle), address(lcd_address), displayControl(0) {}
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	651a      	str	r2, [r3, #80]	@ 0x50
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_ZN3LCD11sendCommandEc>:

// Send a command to the LCD
void LCD::sendCommand(char cmd) {
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af02      	add	r7, sp, #8
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70fb      	strb	r3, [r7, #3]
    char data_u = (cmd & 0xF0);
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	f023 030f 	bic.w	r3, r3, #15
 80011cc:	73fb      	strb	r3, [r7, #15]
    char data_l = ((cmd << 4) & 0xF0);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {
        static_cast<uint8_t>(data_u | 0x0C), // en=1, rs=0
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f043 030c 	orr.w	r3, r3, #12
 80011da:	b2db      	uxtb	r3, r3
        static_cast<uint8_t>(data_u | 0x08), // en=0, rs=0
        static_cast<uint8_t>(data_l | 0x0C), // en=1, rs=0
        static_cast<uint8_t>(data_l | 0x08)  // en=0, rs=0
    };
 80011dc:	723b      	strb	r3, [r7, #8]
        static_cast<uint8_t>(data_u | 0x08), // en=0, rs=0
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
    };
 80011e6:	727b      	strb	r3, [r7, #9]
        static_cast<uint8_t>(data_l | 0x0C), // en=1, rs=0
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	f043 030c 	orr.w	r3, r3, #12
 80011ee:	b2db      	uxtb	r3, r3
    };
 80011f0:	72bb      	strb	r3, [r7, #10]
        static_cast<uint8_t>(data_l | 0x08)  // en=0, rs=0
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
    };
 80011fa:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c, address, data_t, 4, 100);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001206:	4619      	mov	r1, r3
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2364      	movs	r3, #100	@ 0x64
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2304      	movs	r3, #4
 8001212:	f005 fe95 	bl	8006f40 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f004 f9e8 	bl	80055ec <HAL_Delay>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN3LCD8sendDataEc>:

// Send data to the LCD
void LCD::sendData(char data) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
    char data_u = (data & 0xF0);
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	f023 030f 	bic.w	r3, r3, #15
 8001236:	73fb      	strb	r3, [r7, #15]
    char data_l = ((data << 4) & 0xF0);
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {
        static_cast<uint8_t>(data_u | 0x0D), // en=1, rs=1
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f043 030d 	orr.w	r3, r3, #13
 8001244:	b2db      	uxtb	r3, r3
        static_cast<uint8_t>(data_u | 0x09), // en=0, rs=1
        static_cast<uint8_t>(data_l | 0x0D), // en=1, rs=1
        static_cast<uint8_t>(data_l | 0x09)  // en=0, rs=1
    };
 8001246:	723b      	strb	r3, [r7, #8]
        static_cast<uint8_t>(data_u | 0x09), // en=0, rs=1
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f043 0309 	orr.w	r3, r3, #9
 800124e:	b2db      	uxtb	r3, r3
    };
 8001250:	727b      	strb	r3, [r7, #9]
        static_cast<uint8_t>(data_l | 0x0D), // en=1, rs=1
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	f043 030d 	orr.w	r3, r3, #13
 8001258:	b2db      	uxtb	r3, r3
    };
 800125a:	72bb      	strb	r3, [r7, #10]
        static_cast<uint8_t>(data_l | 0x09)  // en=0, rs=1
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	f043 0309 	orr.w	r3, r3, #9
 8001262:	b2db      	uxtb	r3, r3
    };
 8001264:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c, address, data_t, 4, 100);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001270:	4619      	mov	r1, r3
 8001272:	f107 0208 	add.w	r2, r7, #8
 8001276:	2364      	movs	r3, #100	@ 0x64
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2304      	movs	r3, #4
 800127c:	f005 fe60 	bl	8006f40 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f004 f9b3 	bl	80055ec <HAL_Delay>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_ZN3LCD4initEv>:

// Initialize the LCD
void LCD::init() {
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
    HAL_Delay(50); // Wait for >40ms
 8001296:	2032      	movs	r0, #50	@ 0x32
 8001298:	f004 f9a8 	bl	80055ec <HAL_Delay>
    sendCommand(0x30);
 800129c:	2130      	movs	r1, #48	@ 0x30
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff8b 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(5); // Wait for >4.1ms
 80012a4:	2005      	movs	r0, #5
 80012a6:	f004 f9a1 	bl	80055ec <HAL_Delay>
    sendCommand(0x30);
 80012aa:	2130      	movs	r1, #48	@ 0x30
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff84 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(1); // Wait for >100us
 80012b2:	2001      	movs	r0, #1
 80012b4:	f004 f99a 	bl	80055ec <HAL_Delay>
    sendCommand(0x30);
 80012b8:	2130      	movs	r1, #48	@ 0x30
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff7d 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(10);
 80012c0:	200a      	movs	r0, #10
 80012c2:	f004 f993 	bl	80055ec <HAL_Delay>
    sendCommand(0x20); // 4-bit mode
 80012c6:	2120      	movs	r1, #32
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff76 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f004 f98c 	bl	80055ec <HAL_Delay>

    // Display initialization
    sendCommand(0x28); // Function set: 4-bit mode, 2-line display, 5x8 characters
 80012d4:	2128      	movs	r1, #40	@ 0x28
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff6f 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f004 f985 	bl	80055ec <HAL_Delay>
    sendCommand(0x08); // Display off
 80012e2:	2108      	movs	r1, #8
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff68 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f004 f97e 	bl	80055ec <HAL_Delay>
    sendCommand(0x01); // Clear display
 80012f0:	2101      	movs	r1, #1
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff61 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(2);
 80012f8:	2002      	movs	r0, #2
 80012fa:	f004 f977 	bl	80055ec <HAL_Delay>
    sendCommand(0x06); // Entry mode set: increment cursor, no shift
 80012fe:	2106      	movs	r1, #6
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff5a 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f004 f970 	bl	80055ec <HAL_Delay>
    sendCommand(0x0C); // Display on, cursor off, blink off
 800130c:	210c      	movs	r1, #12
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff53 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f004 f969 	bl	80055ec <HAL_Delay>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_ZN3LCD5clearEv>:
    sendCommand(0x08 | displayControl);
    HAL_Delay(1);
}

// Clear the display
void LCD::clear() {
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
    sendCommand(0x01); // LCD_CLEARDISPLAY
 800132a:	2101      	movs	r1, #1
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff44 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f004 f95a 	bl	80055ec <HAL_Delay>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZN3LCD9setCursorEhh>:
    sendCommand(0x02); // LCD_RETURNHOME
    HAL_Delay(2);
}

// Set cursor position
void LCD::setCursor(uint8_t row, uint8_t col) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
 800134c:	4613      	mov	r3, r2
 800134e:	70bb      	strb	r3, [r7, #2]
    const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <_ZN3LCD9setCursorEhh+0x44>)
 8001352:	60fb      	str	r3, [r7, #12]
    sendCommand(0x80 | (col + row_offsets[row])); // LCD_SETDDRAMADDR
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	3310      	adds	r3, #16
 8001358:	443b      	add	r3, r7
 800135a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800135e:	78bb      	ldrb	r3, [r7, #2]
 8001360:	4413      	add	r3, r2
 8001362:	b2db      	uxtb	r3, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff22 	bl	80011ba <_ZN3LCD11sendCommandEc>
    HAL_Delay(2);
 8001376:	2002      	movs	r0, #2
 8001378:	f004 f938 	bl	80055ec <HAL_Delay>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	54144000 	.word	0x54144000

08001388 <_ZN3LCD10sendStringEPKc>:

// Send a string to the LCD
void LCD::sendString(const char* str) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001392:	e007      	b.n	80013a4 <_ZN3LCD10sendStringEPKc+0x1c>
        sendData(*str++);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff40 	bl	8001224 <_ZN3LCD8sendDataEc>
    while (*str) {
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f3      	bne.n	8001394 <_ZN3LCD10sendStringEPKc+0xc>
    }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013cc:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <MX_ADC1_Init+0x9c>)
 80013ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_ADC1_Init+0x98>)
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <MX_ADC1_Init+0xa0>)
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_ADC1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_ADC1_Init+0x98>)
 8001406:	2201      	movs	r2, #1
 8001408:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_ADC1_Init+0x98>)
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_ADC1_Init+0x98>)
 800141a:	f004 f90b 	bl	8005634 <HAL_ADC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001424:	f000 fe5c 	bl	80020e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001430:	2307      	movs	r3, #7
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_ADC1_Init+0x98>)
 800143a:	f004 fb5d 	bl	8005af8 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001444:	f000 fe4c 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200007dc 	.word	0x200007dc
 8001454:	40012000 	.word	0x40012000
 8001458:	0f000001 	.word	0x0f000001

0800145c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a33      	ldr	r2, [pc, #204]	@ (8001548 <HAL_ADC_MspInit+0xec>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d15f      	bne.n	800153e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_ADC_MspInit+0xf0>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a31      	ldr	r2, [pc, #196]	@ (800154c <HAL_ADC_MspInit+0xf0>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <HAL_ADC_MspInit+0xf0>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <HAL_ADC_MspInit+0xf0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a2a      	ldr	r2, [pc, #168]	@ (800154c <HAL_ADC_MspInit+0xf0>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_ADC_MspInit+0xf0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	2303      	movs	r3, #3
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4821      	ldr	r0, [pc, #132]	@ (8001550 <HAL_ADC_MspInit+0xf4>)
 80014ca:	f005 fa41 	bl	8006950 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <HAL_ADC_MspInit+0xfc>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 80014e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 80014f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 80014f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 8001500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001504:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001512:	4810      	ldr	r0, [pc, #64]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 8001514:	f004 feac 	bl	8006270 <HAL_DMA_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800151e:	f000 fddf 	bl	80020e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 8001526:	639a      	str	r2, [r3, #56]	@ 0x38
 8001528:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <HAL_ADC_MspInit+0xf8>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2012      	movs	r0, #18
 8001534:	f004 fe65 	bl	8006202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001538:	2012      	movs	r0, #18
 800153a:	f004 fe7e 	bl	800623a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	@ 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012000 	.word	0x40012000
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000
 8001554:	20000824 	.word	0x20000824
 8001558:	40026410 	.word	0x40026410

0800155c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_DMA_Init+0x3c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <MX_DMA_Init+0x3c>)
 800156c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_DMA_Init+0x3c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2038      	movs	r0, #56	@ 0x38
 8001584:	f004 fe3d 	bl	8006202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001588:	2038      	movs	r0, #56	@ 0x38
 800158a:	f004 fe56 	bl	800623a <HAL_NVIC_EnableIRQ>

}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_GPIO_Init+0x9c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001606:	2320      	movs	r3, #32
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800160a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800160e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4808      	ldr	r0, [pc, #32]	@ (800163c <MX_GPIO_Init+0xa0>)
 800161c:	f005 f998 	bl	8006950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2017      	movs	r0, #23
 8001626:	f004 fdec 	bl	8006202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800162a:	2017      	movs	r0, #23
 800162c:	f004 fe05 	bl	800623a <HAL_NVIC_EnableIRQ>

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <MX_I2C1_Init+0x50>)
 8001646:	4a13      	ldr	r2, [pc, #76]	@ (8001694 <MX_I2C1_Init+0x54>)
 8001648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <MX_I2C1_Init+0x50>)
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <MX_I2C1_Init+0x58>)
 800164e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_I2C1_Init+0x50>)
 800165e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001670:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	@ (8001690 <MX_I2C1_Init+0x50>)
 800167e:	f005 fb1b 	bl	8006cb8 <HAL_I2C_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001688:	f000 fd2a 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000884 	.word	0x20000884
 8001694:	40005400 	.word	0x40005400
 8001698:	000186a0 	.word	0x000186a0

0800169c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <HAL_I2C_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12b      	bne.n	8001716 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_I2C_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <HAL_I2C_MspInit+0x88>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_I2C_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016da:	23c0      	movs	r3, #192	@ 0xc0
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016de:	2312      	movs	r3, #18
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ea:	2304      	movs	r3, #4
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <HAL_I2C_MspInit+0x8c>)
 80016f6:	f005 f92b 	bl	8006950 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_I2C_MspInit+0x88>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	4a08      	ldr	r2, [pc, #32]	@ (8001724 <HAL_I2C_MspInit+0x88>)
 8001704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001708:	6413      	str	r3, [r2, #64]	@ 0x40
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_I2C_MspInit+0x88>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40005400 	.word	0x40005400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400

0800172c <_ZN14LCD_ControllerC1Ev>:
typedef enum
{
    SCREEN_MAIN,
} LCD_SCREEN;

class LCD_Controller
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <_ZN14LCD_ControllerC1Ev+0x40>)
 8001738:	330c      	adds	r3, #12
 800173a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173e:	6018      	str	r0, [r3, #0]
 8001740:	3304      	adds	r3, #4
 8001742:	8019      	strh	r1, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	749a      	strb	r2, [r3, #18]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4908      	ldr	r1, [pc, #32]	@ (8001770 <_ZN14LCD_ControllerC1Ev+0x44>)
 800174e:	f103 0213 	add.w	r2, r3, #19
 8001752:	460b      	mov	r3, r1
 8001754:	cb03      	ldmia	r3!, {r0, r1}
 8001756:	6010      	str	r0, [r2, #0]
 8001758:	6051      	str	r1, [r2, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	7213      	strb	r3, [r2, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	080144a8 	.word	0x080144a8
 8001770:	080144b0 	.word	0x080144b0

08001774 <_Z28format_number_with_separatoryPcj>:

extern float supply_voltage;
LCD lcd(&hi2c1);
LCD_Controller lcd_controller;

void format_number_with_separator(uint64_t value, char *output, size_t N) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b092      	sub	sp, #72	@ 0x48
 8001778:	af02      	add	r7, sp, #8
 800177a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  char temp[32];
  int len, i, j, k;

  memset(output, 0, N);
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	2100      	movs	r1, #0
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f00e fcb1 	bl	80100ee <memset>
  memset(temp, 0, sizeof(temp));
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	2220      	movs	r2, #32
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f00e fcaa 	bl	80100ee <memset>
  // Convert the number to a zero-padded 10-digit string
  snprintf(temp, sizeof(temp), "%09llu", value);
 800179a:	f107 0010 	add.w	r0, r7, #16
 800179e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017a2:	e9cd 2300 	strd	r2, r3, [sp]
 80017a6:	4a28      	ldr	r2, [pc, #160]	@ (8001848 <_Z28format_number_with_separatoryPcj+0xd4>)
 80017a8:	2120      	movs	r1, #32
 80017aa:	f00e fbef 	bl	800ff8c <snprintf>
  len = strlen(temp);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fd14 	bl	80001e0 <strlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	633b      	str	r3, [r7, #48]	@ 0x30

  // Add separators
  j = N - 1;          // Start from the end of the output buffer
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3b01      	subs	r3, #1
 80017c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  output[j--] = '\0'; // Null-terminate the string
 80017c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c4:	1e5a      	subs	r2, r3, #1
 80017c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]

  k = 0; // Counter to track digits grouped
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
  for (i = len - 1; i >= 0; i--) {
 80017d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d8:	3b01      	subs	r3, #1
 80017da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017dc:	e021      	b.n	8001822 <_Z28format_number_with_separatoryPcj+0xae>
    output[j--] = temp[i];
 80017de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	f107 0110 	add.w	r1, r7, #16
 80017ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017f0:	440a      	add	r2, r1
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	701a      	strb	r2, [r3, #0]
    k++;
 80017f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f8:	3301      	adds	r3, #1
 80017fa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (k == 3 && i > 0) { // Add separator every 3 digits, but not at the start
 80017fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d10c      	bne.n	800181c <_Z28format_number_with_separatoryPcj+0xa8>
 8001802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd09      	ble.n	800181c <_Z28format_number_with_separatoryPcj+0xa8>
      output[j--] = '.';
 8001808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180a:	1e5a      	subs	r2, r3, #1
 800180c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	222e      	movs	r2, #46	@ 0x2e
 8001816:	701a      	strb	r2, [r3, #0]
      k = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	@ 0x34
  for (i = len - 1; i >= 0; i--) {
 800181c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800181e:	3b01      	subs	r3, #1
 8001820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001824:	2b00      	cmp	r3, #0
 8001826:	dada      	bge.n	80017de <_Z28format_number_with_separatoryPcj+0x6a>
    }
  }

  // Shift the result to the start of the output buffer
  memmove(output, &output[j + 1], N - j - 1);
 8001828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182a:	3301      	adds	r3, #1
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	18d1      	adds	r1, r2, r3
 8001830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	3b01      	subs	r3, #1
 8001838:	461a      	mov	r2, r3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f00e fc3d 	bl	80100ba <memmove>
}
 8001840:	bf00      	nop
 8001842:	3740      	adds	r7, #64	@ 0x40
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	080144bc 	.word	0x080144bc

0800184c <_ZN14LCD_Controller5beginEv>:

void LCD_Controller::begin() { set_screen(SCREEN_MAIN); }
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	2100      	movs	r1, #0
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f804 	bl	8001864 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN>
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN>:

void LCD_Controller::set_screen(LCD_SCREEN screen) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
  lcd.clear();
 8001870:	4837      	ldr	r0, [pc, #220]	@ (8001950 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xec>)
 8001872:	f7ff fd56 	bl	8001322 <_ZN3LCD5clearEv>
  if (screen == SCREEN_MAIN) {
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d155      	bne.n	8001928 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xc4>
    format_number_with_separator(channel_freq.ch1, tempBuf, LCD_ROWS);
 800187c:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xf0>)
 800187e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001888:	2314      	movs	r3, #20
 800188a:	f7ff ff73 	bl	8001774 <_Z28format_number_with_separatoryPcj>
    snprintf(lcd.buffer[0], LCD_ROWS, " Ch0:%s Hz", tempBuf);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3338      	adds	r3, #56	@ 0x38
 8001892:	4a31      	ldr	r2, [pc, #196]	@ (8001958 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xf4>)
 8001894:	2114      	movs	r1, #20
 8001896:	482e      	ldr	r0, [pc, #184]	@ (8001950 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xec>)
 8001898:	f00e fb78 	bl	800ff8c <snprintf>

    format_number_with_separator(channel_freq.ch2, tempBuf, LCD_ROWS);
 800189c:	4b2d      	ldr	r3, [pc, #180]	@ (8001954 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xf0>)
 800189e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80018a8:	2314      	movs	r3, #20
 80018aa:	f7ff ff63 	bl	8001774 <_Z28format_number_with_separatoryPcj>
    snprintf(lcd.buffer[1], LCD_ROWS, " Ch1:%s Hz", tempBuf);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3338      	adds	r3, #56	@ 0x38
 80018b2:	4a2a      	ldr	r2, [pc, #168]	@ (800195c <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xf8>)
 80018b4:	2114      	movs	r1, #20
 80018b6:	482a      	ldr	r0, [pc, #168]	@ (8001960 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xfc>)
 80018b8:	f00e fb68 	bl	800ff8c <snprintf>

    format_number_with_separator(channel_freq.ch3, tempBuf, LCD_ROWS);
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xf0>)
 80018be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80018c8:	2314      	movs	r3, #20
 80018ca:	f7ff ff53 	bl	8001774 <_Z28format_number_with_separatoryPcj>
    snprintf(lcd.buffer[2], LCD_ROWS, " Ch2:%s Hz", tempBuf);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3338      	adds	r3, #56	@ 0x38
 80018d2:	4a24      	ldr	r2, [pc, #144]	@ (8001964 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0x100>)
 80018d4:	2114      	movs	r1, #20
 80018d6:	4824      	ldr	r0, [pc, #144]	@ (8001968 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0x104>)
 80018d8:	f00e fb58 	bl	800ff8c <snprintf>

    sprintf(lcd.buffer[3],"Battery: %.2fV", supply_voltage);
 80018dc:	4b23      	ldr	r3, [pc, #140]	@ (800196c <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0x108>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe39 	bl	8000558 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4921      	ldr	r1, [pc, #132]	@ (8001970 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0x10c>)
 80018ec:	4821      	ldr	r0, [pc, #132]	@ (8001974 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0x110>)
 80018ee:	f00e fb81 	bl	800fff4 <sprintf>

    for (int i = 0; i < 4; i++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e014      	b.n	8001922 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xbe>
      lcd.setCursor(i, 0);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	4813      	ldr	r0, [pc, #76]	@ (8001950 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xec>)
 8001902:	f7ff fd1d 	bl	8001340 <_ZN3LCD9setCursorEhh>
      lcd.sendString(lcd.buffer[i]);
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xec>)
 8001912:	4413      	add	r3, r2
 8001914:	4619      	mov	r1, r3
 8001916:	480e      	ldr	r0, [pc, #56]	@ (8001950 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xec>)
 8001918:	f7ff fd36 	bl	8001388 <_ZN3LCD10sendStringEPKc>
    for (int i = 0; i < 4; i++) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b03      	cmp	r3, #3
 8001926:	dde7      	ble.n	80018f8 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0x94>
    }
  }

  set_arrow_cursor(0);
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fa0e 	bl	8001d4c <_ZN14LCD_Controller16set_arrow_cursorEa>
  set_arrow_blink(false);
 8001930:	2100      	movs	r1, #0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 faa4 	bl	8001e80 <_ZN14LCD_Controller15set_arrow_blinkEb>
  memcpy(&last_channel_freq, &channel_freq, sizeof(channel_freq));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3358      	adds	r3, #88	@ 0x58
 800193c:	2218      	movs	r2, #24
 800193e:	4905      	ldr	r1, [pc, #20]	@ (8001954 <_ZN14LCD_Controller10set_screenE10LCD_SCREEN+0xf0>)
 8001940:	4618      	mov	r0, r3
 8001942:	f00e fce3 	bl	801030c <memcpy>
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200008d8 	.word	0x200008d8
 8001954:	20000a50 	.word	0x20000a50
 8001958:	080144c4 	.word	0x080144c4
 800195c:	080144d0 	.word	0x080144d0
 8001960:	200008ec 	.word	0x200008ec
 8001964:	080144dc 	.word	0x080144dc
 8001968:	20000900 	.word	0x20000900
 800196c:	20000a74 	.word	0x20000a74
 8001970:	080144e8 	.word	0x080144e8
 8001974:	20000914 	.word	0x20000914

08001978 <_ZN14LCD_Controller7serviceEv>:

void LCD_Controller::service() {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08b      	sub	sp, #44	@ 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if (HAL_GetTick() - blink_tick >= ARROW_BLINK_INTERVAL && cursor_blink) {
 8001980:	f003 fe28 	bl	80055d4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001990:	d305      	bcc.n	800199e <_ZN14LCD_Controller7serviceEv+0x26>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7a9b      	ldrb	r3, [r3, #10]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <_ZN14LCD_Controller7serviceEv+0x26>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <_ZN14LCD_Controller7serviceEv+0x28>
 800199e:	2300      	movs	r3, #0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d06e      	beq.n	8001a82 <_ZN14LCD_Controller7serviceEv+0x10a>
    blink_tick = HAL_GetTick();
 80019a4:	f003 fe16 	bl	80055d4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
    cursor_blink_flag =
        !cursor_blink_flag; // Invert the blink flag every interval
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7adb      	ldrb	r3, [r3, #11]
 80019b2:	f083 0301 	eor.w	r3, r3, #1
 80019b6:	b2da      	uxtb	r2, r3
    cursor_blink_flag =
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	72da      	strb	r2, [r3, #11]
    lcd.setCursor(cursor_coordinate[screen][cursor][0],
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7a1b      	ldrb	r3, [r3, #8]
 80019c0:	4619      	mov	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80019c8:	4618      	mov	r0, r3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	440b      	add	r3, r1
 80019d2:	4403      	add	r3, r0
 80019d4:	3304      	adds	r3, #4
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80019de:	b2d9      	uxtb	r1, r3
                  cursor_coordinate[screen][cursor][1]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7a1b      	ldrb	r3, [r3, #8]
 80019e4:	4618      	mov	r0, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80019ec:	461c      	mov	r4, r3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4603      	mov	r3, r0
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4403      	add	r3, r0
 80019f6:	4423      	add	r3, r4
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	f993 300d 	ldrsb.w	r3, [r3, #13]
    lcd.setCursor(cursor_coordinate[screen][cursor][0],
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	48b0      	ldr	r0, [pc, #704]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001a06:	f7ff fc9b 	bl	8001340 <_ZN3LCD9setCursorEhh>
    draw_cursor(cursor, cursor_blink_flag);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f993 1009 	ldrsb.w	r1, [r3, #9]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7adb      	ldrb	r3, [r3, #11]
 8001a14:	461a      	mov	r2, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f976 	bl	8001d08 <_ZN14LCD_Controller11draw_cursorEab>

    lcd.setCursor(digit_row, digit_coordinate[SCREEN_MAIN][digit_col]);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 8001a22:	b2d9      	uxtb	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	48a3      	ldr	r0, [pc, #652]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001a3a:	f7ff fc81 	bl	8001340 <_ZN3LCD9setCursorEhh>
    if (cursor_blink_flag)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7adb      	ldrb	r3, [r3, #11]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d019      	beq.n	8001a7a <_ZN14LCD_Controller7serviceEv+0x102>
      lcd.sendData(
          lcd.buffer[digit_row][digit_coordinate[SCREEN_MAIN][digit_col]]);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8001a5e:	4618      	mov	r0, r3
      lcd.sendData(
 8001a60:	4a99      	ldr	r2, [pc, #612]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001a62:	460b      	mov	r3, r1
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4895      	ldr	r0, [pc, #596]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001a74:	f7ff fbd6 	bl	8001224 <_ZN3LCD8sendDataEc>
 8001a78:	e003      	b.n	8001a82 <_ZN14LCD_Controller7serviceEv+0x10a>
    else
      lcd.sendData(' ');
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	4892      	ldr	r0, [pc, #584]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001a7e:	f7ff fbd1 	bl	8001224 <_ZN3LCD8sendDataEc>
  }
  if (digit_blink)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00b      	beq.n	8001aa4 <_ZN14LCD_Controller7serviceEv+0x12c>
    lcd.setCursor(digit_row, digit_col);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 8001a92:	b2d9      	uxtb	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	488a      	ldr	r0, [pc, #552]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001aa0:	f7ff fc4e 	bl	8001340 <_ZN3LCD9setCursorEhh>
  if (HAL_GetTick() - refresh_tick < LCD_REFRESH_INTERVAL)
 8001aa4:	f003 fd96 	bl	80055d4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ab2:	bf94      	ite	ls
 8001ab4:	2301      	movls	r3, #1
 8001ab6:	2300      	movhi	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 8100 	bne.w	8001cc0 <_ZN14LCD_Controller7serviceEv+0x348>
    return;
  refresh_tick = HAL_GetTick();
 8001ac0:	f003 fd88 	bl	80055d4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	601a      	str	r2, [r3, #0]
  if (screen == SCREEN_MAIN) {
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7a1b      	ldrb	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80f7 	bne.w	8001cc2 <_ZN14LCD_Controller7serviceEv+0x34a>
    lcd.setCursor(3,0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2103      	movs	r1, #3
 8001ad8:	487b      	ldr	r0, [pc, #492]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001ada:	f7ff fc31 	bl	8001340 <_ZN3LCD9setCursorEhh>
    sprintf(lcd.buffer[3],"Battery: %.2fV", supply_voltage);
 8001ade:	4b7b      	ldr	r3, [pc, #492]	@ (8001ccc <_ZN14LCD_Controller7serviceEv+0x354>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4978      	ldr	r1, [pc, #480]	@ (8001cd0 <_ZN14LCD_Controller7serviceEv+0x358>)
 8001aee:	4879      	ldr	r0, [pc, #484]	@ (8001cd4 <_ZN14LCD_Controller7serviceEv+0x35c>)
 8001af0:	f00e fa80 	bl	800fff4 <sprintf>
    lcd.sendString(lcd.buffer[3]);
 8001af4:	4977      	ldr	r1, [pc, #476]	@ (8001cd4 <_ZN14LCD_Controller7serviceEv+0x35c>)
 8001af6:	4874      	ldr	r0, [pc, #464]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001af8:	f7ff fc46 	bl	8001388 <_ZN3LCD10sendStringEPKc>
    if (last_channel_freq.ch1 != channel_freq.ch1 ||
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001b02:	4b75      	ldr	r3, [pc, #468]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	4299      	cmp	r1, r3
 8001b0a:	bf08      	it	eq
 8001b0c:	4290      	cmpeq	r0, r2
 8001b0e:	d108      	bne.n	8001b22 <_ZN14LCD_Controller7serviceEv+0x1aa>
        (force_refresh && refresh_row == 0)) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    if (last_channel_freq.ch1 != channel_freq.ch1 ||
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03b      	beq.n	8001b92 <_ZN14LCD_Controller7serviceEv+0x21a>
        (force_refresh && refresh_row == 0)) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d137      	bne.n	8001b92 <_ZN14LCD_Controller7serviceEv+0x21a>
      force_refresh = false;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      format_number_with_separator(channel_freq.ch1, tempBuf, LCD_ROWS);
 8001b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001b36:	2314      	movs	r3, #20
 8001b38:	f7ff fe1c 	bl	8001774 <_Z28format_number_with_separatoryPcj>
      snprintf(lcd.buffer[0], LCD_ROWS, " Ch0:%s Hz", tempBuf);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3338      	adds	r3, #56	@ 0x38
 8001b40:	4a66      	ldr	r2, [pc, #408]	@ (8001cdc <_ZN14LCD_Controller7serviceEv+0x364>)
 8001b42:	2114      	movs	r1, #20
 8001b44:	4860      	ldr	r0, [pc, #384]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001b46:	f00e fa21 	bl	800ff8c <snprintf>

      lcd.setCursor(0, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	485e      	ldr	r0, [pc, #376]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001b50:	f7ff fbf6 	bl	8001340 <_ZN3LCD9setCursorEhh>
      lcd.sendString(&lcd.buffer[0][1]);
 8001b54:	4962      	ldr	r1, [pc, #392]	@ (8001ce0 <_ZN14LCD_Controller7serviceEv+0x368>)
 8001b56:	485c      	ldr	r0, [pc, #368]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001b58:	f7ff fc16 	bl	8001388 <_ZN3LCD10sendStringEPKc>
      char tempBuf[32];
      sprintf(tempBuf, "0:%llu\n", channel_freq.ch1);
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f107 0008 	add.w	r0, r7, #8
 8001b66:	495f      	ldr	r1, [pc, #380]	@ (8001ce4 <_ZN14LCD_Controller7serviceEv+0x36c>)
 8001b68:	f00e fa44 	bl	800fff4 <sprintf>
      CDC_Transmit_FS((uint8_t *)tempBuf, strlen(tempBuf));
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fb35 	bl	80001e0 <strlen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00c fa73 	bl	800e06c <CDC_Transmit_FS>
      last_channel_freq.ch1 = channel_freq.ch1;
 8001b86:	4b54      	ldr	r3, [pc, #336]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    }
    if (last_channel_freq.ch2 != channel_freq.ch2 ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001b98:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001b9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b9e:	4299      	cmp	r1, r3
 8001ba0:	bf08      	it	eq
 8001ba2:	4290      	cmpeq	r0, r2
 8001ba4:	d108      	bne.n	8001bb8 <_ZN14LCD_Controller7serviceEv+0x240>
        (force_refresh && refresh_row == 1)) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    if (last_channel_freq.ch2 != channel_freq.ch2 ||
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03b      	beq.n	8001c28 <_ZN14LCD_Controller7serviceEv+0x2b0>
        (force_refresh && refresh_row == 1)) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d137      	bne.n	8001c28 <_ZN14LCD_Controller7serviceEv+0x2b0>
      force_refresh = false;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      format_number_with_separator(channel_freq.ch2, tempBuf, LCD_ROWS);
 8001bc0:	4b45      	ldr	r3, [pc, #276]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001bc2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001bcc:	2314      	movs	r3, #20
 8001bce:	f7ff fdd1 	bl	8001774 <_Z28format_number_with_separatoryPcj>
      snprintf(lcd.buffer[1], LCD_ROWS, " Ch1:%s Hz", tempBuf);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3338      	adds	r3, #56	@ 0x38
 8001bd6:	4a44      	ldr	r2, [pc, #272]	@ (8001ce8 <_ZN14LCD_Controller7serviceEv+0x370>)
 8001bd8:	2114      	movs	r1, #20
 8001bda:	4844      	ldr	r0, [pc, #272]	@ (8001cec <_ZN14LCD_Controller7serviceEv+0x374>)
 8001bdc:	f00e f9d6 	bl	800ff8c <snprintf>

      lcd.setCursor(1, 1);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2101      	movs	r1, #1
 8001be4:	4838      	ldr	r0, [pc, #224]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001be6:	f7ff fbab 	bl	8001340 <_ZN3LCD9setCursorEhh>
      lcd.sendString(&lcd.buffer[1][1]);
 8001bea:	4941      	ldr	r1, [pc, #260]	@ (8001cf0 <_ZN14LCD_Controller7serviceEv+0x378>)
 8001bec:	4836      	ldr	r0, [pc, #216]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001bee:	f7ff fbcb 	bl	8001388 <_ZN3LCD10sendStringEPKc>
      char tempBuf[32];
      sprintf(tempBuf, "1:%llu\n", channel_freq.ch2);
 8001bf2:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001bf4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bf8:	f107 0008 	add.w	r0, r7, #8
 8001bfc:	493d      	ldr	r1, [pc, #244]	@ (8001cf4 <_ZN14LCD_Controller7serviceEv+0x37c>)
 8001bfe:	f00e f9f9 	bl	800fff4 <sprintf>
      CDC_Transmit_FS((uint8_t *)tempBuf, strlen(tempBuf));
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe faea 	bl	80001e0 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00c fa28 	bl	800e06c <CDC_Transmit_FS>
      last_channel_freq.ch2 = channel_freq.ch2;
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001c1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    }
    if (last_channel_freq.ch3 != channel_freq.ch3 ||
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001c30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c34:	4299      	cmp	r1, r3
 8001c36:	bf08      	it	eq
 8001c38:	4290      	cmpeq	r0, r2
 8001c3a:	d108      	bne.n	8001c4e <_ZN14LCD_Controller7serviceEv+0x2d6>
        (force_refresh && refresh_row == 2)) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    if (last_channel_freq.ch3 != channel_freq.ch3 ||
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03d      	beq.n	8001cc2 <_ZN14LCD_Controller7serviceEv+0x34a>
        (force_refresh && refresh_row == 2)) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d139      	bne.n	8001cc2 <_ZN14LCD_Controller7serviceEv+0x34a>
      force_refresh = false;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      format_number_with_separator(channel_freq.ch3, tempBuf, LCD_ROWS);
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001c58:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001c62:	2314      	movs	r3, #20
 8001c64:	f7ff fd86 	bl	8001774 <_Z28format_number_with_separatoryPcj>
      snprintf(lcd.buffer[2], LCD_ROWS, " Ch2:%s Hz", tempBuf);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3338      	adds	r3, #56	@ 0x38
 8001c6c:	4a22      	ldr	r2, [pc, #136]	@ (8001cf8 <_ZN14LCD_Controller7serviceEv+0x380>)
 8001c6e:	2114      	movs	r1, #20
 8001c70:	4822      	ldr	r0, [pc, #136]	@ (8001cfc <_ZN14LCD_Controller7serviceEv+0x384>)
 8001c72:	f00e f98b 	bl	800ff8c <snprintf>

      char tempBuf[32];
      sprintf(tempBuf, "2:%llu\n", channel_freq.ch3);
 8001c76:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001c78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c7c:	f107 0008 	add.w	r0, r7, #8
 8001c80:	491f      	ldr	r1, [pc, #124]	@ (8001d00 <_ZN14LCD_Controller7serviceEv+0x388>)
 8001c82:	f00e f9b7 	bl	800fff4 <sprintf>
      CDC_Transmit_FS((uint8_t *)tempBuf, strlen(tempBuf));
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe faa8 	bl	80001e0 <strlen>
 8001c90:	4603      	mov	r3, r0
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00c f9e6 	bl	800e06c <CDC_Transmit_FS>
      lcd.setCursor(2, 1);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001ca6:	f7ff fb4b 	bl	8001340 <_ZN3LCD9setCursorEhh>
      lcd.sendString(&lcd.buffer[2][1]);
 8001caa:	4916      	ldr	r1, [pc, #88]	@ (8001d04 <_ZN14LCD_Controller7serviceEv+0x38c>)
 8001cac:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <_ZN14LCD_Controller7serviceEv+0x350>)
 8001cae:	f7ff fb6b 	bl	8001388 <_ZN3LCD10sendStringEPKc>
      last_channel_freq.ch3 = channel_freq.ch3;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <_ZN14LCD_Controller7serviceEv+0x360>)
 8001cb4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
 8001cbe:	e000      	b.n	8001cc2 <_ZN14LCD_Controller7serviceEv+0x34a>
    return;
 8001cc0:	bf00      	nop
    }
  }
}
 8001cc2:	372c      	adds	r7, #44	@ 0x2c
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	200008d8 	.word	0x200008d8
 8001ccc:	20000a74 	.word	0x20000a74
 8001cd0:	080144e8 	.word	0x080144e8
 8001cd4:	20000914 	.word	0x20000914
 8001cd8:	20000a50 	.word	0x20000a50
 8001cdc:	080144c4 	.word	0x080144c4
 8001ce0:	200008d9 	.word	0x200008d9
 8001ce4:	080144f8 	.word	0x080144f8
 8001ce8:	080144d0 	.word	0x080144d0
 8001cec:	200008ec 	.word	0x200008ec
 8001cf0:	200008ed 	.word	0x200008ed
 8001cf4:	08014500 	.word	0x08014500
 8001cf8:	080144dc 	.word	0x080144dc
 8001cfc:	20000900 	.word	0x20000900
 8001d00:	08014508 	.word	0x08014508
 8001d04:	20000901 	.word	0x20000901

08001d08 <_ZN14LCD_Controller11draw_cursorEab>:

void LCD_Controller::draw_cursor(int8_t position, bool display) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
 8001d14:	4613      	mov	r3, r2
 8001d16:	70bb      	strb	r3, [r7, #2]
  if (cursor == position && display)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d1e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d107      	bne.n	8001d36 <_ZN14LCD_Controller11draw_cursorEab+0x2e>
 8001d26:	78bb      	ldrb	r3, [r7, #2]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <_ZN14LCD_Controller11draw_cursorEab+0x2e>
    lcd.sendData(ARROW_SYMBOL);
 8001d2c:	217e      	movs	r1, #126	@ 0x7e
 8001d2e:	4806      	ldr	r0, [pc, #24]	@ (8001d48 <_ZN14LCD_Controller11draw_cursorEab+0x40>)
 8001d30:	f7ff fa78 	bl	8001224 <_ZN3LCD8sendDataEc>
 8001d34:	e004      	b.n	8001d40 <_ZN14LCD_Controller11draw_cursorEab+0x38>
  else
    lcd.sendData(' ');
 8001d36:	2120      	movs	r1, #32
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <_ZN14LCD_Controller11draw_cursorEab+0x40>)
 8001d3a:	f7ff fa73 	bl	8001224 <_ZN3LCD8sendDataEc>
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200008d8 	.word	0x200008d8

08001d4c <_ZN14LCD_Controller16set_arrow_cursorEa>:

void LCD_Controller::set_arrow_cursor(int8_t position) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  cursor = position;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	725a      	strb	r2, [r3, #9]
  blink_tick = HAL_GetTick(); // reset blink millis
 8001d5e:	f003 fc39 	bl	80055d4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	605a      	str	r2, [r3, #4]
  cursor_blink_flag = 1;      // Display the arrow on cursor
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	72da      	strb	r2, [r3, #11]
  // out of bound handler :
  if (cursor < 0)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da03      	bge.n	8001d80 <_ZN14LCD_Controller16set_arrow_cursorEa+0x34>
    cursor = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	725a      	strb	r2, [r3, #9]
 8001d7e:	e018      	b.n	8001db2 <_ZN14LCD_Controller16set_arrow_cursorEa+0x66>
  else if (cursor >
           cursor_count[screen] -
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7a1b      	ldrb	r3, [r3, #8]
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f993 2012 	ldrsb.w	r2, [r3, #18]
  else if (cursor >
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dc0c      	bgt.n	8001db2 <_ZN14LCD_Controller16set_arrow_cursorEa+0x66>
               1) // cursor starts at 0 while indexsize count from 1, so size-1
    cursor = cursor_count[screen] - 1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7a1b      	ldrb	r3, [r3, #8]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	b25a      	sxtb	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	725a      	strb	r2, [r3, #9]
  //
  // Clear all cursor printed and draw the arrow on new cursor position
  for (int i = 0; i < cursor_count[screen]; i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	e02b      	b.n	8001e10 <_ZN14LCD_Controller16set_arrow_cursorEa+0xc4>
    lcd.setCursor(cursor_coordinate[screen][i][0],
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7a1b      	ldrb	r3, [r3, #8]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	440b      	add	r3, r1
 8001dc6:	68f9      	ldr	r1, [r7, #12]
 8001dc8:	440b      	add	r3, r1
 8001dca:	3304      	adds	r3, #4
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001dd4:	b2d8      	uxtb	r0, r3
                  cursor_coordinate[screen][i][1]);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7a1b      	ldrb	r3, [r3, #8]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	440b      	add	r3, r1
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	440b      	add	r3, r1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	f993 300d 	ldrsb.w	r3, [r3, #13]
    lcd.setCursor(cursor_coordinate[screen][i][0],
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	4601      	mov	r1, r0
 8001df6:	480e      	ldr	r0, [pc, #56]	@ (8001e30 <_ZN14LCD_Controller16set_arrow_cursorEa+0xe4>)
 8001df8:	f7ff faa2 	bl	8001340 <_ZN3LCD9setCursorEhh>
    draw_cursor(i);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	2201      	movs	r2, #1
 8001e02:	4619      	mov	r1, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff7f 	bl	8001d08 <_ZN14LCD_Controller11draw_cursorEab>
  for (int i = 0; i < cursor_count[screen]; i++) {
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7a1b      	ldrb	r3, [r3, #8]
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	dbc8      	blt.n	8001db8 <_ZN14LCD_Controller16set_arrow_cursorEa+0x6c>
  }
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200008d8 	.word	0x200008d8

08001e34 <_ZN14LCD_Controller22increment_arrow_cursorEv>:

void LCD_Controller::increment_arrow_cursor() { set_arrow_cursor(cursor + 1); }
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff7d 	bl	8001d4c <_ZN14LCD_Controller16set_arrow_cursorEa>
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_ZN14LCD_Controller22decrement_arrow_cursorEv>:

void LCD_Controller::decrement_arrow_cursor() { set_arrow_cursor(cursor - 1); }
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff6a 	bl	8001d4c <_ZN14LCD_Controller16set_arrow_cursorEa>
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZN14LCD_Controller15set_arrow_blinkEb>:

void LCD_Controller::set_arrow_blink(bool blink) {
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  cursor_blink = blink;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	729a      	strb	r2, [r3, #10]
  if (!cursor_blink) { // Redraw the arrow after changing cursorBlink flag,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7a9b      	ldrb	r3, [r3, #10]
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d02e      	beq.n	8001efe <_ZN14LCD_Controller15set_arrow_blinkEb+0x7e>
                       // because the arrow might disappear when flag changed
                       // whilst arrow is undisplayed
    lcd.setCursor(cursor_coordinate[screen][cursor][0],
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7a1b      	ldrb	r3, [r3, #8]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001eac:	4618      	mov	r0, r3
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	4403      	add	r3, r0
 8001eb8:	3304      	adds	r3, #4
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001ec2:	b2d9      	uxtb	r1, r3
                  cursor_coordinate[screen][cursor][1]);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7a1b      	ldrb	r3, [r3, #8]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4403      	add	r3, r0
 8001eda:	4423      	add	r3, r4
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	f993 300d 	ldrsb.w	r3, [r3, #13]
    lcd.setCursor(cursor_coordinate[screen][cursor][0],
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <_ZN14LCD_Controller15set_arrow_blinkEb+0x88>)
 8001eea:	f7ff fa29 	bl	8001340 <_ZN3LCD9setCursorEhh>
    draw_cursor(cursor);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff05 	bl	8001d08 <_ZN14LCD_Controller11draw_cursorEab>
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200008d8 	.word	0x200008d8

08001f0c <_ZN14LCD_Controller13set_digit_rowEa>:
void LCD_Controller::set_digit_row_col(int8_t row, int8_t col) {
  digit_row = row;
  digit_col = col;
}

void LCD_Controller::set_digit_row(int8_t row) { digit_row = row; }
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_ZN14LCD_Controller13set_digit_colEa>:
void LCD_Controller::set_digit_col(int8_t col) { digit_col = col; }
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_ZN14LCD_Controller22increment_digit_cursorEv>:
void LCD_Controller::set_digit_blink(bool blink) {
  digit_blink = blink;
  lcd.blink(digit_blink);
}

void LCD_Controller::increment_digit_cursor() {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  digit_col++;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	b25a      	sxtb	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  if (digit_col > 8)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	dd03      	ble.n	8001f7a <_ZN14LCD_Controller22increment_digit_cursorEv+0x2e>
    digit_col = 0;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <_Z41__static_initialization_and_destruction_0ii>:

void LCD_Controller::decrement_digit_cursor() {
  digit_col--;
  if (digit_col < 0)
    digit_col = 9;
}
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10c      	bne.n	8001fb2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d107      	bne.n	8001fb2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
LCD lcd(&hi2c1);
 8001fa2:	224e      	movs	r2, #78	@ 0x4e
 8001fa4:	4905      	ldr	r1, [pc, #20]	@ (8001fbc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001fa6:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001fa8:	f7ff f8ee 	bl	8001188 <_ZN3LCDC1EP17I2C_HandleTypeDefh>
LCD_Controller lcd_controller;
 8001fac:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001fae:	f7ff fbbd 	bl	800172c <_ZN14LCD_ControllerC1Ev>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000884 	.word	0x20000884
 8001fc0:	200008d8 	.word	0x200008d8
 8001fc4:	20000930 	.word	0x20000930

08001fc8 <_GLOBAL__sub_I_lcd>:
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff ffd9 	bl	8001f88 <_Z41__static_initialization_and_destruction_0ii>
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fdc:	f003 fa94 	bl	8005508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe0:	f000 f812 	bl	8002008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe4:	f7ff fada 	bl	800159c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fe8:	f7ff fab8 	bl	800155c <MX_DMA_Init>
  MX_TIM3_Init();
 8001fec:	f003 f972 	bl	80052d4 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001ff0:	f003 f9c4 	bl	800537c <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 8001ff4:	f00b ff1e 	bl	800de34 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001ff8:	f7ff f9de 	bl	80013b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ffc:	f7ff fb20 	bl	8001640 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_cxx();
 8002000:	f000 f956 	bl	80022b0 <main_cxx>
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <main+0x2c>

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b094      	sub	sp, #80	@ 0x50
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	2230      	movs	r2, #48	@ 0x30
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f00e f869 	bl	80100ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <SystemClock_Config+0xd0>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a28      	ldr	r2, [pc, #160]	@ (80020d8 <SystemClock_Config+0xd0>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40
 800203c:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <SystemClock_Config+0xd0>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <SystemClock_Config+0xd4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002054:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <SystemClock_Config+0xd4>)
 8002056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <SystemClock_Config+0xd4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800206c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002072:	2302      	movs	r3, #2
 8002074:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002076:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800207c:	2319      	movs	r3, #25
 800207e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002080:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002084:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002086:	2304      	movs	r3, #4
 8002088:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800208a:	2307      	movs	r3, #7
 800208c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208e:	f107 0320 	add.w	r3, r7, #32
 8002092:	4618      	mov	r0, r3
 8002094:	f007 fb34 	bl	8009700 <HAL_RCC_OscConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800209e:	f000 f81f 	bl	80020e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	230f      	movs	r3, #15
 80020a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a6:	2302      	movs	r3, #2
 80020a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f007 fd96 	bl	8009bf0 <HAL_RCC_ClockConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80020ca:	f000 f809 	bl	80020e0 <Error_Handler>
  }
}
 80020ce:	bf00      	nop
 80020d0:	3750      	adds	r7, #80	@ 0x50
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
}
 80020e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <Error_Handler+0x8>

080020ec <_ZN14LCD_Controller16get_arrow_cursorEv>:
    LCD_SCREEN get_screen() { return screen; }

    void increment_arrow_cursor();
    void decrement_arrow_cursor();
    void set_arrow_cursor(int8_t position);
    int get_arrow_cursor() { return cursor; }
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_ZN14LCD_Controller15get_arrow_blinkEv>:
    void set_arrow_blink(bool blink);
    bool get_arrow_blink() { return cursor_blink;}
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7a9b      	ldrb	r3, [r3, #10]
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_ZN14LCD_Controller13get_digit_rowEv>:
    void set_digit_cursor(int8_t position);
    int get_digit_cursor() { return digit_cursor; }
    void set_digit_blink(bool blink);
    bool get_digit_blink() { return digit_blink; }
    void set_digit_row_col(int8_t row, int8_t col);
    int get_digit_row() { return digit_row; }
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_ZN14LCD_Controller13get_digit_colEv>:
    int get_digit_col() { return digit_col; }
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_ZN14LCD_Controller17force_refresh_rowEi>:
    void force_refresh_row(int row){
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
        force_refresh = true;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        refresh_row = row;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <_Z23check_encoder_directionP17TIM_HandleTypeDef>:
	ENCODER_IDLE, ENCODER_UP, ENCODER_DOWN
} EncoderState;

EncoderState encoder_state = ENCODER_IDLE;

void check_encoder_direction(TIM_HandleTypeDef *htim) {
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	// Read current encoder value
	cev = (int16_t) __HAL_TIM_GET_COUNTER(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	b21a      	sxth	r2, r3
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x60>)
 800218a:	801a      	strh	r2, [r3, #0]

	// Compare with the last value
	if (cev > lev) {
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x60>)
 800218e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x64>)
 8002194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002198:	429a      	cmp	r2, r3
 800219a:	dd03      	ble.n	80021a4 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x2c>
		encoder_state = ENCODER_DOWN;
 800219c:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x68>)
 800219e:	2202      	movs	r2, #2
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e00e      	b.n	80021c2 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x4a>
	} else if (cev < lev) {
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x60>)
 80021a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x64>)
 80021ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	da03      	bge.n	80021bc <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x44>
		encoder_state = ENCODER_UP;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x68>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e002      	b.n	80021c2 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x4a>
	} else {
		encoder_state = ENCODER_IDLE;
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x68>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
	}

	// Update the last value
	lev = cev;
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x60>)
 80021c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <_Z23check_encoder_directionP17TIM_HandleTypeDef+0x64>)
 80021ca:	801a      	strh	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	20000a6c 	.word	0x20000a6c
 80021dc:	20000a6e 	.word	0x20000a6e
 80021e0:	20000a78 	.word	0x20000a78

080021e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d102      	bne.n	80021fa <HAL_GPIO_EXTI_Callback+0x16>
		encoder_button.handleInterrupt();
 80021f4:	4803      	ldr	r0, [pc, #12]	@ (8002204 <HAL_GPIO_EXTI_Callback+0x20>)
 80021f6:	f7fe ff5c 	bl	80010b2 <_ZN6Button15handleInterruptEv>
	}
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200009a0 	.word	0x200009a0

08002208 <_Z11bound_valueRyyy>:

int16_t encoder_value;

void bound_value(uint64_t &value, uint64_t min, uint64_t max) {
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	e9c7 2300 	strd	r2, r3, [r7]
	if (value < min) {
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800221a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800221e:	4290      	cmp	r0, r2
 8002220:	eb71 0303 	sbcs.w	r3, r1, r3
 8002224:	d205      	bcs.n	8002232 <_Z11bound_valueRyyy+0x2a>
		value = min;
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800222c:	e9c1 2300 	strd	r2, r3, [r1]
	} else if (value > max) {
		value = max;
	}
}
 8002230:	e00d      	b.n	800224e <_Z11bound_valueRyyy+0x46>
	} else if (value > max) {
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800223c:	4290      	cmp	r0, r2
 800223e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002242:	d204      	bcs.n	800224e <_Z11bound_valueRyyy+0x46>
		value = max;
 8002244:	68f9      	ldr	r1, [r7, #12]
 8002246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	0000      	movs	r0, r0
 800225c:	0000      	movs	r0, r0
	...

08002260 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	// Nilai terkalibrasi dari multimeter
	supply_voltage = float(adc_buffer) * 0.001639047619047619;
 8002268:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_ADC_ConvCpltCallback+0x48>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002274:	ee17 0a90 	vmov	r0, s15
 8002278:	f7fe f96e 	bl	8000558 <__aeabi_f2d>
 800227c:	a308      	add	r3, pc, #32	@ (adr r3, 80022a0 <HAL_ADC_ConvCpltCallback+0x40>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f9c1 	bl	8000608 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fc93 	bl	8000bb8 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <HAL_ADC_ConvCpltCallback+0x4c>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	fae7c56c 	.word	0xfae7c56c
 80022a4:	3f5adaa9 	.word	0x3f5adaa9
 80022a8:	20000a70 	.word	0x20000a70
 80022ac:	20000a74 	.word	0x20000a74

080022b0 <main_cxx>:

void main_cxx() {
 80022b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b4:	b0c1      	sub	sp, #260	@ 0x104
 80022b6:	af02      	add	r7, sp, #8
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80022b8:	213c      	movs	r1, #60	@ 0x3c
 80022ba:	48a4      	ldr	r0, [pc, #656]	@ (800254c <main_cxx+0x29c>)
 80022bc:	f007 ffbc 	bl	800a238 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80022c0:	48a3      	ldr	r0, [pc, #652]	@ (8002550 <main_cxx+0x2a0>)
 80022c2:	f007 feb1 	bl	800a028 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, &adc_buffer, 1);
 80022c6:	2201      	movs	r2, #1
 80022c8:	49a2      	ldr	r1, [pc, #648]	@ (8002554 <main_cxx+0x2a4>)
 80022ca:	48a3      	ldr	r0, [pc, #652]	@ (8002558 <main_cxx+0x2a8>)
 80022cc:	f003 fb06 	bl	80058dc <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 80022d0:	2064      	movs	r0, #100	@ 0x64
 80022d2:	f003 f98b 	bl	80055ec <HAL_Delay>
	channel_freq.ch1 = 8000;
 80022d6:	49a1      	ldr	r1, [pc, #644]	@ (800255c <main_cxx+0x2ac>)
 80022d8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9c1 2300 	strd	r2, r3, [r1]
	channel_freq.ch2 = 8000;
 80022e4:	499d      	ldr	r1, [pc, #628]	@ (800255c <main_cxx+0x2ac>)
 80022e6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
	channel_freq.ch3 = 8000;
 80022f2:	499a      	ldr	r1, [pc, #616]	@ (800255c <main_cxx+0x2ac>)
 80022f4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	lcd.init();
 8002300:	4897      	ldr	r0, [pc, #604]	@ (8002560 <main_cxx+0x2b0>)
 8002302:	f7fe ffc4 	bl	800128e <_ZN3LCD4initEv>
	lcd_controller.begin();
 8002306:	4897      	ldr	r0, [pc, #604]	@ (8002564 <main_cxx+0x2b4>)
 8002308:	f7ff faa0 	bl	800184c <_ZN14LCD_Controller5beginEv>

	if (!dds.init(SI5351_CRYSTAL_LOAD_8PF, 0, 0)) {
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	4895      	ldr	r0, [pc, #596]	@ (8002568 <main_cxx+0x2b8>)
 8002314:	f000 fe68 	bl	8002fe8 <_ZN6Si53514initEhml>
 8002318:	4603      	mov	r3, r0
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <main_cxx+0x78>
		while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <main_cxx+0x74>
			;
	}
	dds.set_freq(channel_freq.ch1 * 100, SI5351_CLK0);
 8002328:	4b8c      	ldr	r3, [pc, #560]	@ (800255c <main_cxx+0x2ac>)
 800232a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	1896      	adds	r6, r2, r2
 8002334:	673e      	str	r6, [r7, #112]	@ 0x70
 8002336:	415b      	adcs	r3, r3
 8002338:	677b      	str	r3, [r7, #116]	@ 0x74
 800233a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800233e:	1814      	adds	r4, r2, r0
 8002340:	eb43 0501 	adc.w	r5, r3, r1
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	016b      	lsls	r3, r5, #5
 800234e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002352:	0162      	lsls	r2, r4, #5
 8002354:	18a6      	adds	r6, r4, r2
 8002356:	66be      	str	r6, [r7, #104]	@ 0x68
 8002358:	eb45 0303 	adc.w	r3, r5, r3
 800235c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800235e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8002362:	4623      	mov	r3, r4
 8002364:	181b      	adds	r3, r3, r0
 8002366:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800236a:	462b      	mov	r3, r5
 800236c:	eb41 0303 	adc.w	r3, r1, r3
 8002370:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800237c:	487a      	ldr	r0, [pc, #488]	@ (8002568 <main_cxx+0x2b8>)
 800237e:	f000 ff77 	bl	8003270 <_ZN6Si53518set_freqEy12si5351_clock>
	dds.set_freq(channel_freq.ch2 * 100, SI5351_CLK1);
 8002382:	4b76      	ldr	r3, [pc, #472]	@ (800255c <main_cxx+0x2ac>)
 8002384:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	1894      	adds	r4, r2, r2
 800238e:	663c      	str	r4, [r7, #96]	@ 0x60
 8002390:	415b      	adcs	r3, r3
 8002392:	667b      	str	r3, [r7, #100]	@ 0x64
 8002394:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002398:	eb12 0800 	adds.w	r8, r2, r0
 800239c:	eb43 0901 	adc.w	r9, r3, r1
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80023ac:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80023b0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80023b4:	eb18 0402 	adds.w	r4, r8, r2
 80023b8:	65bc      	str	r4, [r7, #88]	@ 0x58
 80023ba:	eb49 0303 	adc.w	r3, r9, r3
 80023be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023c0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80023c4:	4623      	mov	r3, r4
 80023c6:	181b      	adds	r3, r3, r0
 80023c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023cc:	462b      	mov	r3, r5
 80023ce:	eb41 0303 	adc.w	r3, r1, r3
 80023d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023d6:	2301      	movs	r3, #1
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80023de:	4862      	ldr	r0, [pc, #392]	@ (8002568 <main_cxx+0x2b8>)
 80023e0:	f000 ff46 	bl	8003270 <_ZN6Si53518set_freqEy12si5351_clock>
	dds.set_freq(channel_freq.ch3 * 100, SI5351_CLK2);
 80023e4:	4b5d      	ldr	r3, [pc, #372]	@ (800255c <main_cxx+0x2ac>)
 80023e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	1894      	adds	r4, r2, r2
 80023f0:	653c      	str	r4, [r7, #80]	@ 0x50
 80023f2:	415b      	adcs	r3, r3
 80023f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80023f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023fa:	eb12 0a00 	adds.w	sl, r2, r0
 80023fe:	eb43 0b01 	adc.w	fp, r3, r1
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800240e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002412:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002416:	eb1a 0402 	adds.w	r4, sl, r2
 800241a:	64bc      	str	r4, [r7, #72]	@ 0x48
 800241c:	eb4b 0303 	adc.w	r3, fp, r3
 8002420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002422:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002426:	4623      	mov	r3, r4
 8002428:	181b      	adds	r3, r3, r0
 800242a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800242e:	462b      	mov	r3, r5
 8002430:	eb41 0303 	adc.w	r3, r1, r3
 8002434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002440:	4849      	ldr	r0, [pc, #292]	@ (8002568 <main_cxx+0x2b8>)
 8002442:	f000 ff15 	bl	8003270 <_ZN6Si53518set_freqEy12si5351_clock>
	while (1) {
		static Si5315_Channel_Frequency last_channel_freq;
		static Button::ButtonState last_button_state;
		check_encoder_direction(&htim3);
 8002446:	4841      	ldr	r0, [pc, #260]	@ (800254c <main_cxx+0x29c>)
 8002448:	f7ff fe96 	bl	8002178 <_Z23check_encoder_directionP17TIM_HandleTypeDef>
		if (encoder_state == ENCODER_UP) {
 800244c:	4b47      	ldr	r3, [pc, #284]	@ (800256c <main_cxx+0x2bc>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 81ea 	bne.w	800282a <main_cxx+0x57a>
			if (!lcd_controller.get_arrow_blink()) {
 8002456:	4843      	ldr	r0, [pc, #268]	@ (8002564 <main_cxx+0x2b4>)
 8002458:	f7ff fe55 	bl	8002106 <_ZN14LCD_Controller15get_arrow_blinkEv>
 800245c:	4603      	mov	r3, r0
 800245e:	f083 0301 	eor.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <main_cxx+0x1ca>
				encoder_counter++;
 8002468:	4b41      	ldr	r3, [pc, #260]	@ (8002570 <main_cxx+0x2c0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <main_cxx+0x2c0>)
 8002470:	601a      	str	r2, [r3, #0]
				lcd_controller.increment_arrow_cursor();
 8002472:	483c      	ldr	r0, [pc, #240]	@ (8002564 <main_cxx+0x2b4>)
 8002474:	f7ff fcde 	bl	8001e34 <_ZN14LCD_Controller22increment_arrow_cursorEv>
 8002478:	e3b8      	b.n	8002bec <main_cxx+0x93c>
			} else {
				if (lcd_controller.get_arrow_cursor() == 0) {
 800247a:	483a      	ldr	r0, [pc, #232]	@ (8002564 <main_cxx+0x2b4>)
 800247c:	f7ff fe36 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8093 	beq.w	80025b8 <main_cxx+0x308>
					int extracted_digit = (channel_freq.ch1
 8002492:	4b32      	ldr	r3, [pc, #200]	@ (800255c <main_cxx+0x2ac>)
 8002494:	e9d3 4500 	ldrd	r4, r5, [r3]
							/ int(pow(10, lcd_controller.get_digit_col())))
 8002498:	4832      	ldr	r0, [pc, #200]	@ (8002564 <main_cxx+0x2b4>)
 800249a:	f7ff fe4d 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 800249e:	4603      	mov	r3, r0
 80024a0:	4619      	mov	r1, r3
 80024a2:	200a      	movs	r0, #10
 80024a4:	f000 fd22 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024a8:	ec53 2b10 	vmov	r2, r3, d0
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb5a 	bl	8000b68 <__aeabi_d2iz>
 80024b4:	4603      	mov	r3, r0
 80024b6:	17da      	asrs	r2, r3, #31
 80024b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024c0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80024c4:	4620      	mov	r0, r4
 80024c6:	4629      	mov	r1, r5
 80024c8:	f7fe fc16 	bl	8000cf8 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
							% 10;
 80024d4:	f04f 020a 	mov.w	r2, #10
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	f7fe fc0c 	bl	8000cf8 <__aeabi_uldivmod>
 80024e0:	4613      	mov	r3, r2
 80024e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

					if (extracted_digit == 9) {
 80024e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d142      	bne.n	8002574 <main_cxx+0x2c4>
						channel_freq.ch1 -= extracted_digit
								* pow(10, lcd_controller.get_digit_col());
 80024ee:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80024f2:	f7fe f81f 	bl	8000534 <__aeabi_i2d>
 80024f6:	4604      	mov	r4, r0
 80024f8:	460d      	mov	r5, r1
 80024fa:	481a      	ldr	r0, [pc, #104]	@ (8002564 <main_cxx+0x2b4>)
 80024fc:	f7ff fe1c 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 8002500:	4603      	mov	r3, r0
 8002502:	4619      	mov	r1, r3
 8002504:	200a      	movs	r0, #10
 8002506:	f000 fcf1 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800250a:	ec53 2b10 	vmov	r2, r3, d0
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fe f879 	bl	8000608 <__aeabi_dmul>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4614      	mov	r4, r2
 800251c:	461d      	mov	r5, r3
						channel_freq.ch1 -= extracted_digit
 800251e:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <main_cxx+0x2ac>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe f838 	bl	800059c <__aeabi_ul2d>
 800252c:	4622      	mov	r2, r4
 800252e:	462b      	mov	r3, r5
 8002530:	f7fd feb2 	bl	8000298 <__aeabi_dsub>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fbf4 	bl	8000d28 <__aeabi_d2ulz>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4905      	ldr	r1, [pc, #20]	@ (800255c <main_cxx+0x2ac>)
 8002546:	e9c1 2300 	strd	r2, r3, [r1]
 800254a:	e035      	b.n	80025b8 <main_cxx+0x308>
 800254c:	20000aa0 	.word	0x20000aa0
 8002550:	20000ae8 	.word	0x20000ae8
 8002554:	20000a70 	.word	0x20000a70
 8002558:	200007dc 	.word	0x200007dc
 800255c:	20000a50 	.word	0x20000a50
 8002560:	200008d8 	.word	0x200008d8
 8002564:	20000930 	.word	0x20000930
 8002568:	200009c0 	.word	0x200009c0
 800256c:	20000a78 	.word	0x20000a78
 8002570:	20000a68 	.word	0x20000a68
					} else {
						channel_freq.ch1 += pow(10,
 8002574:	48ba      	ldr	r0, [pc, #744]	@ (8002860 <main_cxx+0x5b0>)
 8002576:	f7ff fddf 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	200a      	movs	r0, #10
 8002580:	f000 fcb4 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002584:	ec55 4b10 	vmov	r4, r5, d0
 8002588:	4bb6      	ldr	r3, [pc, #728]	@ (8002864 <main_cxx+0x5b4>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe f803 	bl	800059c <__aeabi_ul2d>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4620      	mov	r0, r4
 800259c:	4629      	mov	r1, r5
 800259e:	f7fd fe7d 	bl	800029c <__adddf3>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7fe fbbd 	bl	8000d28 <__aeabi_d2ulz>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	49ac      	ldr	r1, [pc, #688]	@ (8002864 <main_cxx+0x5b4>)
 80025b4:	e9c1 2300 	strd	r2, r3, [r1]
								lcd_controller.get_digit_col());
					}
				}
				if (lcd_controller.get_arrow_cursor() == 1) {
 80025b8:	48a9      	ldr	r0, [pc, #676]	@ (8002860 <main_cxx+0x5b0>)
 80025ba:	f7ff fd97 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07e      	beq.n	80026cc <main_cxx+0x41c>
					int extracted_digit = (channel_freq.ch2
 80025ce:	4ba5      	ldr	r3, [pc, #660]	@ (8002864 <main_cxx+0x5b4>)
 80025d0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
							/ int(pow(10, lcd_controller.get_digit_col())))
 80025d4:	48a2      	ldr	r0, [pc, #648]	@ (8002860 <main_cxx+0x5b0>)
 80025d6:	f7ff fdaf 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	200a      	movs	r0, #10
 80025e0:	f000 fc84 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80025e4:	ec53 2b10 	vmov	r2, r3, d0
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fabc 	bl	8000b68 <__aeabi_d2iz>
 80025f0:	4603      	mov	r3, r0
 80025f2:	17da      	asrs	r2, r3, #31
 80025f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025f8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80025fc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f7fe fb78 	bl	8000cf8 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
							% 10;
 8002610:	f04f 020a 	mov.w	r2, #10
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	f7fe fb6e 	bl	8000cf8 <__aeabi_uldivmod>
 800261c:	4613      	mov	r3, r2
 800261e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

					if (extracted_digit == 9) {
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002626:	2b09      	cmp	r3, #9
 8002628:	d12e      	bne.n	8002688 <main_cxx+0x3d8>
						channel_freq.ch2 -= extracted_digit
								* pow(10, lcd_controller.get_digit_col());
 800262a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800262e:	f7fd ff81 	bl	8000534 <__aeabi_i2d>
 8002632:	4604      	mov	r4, r0
 8002634:	460d      	mov	r5, r1
 8002636:	488a      	ldr	r0, [pc, #552]	@ (8002860 <main_cxx+0x5b0>)
 8002638:	f7ff fd7e 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 800263c:	4603      	mov	r3, r0
 800263e:	4619      	mov	r1, r3
 8002640:	200a      	movs	r0, #10
 8002642:	f000 fc53 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002646:	ec53 2b10 	vmov	r2, r3, d0
 800264a:	4620      	mov	r0, r4
 800264c:	4629      	mov	r1, r5
 800264e:	f7fd ffdb 	bl	8000608 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4614      	mov	r4, r2
 8002658:	461d      	mov	r5, r3
						channel_freq.ch2 -= extracted_digit
 800265a:	4b82      	ldr	r3, [pc, #520]	@ (8002864 <main_cxx+0x5b4>)
 800265c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fd ff9a 	bl	800059c <__aeabi_ul2d>
 8002668:	4622      	mov	r2, r4
 800266a:	462b      	mov	r3, r5
 800266c:	f7fd fe14 	bl	8000298 <__aeabi_dsub>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fb56 	bl	8000d28 <__aeabi_d2ulz>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4978      	ldr	r1, [pc, #480]	@ (8002864 <main_cxx+0x5b4>)
 8002682:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002686:	e021      	b.n	80026cc <main_cxx+0x41c>
					} else {
						channel_freq.ch2 += pow(10,
 8002688:	4875      	ldr	r0, [pc, #468]	@ (8002860 <main_cxx+0x5b0>)
 800268a:	f7ff fd55 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 800268e:	4603      	mov	r3, r0
 8002690:	4619      	mov	r1, r3
 8002692:	200a      	movs	r0, #10
 8002694:	f000 fc2a 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002698:	ec55 4b10 	vmov	r4, r5, d0
 800269c:	4b71      	ldr	r3, [pc, #452]	@ (8002864 <main_cxx+0x5b4>)
 800269e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fd ff79 	bl	800059c <__aeabi_ul2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4620      	mov	r0, r4
 80026b0:	4629      	mov	r1, r5
 80026b2:	f7fd fdf3 	bl	800029c <__adddf3>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fb33 	bl	8000d28 <__aeabi_d2ulz>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4967      	ldr	r1, [pc, #412]	@ (8002864 <main_cxx+0x5b4>)
 80026c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
								lcd_controller.get_digit_col());
					}
				}
				if (lcd_controller.get_arrow_cursor() == 2) {
 80026cc:	4864      	ldr	r0, [pc, #400]	@ (8002860 <main_cxx+0x5b0>)
 80026ce:	f7ff fd0d 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d07e      	beq.n	80027e0 <main_cxx+0x530>
					int extracted_digit = (channel_freq.ch3
 80026e2:	4b60      	ldr	r3, [pc, #384]	@ (8002864 <main_cxx+0x5b4>)
 80026e4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
							/ int(pow(10, lcd_controller.get_digit_col())))
 80026e8:	485d      	ldr	r0, [pc, #372]	@ (8002860 <main_cxx+0x5b0>)
 80026ea:	f7ff fd25 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4619      	mov	r1, r3
 80026f2:	200a      	movs	r0, #10
 80026f4:	f000 fbfa 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026f8:	ec53 2b10 	vmov	r2, r3, d0
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	f7fe fa32 	bl	8000b68 <__aeabi_d2iz>
 8002704:	4603      	mov	r3, r0
 8002706:	17da      	asrs	r2, r3, #31
 8002708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800270c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002710:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002714:	4620      	mov	r0, r4
 8002716:	4629      	mov	r1, r5
 8002718:	f7fe faee 	bl	8000cf8 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
							% 10;
 8002724:	f04f 020a 	mov.w	r2, #10
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f7fe fae4 	bl	8000cf8 <__aeabi_uldivmod>
 8002730:	4613      	mov	r3, r2
 8002732:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

					if (extracted_digit == 9) {
 8002736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800273a:	2b09      	cmp	r3, #9
 800273c:	d12e      	bne.n	800279c <main_cxx+0x4ec>
						channel_freq.ch3 -= extracted_digit
								* pow(10, lcd_controller.get_digit_col());
 800273e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8002742:	f7fd fef7 	bl	8000534 <__aeabi_i2d>
 8002746:	4604      	mov	r4, r0
 8002748:	460d      	mov	r5, r1
 800274a:	4845      	ldr	r0, [pc, #276]	@ (8002860 <main_cxx+0x5b0>)
 800274c:	f7ff fcf4 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 8002750:	4603      	mov	r3, r0
 8002752:	4619      	mov	r1, r3
 8002754:	200a      	movs	r0, #10
 8002756:	f000 fbc9 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800275a:	ec53 2b10 	vmov	r2, r3, d0
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fd ff51 	bl	8000608 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4614      	mov	r4, r2
 800276c:	461d      	mov	r5, r3
						channel_freq.ch3 -= extracted_digit
 800276e:	4b3d      	ldr	r3, [pc, #244]	@ (8002864 <main_cxx+0x5b4>)
 8002770:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fd ff10 	bl	800059c <__aeabi_ul2d>
 800277c:	4622      	mov	r2, r4
 800277e:	462b      	mov	r3, r5
 8002780:	f7fd fd8a 	bl	8000298 <__aeabi_dsub>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe facc 	bl	8000d28 <__aeabi_d2ulz>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4933      	ldr	r1, [pc, #204]	@ (8002864 <main_cxx+0x5b4>)
 8002796:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800279a:	e021      	b.n	80027e0 <main_cxx+0x530>
					} else {
						channel_freq.ch3 += pow(10,
 800279c:	4830      	ldr	r0, [pc, #192]	@ (8002860 <main_cxx+0x5b0>)
 800279e:	f7ff fccb 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4619      	mov	r1, r3
 80027a6:	200a      	movs	r0, #10
 80027a8:	f000 fba0 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027ac:	ec55 4b10 	vmov	r4, r5, d0
 80027b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002864 <main_cxx+0x5b4>)
 80027b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fd feef 	bl	800059c <__aeabi_ul2d>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fd fd69 	bl	800029c <__adddf3>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe faa9 	bl	8000d28 <__aeabi_d2ulz>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4922      	ldr	r1, [pc, #136]	@ (8002864 <main_cxx+0x5b4>)
 80027dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
								lcd_controller.get_digit_col());
					}
				}
				bound_value(channel_freq.ch1, 8000, 999999999);
 80027e0:	a31d      	add	r3, pc, #116	@ (adr r3, 8002858 <main_cxx+0x5a8>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	e9cd 2300 	strd	r2, r3, [sp]
 80027ea:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	481c      	ldr	r0, [pc, #112]	@ (8002864 <main_cxx+0x5b4>)
 80027f4:	f7ff fd08 	bl	8002208 <_Z11bound_valueRyyy>
				bound_value(channel_freq.ch2, 8000, 999999999);
 80027f8:	a317      	add	r3, pc, #92	@ (adr r3, 8002858 <main_cxx+0x5a8>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	e9cd 2300 	strd	r2, r3, [sp]
 8002802:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	4817      	ldr	r0, [pc, #92]	@ (8002868 <main_cxx+0x5b8>)
 800280c:	f7ff fcfc 	bl	8002208 <_Z11bound_valueRyyy>
				bound_value(channel_freq.ch3, 8000, 999999999);
 8002810:	a311      	add	r3, pc, #68	@ (adr r3, 8002858 <main_cxx+0x5a8>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	e9cd 2300 	strd	r2, r3, [sp]
 800281a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	4812      	ldr	r0, [pc, #72]	@ (800286c <main_cxx+0x5bc>)
 8002824:	f7ff fcf0 	bl	8002208 <_Z11bound_valueRyyy>
 8002828:	e1e0      	b.n	8002bec <main_cxx+0x93c>
			}
		} else if (encoder_state == ENCODER_DOWN) {
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <main_cxx+0x5c0>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	f040 81dc 	bne.w	8002bec <main_cxx+0x93c>
			if (!lcd_controller.get_arrow_blink()) {
 8002834:	480a      	ldr	r0, [pc, #40]	@ (8002860 <main_cxx+0x5b0>)
 8002836:	f7ff fc66 	bl	8002106 <_ZN14LCD_Controller15get_arrow_blinkEv>
 800283a:	4603      	mov	r3, r0
 800283c:	f083 0301 	eor.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <main_cxx+0x5c8>
				encoder_counter--;
 8002846:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <main_cxx+0x5c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <main_cxx+0x5c4>)
 800284e:	601a      	str	r2, [r3, #0]
				lcd_controller.decrement_arrow_cursor();
 8002850:	4803      	ldr	r0, [pc, #12]	@ (8002860 <main_cxx+0x5b0>)
 8002852:	f7ff fb02 	bl	8001e5a <_ZN14LCD_Controller22decrement_arrow_cursorEv>
 8002856:	e1c9      	b.n	8002bec <main_cxx+0x93c>
 8002858:	3b9ac9ff 	.word	0x3b9ac9ff
 800285c:	00000000 	.word	0x00000000
 8002860:	20000930 	.word	0x20000930
 8002864:	20000a50 	.word	0x20000a50
 8002868:	20000a58 	.word	0x20000a58
 800286c:	20000a60 	.word	0x20000a60
 8002870:	20000a78 	.word	0x20000a78
 8002874:	20000a68 	.word	0x20000a68
			} else {
				if (lcd_controller.get_arrow_cursor() == 0) {
 8002878:	48b7      	ldr	r0, [pc, #732]	@ (8002b58 <main_cxx+0x8a8>)
 800287a:	f7ff fc37 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d079      	beq.n	8002982 <main_cxx+0x6d2>

					int extracted_digit = (channel_freq.ch1
 800288e:	4bb3      	ldr	r3, [pc, #716]	@ (8002b5c <main_cxx+0x8ac>)
 8002890:	e9d3 4500 	ldrd	r4, r5, [r3]
							/ int(pow(10, lcd_controller.get_digit_col())))
 8002894:	48b0      	ldr	r0, [pc, #704]	@ (8002b58 <main_cxx+0x8a8>)
 8002896:	f7ff fc4f 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 800289a:	4603      	mov	r3, r0
 800289c:	4619      	mov	r1, r3
 800289e:	200a      	movs	r0, #10
 80028a0:	f000 fb24 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028a4:	ec53 2b10 	vmov	r2, r3, d0
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f95c 	bl	8000b68 <__aeabi_d2iz>
 80028b0:	4603      	mov	r3, r0
 80028b2:	17da      	asrs	r2, r3, #31
 80028b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028b8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028bc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80028c0:	4620      	mov	r0, r4
 80028c2:	4629      	mov	r1, r5
 80028c4:	f7fe fa18 	bl	8000cf8 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
							% 10;
 80028d0:	f04f 020a 	mov.w	r2, #10
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	f7fe fa0e 	bl	8000cf8 <__aeabi_uldivmod>
 80028dc:	4613      	mov	r3, r2
 80028de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

					if (extracted_digit == 0) {
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d12b      	bne.n	8002942 <main_cxx+0x692>
						channel_freq.ch1 += 9
								* pow(10, lcd_controller.get_digit_col());
 80028ea:	489b      	ldr	r0, [pc, #620]	@ (8002b58 <main_cxx+0x8a8>)
 80028ec:	f7ff fc24 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4619      	mov	r1, r3
 80028f4:	200a      	movs	r0, #10
 80028f6:	f000 faf9 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028fa:	ec51 0b10 	vmov	r0, r1, d0
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b97      	ldr	r3, [pc, #604]	@ (8002b60 <main_cxx+0x8b0>)
 8002904:	f7fd fe80 	bl	8000608 <__aeabi_dmul>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
						channel_freq.ch1 += 9
 8002910:	4b92      	ldr	r3, [pc, #584]	@ (8002b5c <main_cxx+0x8ac>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fd fe3f 	bl	800059c <__aeabi_ul2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4620      	mov	r0, r4
 8002924:	4629      	mov	r1, r5
 8002926:	f7fd fcb9 	bl	800029c <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f7fe f9f9 	bl	8000d28 <__aeabi_d2ulz>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4988      	ldr	r1, [pc, #544]	@ (8002b5c <main_cxx+0x8ac>)
 800293c:	e9c1 2300 	strd	r2, r3, [r1]
 8002940:	e01f      	b.n	8002982 <main_cxx+0x6d2>
					} else {
						channel_freq.ch1 -= pow(10,
 8002942:	4885      	ldr	r0, [pc, #532]	@ (8002b58 <main_cxx+0x8a8>)
 8002944:	f7ff fbf8 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 8002948:	4603      	mov	r3, r0
 800294a:	4619      	mov	r1, r3
 800294c:	200a      	movs	r0, #10
 800294e:	f000 facd 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002952:	ec55 4b10 	vmov	r4, r5, d0
 8002956:	4b81      	ldr	r3, [pc, #516]	@ (8002b5c <main_cxx+0x8ac>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fd fe1c 	bl	800059c <__aeabi_ul2d>
 8002964:	4622      	mov	r2, r4
 8002966:	462b      	mov	r3, r5
 8002968:	f7fd fc96 	bl	8000298 <__aeabi_dsub>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f9d8 	bl	8000d28 <__aeabi_d2ulz>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4977      	ldr	r1, [pc, #476]	@ (8002b5c <main_cxx+0x8ac>)
 800297e:	e9c1 2300 	strd	r2, r3, [r1]
								lcd_controller.get_digit_col());
					}
				}
				if (lcd_controller.get_arrow_cursor() == 1) {
 8002982:	4875      	ldr	r0, [pc, #468]	@ (8002b58 <main_cxx+0x8a8>)
 8002984:	f7ff fbb2 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d079      	beq.n	8002a8c <main_cxx+0x7dc>

					int extracted_digit = (channel_freq.ch2
 8002998:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <main_cxx+0x8ac>)
 800299a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
							/ int(pow(10, lcd_controller.get_digit_col())))
 800299e:	486e      	ldr	r0, [pc, #440]	@ (8002b58 <main_cxx+0x8a8>)
 80029a0:	f7ff fbca 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4619      	mov	r1, r3
 80029a8:	200a      	movs	r0, #10
 80029aa:	f000 fa9f 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029ae:	ec53 2b10 	vmov	r2, r3, d0
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f8d7 	bl	8000b68 <__aeabi_d2iz>
 80029ba:	4603      	mov	r3, r0
 80029bc:	17da      	asrs	r2, r3, #31
 80029be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029c2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029c6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7fe f993 	bl	8000cf8 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
							% 10;
 80029da:	f04f 020a 	mov.w	r2, #10
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f7fe f989 	bl	8000cf8 <__aeabi_uldivmod>
 80029e6:	4613      	mov	r3, r2
 80029e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

					if (extracted_digit == 0) {
 80029ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d12b      	bne.n	8002a4c <main_cxx+0x79c>
						channel_freq.ch2 += 9
								* pow(10, lcd_controller.get_digit_col());
 80029f4:	4858      	ldr	r0, [pc, #352]	@ (8002b58 <main_cxx+0x8a8>)
 80029f6:	f7ff fb9f 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4619      	mov	r1, r3
 80029fe:	200a      	movs	r0, #10
 8002a00:	f000 fa74 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a04:	ec51 0b10 	vmov	r0, r1, d0
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	4b54      	ldr	r3, [pc, #336]	@ (8002b60 <main_cxx+0x8b0>)
 8002a0e:	f7fd fdfb 	bl	8000608 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4614      	mov	r4, r2
 8002a18:	461d      	mov	r5, r3
						channel_freq.ch2 += 9
 8002a1a:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <main_cxx+0x8ac>)
 8002a1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fd fdba 	bl	800059c <__aeabi_ul2d>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4629      	mov	r1, r5
 8002a30:	f7fd fc34 	bl	800029c <__adddf3>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7fe f974 	bl	8000d28 <__aeabi_d2ulz>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4945      	ldr	r1, [pc, #276]	@ (8002b5c <main_cxx+0x8ac>)
 8002a46:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002a4a:	e01f      	b.n	8002a8c <main_cxx+0x7dc>
					} else {
						channel_freq.ch2 -= pow(10,
 8002a4c:	4842      	ldr	r0, [pc, #264]	@ (8002b58 <main_cxx+0x8a8>)
 8002a4e:	f7ff fb73 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4619      	mov	r1, r3
 8002a56:	200a      	movs	r0, #10
 8002a58:	f000 fa48 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a5c:	ec55 4b10 	vmov	r4, r5, d0
 8002a60:	4b3e      	ldr	r3, [pc, #248]	@ (8002b5c <main_cxx+0x8ac>)
 8002a62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fd fd97 	bl	800059c <__aeabi_ul2d>
 8002a6e:	4622      	mov	r2, r4
 8002a70:	462b      	mov	r3, r5
 8002a72:	f7fd fc11 	bl	8000298 <__aeabi_dsub>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7fe f953 	bl	8000d28 <__aeabi_d2ulz>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4935      	ldr	r1, [pc, #212]	@ (8002b5c <main_cxx+0x8ac>)
 8002a88:	e9c1 2302 	strd	r2, r3, [r1, #8]
								lcd_controller.get_digit_col());
					}
				}
				if (lcd_controller.get_arrow_cursor() == 2) {
 8002a8c:	4832      	ldr	r0, [pc, #200]	@ (8002b58 <main_cxx+0x8a8>)
 8002a8e:	f7ff fb2d 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8080 	beq.w	8002ba4 <main_cxx+0x8f4>

					int extracted_digit = (channel_freq.ch3
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <main_cxx+0x8ac>)
 8002aa6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
							/ int(pow(10, lcd_controller.get_digit_col())))
 8002aaa:	482b      	ldr	r0, [pc, #172]	@ (8002b58 <main_cxx+0x8a8>)
 8002aac:	f7ff fb44 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	200a      	movs	r0, #10
 8002ab6:	f000 fa19 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002aba:	ec53 2b10 	vmov	r2, r3, d0
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f851 	bl	8000b68 <__aeabi_d2iz>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	17da      	asrs	r2, r3, #31
 8002aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ace:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ad2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f7fe f90d 	bl	8000cf8 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
							% 10;
 8002ae6:	f04f 020a 	mov.w	r2, #10
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f7fe f903 	bl	8000cf8 <__aeabi_uldivmod>
 8002af2:	4613      	mov	r3, r2
 8002af4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

					if (extracted_digit == 0) {
 8002af8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d131      	bne.n	8002b64 <main_cxx+0x8b4>
						channel_freq.ch3 += 9
								* pow(10, lcd_controller.get_digit_col());
 8002b00:	4815      	ldr	r0, [pc, #84]	@ (8002b58 <main_cxx+0x8a8>)
 8002b02:	f7ff fb19 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	200a      	movs	r0, #10
 8002b0c:	f000 f9ee 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b10:	ec51 0b10 	vmov	r0, r1, d0
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <main_cxx+0x8b0>)
 8002b1a:	f7fd fd75 	bl	8000608 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4614      	mov	r4, r2
 8002b24:	461d      	mov	r5, r3
						channel_freq.ch3 += 9
 8002b26:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <main_cxx+0x8ac>)
 8002b28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7fd fd34 	bl	800059c <__aeabi_ul2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4620      	mov	r0, r4
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	f7fd fbae 	bl	800029c <__adddf3>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe f8ee 	bl	8000d28 <__aeabi_d2ulz>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4902      	ldr	r1, [pc, #8]	@ (8002b5c <main_cxx+0x8ac>)
 8002b52:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002b56:	e025      	b.n	8002ba4 <main_cxx+0x8f4>
 8002b58:	20000930 	.word	0x20000930
 8002b5c:	20000a50 	.word	0x20000a50
 8002b60:	40220000 	.word	0x40220000
					} else {
						channel_freq.ch3 -= pow(10,
 8002b64:	48ac      	ldr	r0, [pc, #688]	@ (8002e18 <main_cxx+0xb68>)
 8002b66:	f7ff fae7 	bl	8002138 <_ZN14LCD_Controller13get_digit_colEv>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	200a      	movs	r0, #10
 8002b70:	f000 f9bc 	bl	8002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b74:	ec55 4b10 	vmov	r4, r5, d0
 8002b78:	4ba8      	ldr	r3, [pc, #672]	@ (8002e1c <main_cxx+0xb6c>)
 8002b7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd fd0b 	bl	800059c <__aeabi_ul2d>
 8002b86:	4622      	mov	r2, r4
 8002b88:	462b      	mov	r3, r5
 8002b8a:	f7fd fb85 	bl	8000298 <__aeabi_dsub>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7fe f8c7 	bl	8000d28 <__aeabi_d2ulz>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	499f      	ldr	r1, [pc, #636]	@ (8002e1c <main_cxx+0xb6c>)
 8002ba0:	e9c1 2304 	strd	r2, r3, [r1, #16]
								lcd_controller.get_digit_col());
					}
				}
				bound_value(channel_freq.ch1, 8000, 999999999);
 8002ba4:	a39a      	add	r3, pc, #616	@ (adr r3, 8002e10 <main_cxx+0xb60>)
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	e9cd 2300 	strd	r2, r3, [sp]
 8002bae:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	4899      	ldr	r0, [pc, #612]	@ (8002e1c <main_cxx+0xb6c>)
 8002bb8:	f7ff fb26 	bl	8002208 <_Z11bound_valueRyyy>
				bound_value(channel_freq.ch2, 8000, 999999999);
 8002bbc:	a394      	add	r3, pc, #592	@ (adr r3, 8002e10 <main_cxx+0xb60>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	e9cd 2300 	strd	r2, r3, [sp]
 8002bc6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	4894      	ldr	r0, [pc, #592]	@ (8002e20 <main_cxx+0xb70>)
 8002bd0:	f7ff fb1a 	bl	8002208 <_Z11bound_valueRyyy>
				bound_value(channel_freq.ch3, 8000, 999999999);
 8002bd4:	a38e      	add	r3, pc, #568	@ (adr r3, 8002e10 <main_cxx+0xb60>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	e9cd 2300 	strd	r2, r3, [sp]
 8002bde:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	488f      	ldr	r0, [pc, #572]	@ (8002e24 <main_cxx+0xb74>)
 8002be8:	f7ff fb0e 	bl	8002208 <_Z11bound_valueRyyy>
			}
		}

		Button::ButtonState button_state = encoder_button.getState();
 8002bec:	488e      	ldr	r0, [pc, #568]	@ (8002e28 <main_cxx+0xb78>)
 8002bee:	f7fe fabf 	bl	8001170 <_ZNK6Button8getStateEv>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		if (button_state != last_button_state && button_state == Button::HOLD) {
 8002bf8:	4b8c      	ldr	r3, [pc, #560]	@ (8002e2c <main_cxx+0xb7c>)
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01c      	beq.n	8002c3e <main_cxx+0x98e>
 8002c04:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d118      	bne.n	8002c3e <main_cxx+0x98e>
			lcd_controller.set_arrow_blink(!lcd_controller.get_arrow_blink());
 8002c0c:	4882      	ldr	r0, [pc, #520]	@ (8002e18 <main_cxx+0xb68>)
 8002c0e:	f7ff fa7a 	bl	8002106 <_ZN14LCD_Controller15get_arrow_blinkEv>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	487e      	ldr	r0, [pc, #504]	@ (8002e18 <main_cxx+0xb68>)
 8002c1e:	f7ff f92f 	bl	8001e80 <_ZN14LCD_Controller15set_arrow_blinkEb>
			lcd_controller.set_digit_col(0);
 8002c22:	2100      	movs	r1, #0
 8002c24:	487c      	ldr	r0, [pc, #496]	@ (8002e18 <main_cxx+0xb68>)
 8002c26:	f7ff f981 	bl	8001f2c <_ZN14LCD_Controller13set_digit_colEa>
			lcd_controller.set_digit_row(lcd_controller.get_arrow_cursor());
 8002c2a:	487b      	ldr	r0, [pc, #492]	@ (8002e18 <main_cxx+0xb68>)
 8002c2c:	f7ff fa5e 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	4878      	ldr	r0, [pc, #480]	@ (8002e18 <main_cxx+0xb68>)
 8002c38:	f7ff f968 	bl	8001f0c <_ZN14LCD_Controller13set_digit_rowEa>
 8002c3c:	e05b      	b.n	8002cf6 <main_cxx+0xa46>
		} else if (button_state != last_button_state
 8002c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e2c <main_cxx+0xb7c>)
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d015      	beq.n	8002c76 <main_cxx+0x9c6>
				&& button_state == Button::PRESSED) {
 8002c4a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d111      	bne.n	8002c76 <main_cxx+0x9c6>
			lcd_controller.increment_digit_cursor();
 8002c52:	4871      	ldr	r0, [pc, #452]	@ (8002e18 <main_cxx+0xb68>)
 8002c54:	f7ff f97a 	bl	8001f4c <_ZN14LCD_Controller22increment_digit_cursorEv>
			if (lcd_controller.get_arrow_blink())
 8002c58:	486f      	ldr	r0, [pc, #444]	@ (8002e18 <main_cxx+0xb68>)
 8002c5a:	f7ff fa54 	bl	8002106 <_ZN14LCD_Controller15get_arrow_blinkEv>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d048      	beq.n	8002cf6 <main_cxx+0xa46>
				lcd_controller.force_refresh_row(
 8002c64:	486c      	ldr	r0, [pc, #432]	@ (8002e18 <main_cxx+0xb68>)
 8002c66:	f7ff fa5a 	bl	800211e <_ZN14LCD_Controller13get_digit_rowEv>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	486a      	ldr	r0, [pc, #424]	@ (8002e18 <main_cxx+0xb68>)
 8002c70:	f7ff fa6f 	bl	8002152 <_ZN14LCD_Controller17force_refresh_rowEi>
			if (lcd_controller.get_arrow_blink())
 8002c74:	e03f      	b.n	8002cf6 <main_cxx+0xa46>
						lcd_controller.get_digit_row());
		} else if (button_state != last_button_state
 8002c76:	4b6d      	ldr	r3, [pc, #436]	@ (8002e2c <main_cxx+0xb7c>)
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d039      	beq.n	8002cf6 <main_cxx+0xa46>
				&& button_state == Button::DOUBLE_CLICK) {
 8002c82:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d135      	bne.n	8002cf6 <main_cxx+0xa46>
			if (lcd_controller.get_arrow_cursor() == 0)
 8002c8a:	4863      	ldr	r0, [pc, #396]	@ (8002e18 <main_cxx+0xb68>)
 8002c8c:	f7ff fa2e 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <main_cxx+0x9fe>
				channel_freq.ch1 = 8000;
 8002ca0:	495e      	ldr	r1, [pc, #376]	@ (8002e1c <main_cxx+0xb6c>)
 8002ca2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9c1 2300 	strd	r2, r3, [r1]
			if (lcd_controller.get_arrow_cursor() == 1)
 8002cae:	485a      	ldr	r0, [pc, #360]	@ (8002e18 <main_cxx+0xb68>)
 8002cb0:	f7ff fa1c 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <main_cxx+0xa22>
				channel_freq.ch2 = 8000;
 8002cc4:	4955      	ldr	r1, [pc, #340]	@ (8002e1c <main_cxx+0xb6c>)
 8002cc6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9c1 2302 	strd	r2, r3, [r1, #8]
			if (lcd_controller.get_arrow_cursor() == 2)
 8002cd2:	4851      	ldr	r0, [pc, #324]	@ (8002e18 <main_cxx+0xb68>)
 8002cd4:	f7ff fa0a 	bl	80020ec <_ZN14LCD_Controller16get_arrow_cursorEv>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <main_cxx+0xa46>
				channel_freq.ch3 = 8000;
 8002ce8:	494c      	ldr	r1, [pc, #304]	@ (8002e1c <main_cxx+0xb6c>)
 8002cea:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}

		if (last_channel_freq.ch1 != channel_freq.ch1) {
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e30 <main_cxx+0xb80>)
 8002cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cfc:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <main_cxx+0xb6c>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	4299      	cmp	r1, r3
 8002d04:	bf08      	it	eq
 8002d06:	4290      	cmpeq	r0, r2
 8002d08:	d03a      	beq.n	8002d80 <main_cxx+0xad0>
			dds.set_freq(channel_freq.ch1 * 100, SI5351_CLK0);
 8002d0a:	4b44      	ldr	r3, [pc, #272]	@ (8002e1c <main_cxx+0xb6c>)
 8002d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	1894      	adds	r4, r2, r2
 8002d16:	643c      	str	r4, [r7, #64]	@ 0x40
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d20:	1814      	adds	r4, r2, r0
 8002d22:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002d24:	414b      	adcs	r3, r1
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 8002d34:	4634      	mov	r4, r6
 8002d36:	0163      	lsls	r3, r4, #5
 8002d38:	462c      	mov	r4, r5
 8002d3a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002d3e:	462c      	mov	r4, r5
 8002d40:	0162      	lsls	r2, r4, #5
 8002d42:	462c      	mov	r4, r5
 8002d44:	18a4      	adds	r4, r4, r2
 8002d46:	633c      	str	r4, [r7, #48]	@ 0x30
 8002d48:	4634      	mov	r4, r6
 8002d4a:	eb44 0303 	adc.w	r3, r4, r3
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d54:	4623      	mov	r3, r4
 8002d56:	181b      	adds	r3, r3, r0
 8002d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	414b      	adcs	r3, r1
 8002d60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d64:	2300      	movs	r3, #0
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002d6c:	4831      	ldr	r0, [pc, #196]	@ (8002e34 <main_cxx+0xb84>)
 8002d6e:	f000 fa7f 	bl	8003270 <_ZN6Si53518set_freqEy12si5351_clock>
			last_channel_freq.ch1 = channel_freq.ch1;
 8002d72:	4b2a      	ldr	r3, [pc, #168]	@ (8002e1c <main_cxx+0xb6c>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	492d      	ldr	r1, [pc, #180]	@ (8002e30 <main_cxx+0xb80>)
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]
 8002d7e:	e09d      	b.n	8002ebc <main_cxx+0xc0c>
		} else if (last_channel_freq.ch2 != channel_freq.ch2) {
 8002d80:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <main_cxx+0xb80>)
 8002d82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d86:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <main_cxx+0xb6c>)
 8002d88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d8c:	4299      	cmp	r1, r3
 8002d8e:	bf08      	it	eq
 8002d90:	4290      	cmpeq	r0, r2
 8002d92:	d051      	beq.n	8002e38 <main_cxx+0xb88>
			dds.set_freq(channel_freq.ch2 * 100, SI5351_CLK1);
 8002d94:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <main_cxx+0xb6c>)
 8002d96:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	1894      	adds	r4, r2, r2
 8002da0:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002da2:	415b      	adcs	r3, r3
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002daa:	1814      	adds	r4, r2, r0
 8002dac:	623c      	str	r4, [r7, #32]
 8002dae:	414b      	adcs	r3, r1
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8002dbe:	4634      	mov	r4, r6
 8002dc0:	0163      	lsls	r3, r4, #5
 8002dc2:	462c      	mov	r4, r5
 8002dc4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002dc8:	462c      	mov	r4, r5
 8002dca:	0162      	lsls	r2, r4, #5
 8002dcc:	462c      	mov	r4, r5
 8002dce:	18a4      	adds	r4, r4, r2
 8002dd0:	61bc      	str	r4, [r7, #24]
 8002dd2:	4634      	mov	r4, r6
 8002dd4:	eb44 0303 	adc.w	r3, r4, r3
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002dde:	4623      	mov	r3, r4
 8002de0:	181b      	adds	r3, r3, r0
 8002de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002de6:	462b      	mov	r3, r5
 8002de8:	414b      	adcs	r3, r1
 8002dea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dee:	2301      	movs	r3, #1
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002df6:	480f      	ldr	r0, [pc, #60]	@ (8002e34 <main_cxx+0xb84>)
 8002df8:	f000 fa3a 	bl	8003270 <_ZN6Si53518set_freqEy12si5351_clock>
			last_channel_freq.ch2 = channel_freq.ch2;
 8002dfc:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <main_cxx+0xb6c>)
 8002dfe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e02:	490b      	ldr	r1, [pc, #44]	@ (8002e30 <main_cxx+0xb80>)
 8002e04:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e08:	e058      	b.n	8002ebc <main_cxx+0xc0c>
 8002e0a:	bf00      	nop
 8002e0c:	f3af 8000 	nop.w
 8002e10:	3b9ac9ff 	.word	0x3b9ac9ff
 8002e14:	00000000 	.word	0x00000000
 8002e18:	20000930 	.word	0x20000930
 8002e1c:	20000a50 	.word	0x20000a50
 8002e20:	20000a58 	.word	0x20000a58
 8002e24:	20000a60 	.word	0x20000a60
 8002e28:	200009a0 	.word	0x200009a0
 8002e2c:	20000a98 	.word	0x20000a98
 8002e30:	20000a80 	.word	0x20000a80
 8002e34:	200009c0 	.word	0x200009c0
		} else if (last_channel_freq.ch3 != channel_freq.ch3) {
 8002e38:	4b26      	ldr	r3, [pc, #152]	@ (8002ed4 <main_cxx+0xc24>)
 8002e3a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e3e:	4b26      	ldr	r3, [pc, #152]	@ (8002ed8 <main_cxx+0xc28>)
 8002e40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e44:	4299      	cmp	r1, r3
 8002e46:	bf08      	it	eq
 8002e48:	4290      	cmpeq	r0, r2
 8002e4a:	d037      	beq.n	8002ebc <main_cxx+0xc0c>
			dds.set_freq(channel_freq.ch3 * 100, SI5351_CLK2);
 8002e4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ed8 <main_cxx+0xc28>)
 8002e4e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	1894      	adds	r4, r2, r2
 8002e58:	613c      	str	r4, [r7, #16]
 8002e5a:	415b      	adcs	r3, r3
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e62:	1814      	adds	r4, r2, r0
 8002e64:	60bc      	str	r4, [r7, #8]
 8002e66:	414b      	adcs	r3, r1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002e76:	4634      	mov	r4, r6
 8002e78:	0163      	lsls	r3, r4, #5
 8002e7a:	462c      	mov	r4, r5
 8002e7c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002e80:	462c      	mov	r4, r5
 8002e82:	0162      	lsls	r2, r4, #5
 8002e84:	462c      	mov	r4, r5
 8002e86:	18a4      	adds	r4, r4, r2
 8002e88:	603c      	str	r4, [r7, #0]
 8002e8a:	4634      	mov	r4, r6
 8002e8c:	eb44 0303 	adc.w	r3, r4, r3
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e96:	4623      	mov	r3, r4
 8002e98:	181b      	adds	r3, r3, r0
 8002e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	414b      	adcs	r3, r1
 8002ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002eaa:	480c      	ldr	r0, [pc, #48]	@ (8002edc <main_cxx+0xc2c>)
 8002eac:	f000 f9e0 	bl	8003270 <_ZN6Si53518set_freqEy12si5351_clock>
			last_channel_freq.ch3 = channel_freq.ch3;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <main_cxx+0xc28>)
 8002eb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002eb6:	4907      	ldr	r1, [pc, #28]	@ (8002ed4 <main_cxx+0xc24>)
 8002eb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}

		lcd_controller.service();
 8002ebc:	4808      	ldr	r0, [pc, #32]	@ (8002ee0 <main_cxx+0xc30>)
 8002ebe:	f7fe fd5b 	bl	8001978 <_ZN14LCD_Controller7serviceEv>
		encoder_button.loop();
 8002ec2:	4808      	ldr	r0, [pc, #32]	@ (8002ee4 <main_cxx+0xc34>)
 8002ec4:	f7fe f93a 	bl	800113c <_ZN6Button4loopEv>

		last_button_state = button_state;
 8002ec8:	4a07      	ldr	r2, [pc, #28]	@ (8002ee8 <main_cxx+0xc38>)
 8002eca:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002ece:	7013      	strb	r3, [r2, #0]
	}
 8002ed0:	f7ff bab9 	b.w	8002446 <main_cxx+0x196>
 8002ed4:	20000a80 	.word	0x20000a80
 8002ed8:	20000a50 	.word	0x20000a50
 8002edc:	200009c0 	.word	0x200009c0
 8002ee0:	20000930 	.word	0x20000930
 8002ee4:	200009a0 	.word	0x200009a0
 8002ee8:	20000a98 	.word	0x20000a98

08002eec <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fb1c 	bl	8000534 <__aeabi_i2d>
 8002efc:	4604      	mov	r4, r0
 8002efe:	460d      	mov	r5, r1
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f7fd fb17 	bl	8000534 <__aeabi_i2d>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ec43 2b11 	vmov	d1, r2, r3
 8002f0e:	ec45 4b10 	vmov	d0, r4, r5
 8002f12:	f00b fd1d 	bl	800e950 <pow>
 8002f16:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1a:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f22:	eef0 0a67 	vmov.f32	s1, s15
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bdb0      	pop	{r4, r5, r7, pc}

08002f2c <_Z41__static_initialization_and_destruction_0ii>:
}
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d112      	bne.n	8002f62 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10d      	bne.n	8002f62 <_Z41__static_initialization_and_destruction_0ii+0x36>
Button encoder_button(GPIOA, GPIO_PIN_5);
 8002f46:	23c8      	movs	r3, #200	@ 0xc8
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4e:	2220      	movs	r2, #32
 8002f50:	4906      	ldr	r1, [pc, #24]	@ (8002f6c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002f52:	4807      	ldr	r0, [pc, #28]	@ (8002f70 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002f54:	f7fe f886 	bl	8001064 <_ZN6ButtonC1EP12GPIO_TypeDeftmm>
Si5351 dds(&hi2c1);
 8002f58:	22c0      	movs	r2, #192	@ 0xc0
 8002f5a:	4906      	ldr	r1, [pc, #24]	@ (8002f74 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002f5c:	4806      	ldr	r0, [pc, #24]	@ (8002f78 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002f5e:	f000 f815 	bl	8002f8c <_ZN6Si5351C1EP17I2C_HandleTypeDefh>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	200009a0 	.word	0x200009a0
 8002f74:	20000884 	.word	0x20000884
 8002f78:	200009c0 	.word	0x200009c0

08002f7c <_GLOBAL__sub_I_encoder_button>:
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7ff ffd1 	bl	8002f2c <_Z41__static_initialization_and_destruction_0ii>
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <_ZN6Si5351C1EP17I2C_HandleTypeDefh>:

/********************/
/* Public functions */
/********************/

Si5351::Si5351(I2C_HandleTypeDef *_handler, uint8_t i2c_addr) :
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	71fb      	strb	r3, [r7, #7]
		i2c_bus_addr(i2c_addr) {
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	711a      	strb	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3305      	adds	r3, #5
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	79fa      	ldrb	r2, [r7, #7]
 8002fae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	handler = _handler;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	675a      	str	r2, [r3, #116]	@ 0x74
	xtal_freq[0] = SI5351_XTAL_FREQ;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <_ZN6Si5351C1EP17I2C_HandleTypeDefh+0x58>)
 8002fbc:	66da      	str	r2, [r3, #108]	@ 0x6c

	// Start by using XO ref osc as default for each PLL
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	pllb_ref_osc = SI5351_PLL_INPUT_XO;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
	clkin_div = SI5351_CLKIN_DIV_1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	017d7840 	.word	0x017d7840

08002fe8 <_ZN6Si53514initEhml>:
 *
 * Returns a boolean that indicates whether a device was found on the desired
 * I2C address.
 *
 */
bool Si5351::init(uint8_t xtal_load_c, uint32_t xo_freq, int32_t corr) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef reg_val = HAL_I2C_IsDeviceReady(handler, i2c_bus_addr, 5,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003002:	4619      	mov	r1, r3
 8003004:	2364      	movs	r3, #100	@ 0x64
 8003006:	2205      	movs	r2, #5
 8003008:	f004 fbc4 	bl	8007794 <HAL_I2C_IsDeviceReady>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]
			100);

	if (reg_val == HAL_OK) {
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d141      	bne.n	800309a <_ZN6Si53514initEhml+0xb2>
		// Wait for SYS_INIT flag to be clear, indicating that device is ready
		uint8_t status_reg = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	75bb      	strb	r3, [r7, #22]
		do {
			status_reg = si5351_read(SI5351_DEVICE_STATUS);
 800301a:	2100      	movs	r1, #0
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 ff80 	bl	8003f22 <_ZN6Si535111si5351_readEh>
 8003022:	4603      	mov	r3, r0
 8003024:	75bb      	strb	r3, [r7, #22]
		} while (status_reg >> 7 == 1);
 8003026:	7dbb      	ldrb	r3, [r7, #22]
 8003028:	09db      	lsrs	r3, r3, #7
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d0f4      	beq.n	800301a <_ZN6Si53514initEhml+0x32>

		// Set crystal load capacitance
		si5351_write(SI5351_CRYSTAL_LOAD,
				(xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 8003030:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003038:	b25b      	sxtb	r3, r3
 800303a:	f043 0312 	orr.w	r3, r3, #18
 800303e:	b25b      	sxtb	r3, r3
		si5351_write(SI5351_CRYSTAL_LOAD,
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	21b7      	movs	r1, #183	@ 0xb7
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 ff4a 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>

		// Set up the XO and CLKIN reference frequencies
		if (xo_freq != 0) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <_ZN6Si53514initEhml+0x80>
			set_ref_freq(xo_freq, SI5351_PLL_INPUT_XO);
 8003052:	2200      	movs	r2, #0
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fec8 	bl	8003dec <_ZN6Si535112set_ref_freqEm16si5351_pll_input>
			set_ref_freq(xo_freq, SI5351_PLL_INPUT_CLKIN);          //Also CLKIN
 800305c:	2201      	movs	r2, #1
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fec3 	bl	8003dec <_ZN6Si535112set_ref_freqEm16si5351_pll_input>
 8003066:	e009      	b.n	800307c <_ZN6Si53514initEhml+0x94>
		} else {
			set_ref_freq(SI5351_XTAL_FREQ, SI5351_PLL_INPUT_XO);
 8003068:	2200      	movs	r2, #0
 800306a:	490e      	ldr	r1, [pc, #56]	@ (80030a4 <_ZN6Si53514initEhml+0xbc>)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 febd 	bl	8003dec <_ZN6Si535112set_ref_freqEm16si5351_pll_input>
			set_ref_freq(SI5351_XTAL_FREQ, SI5351_PLL_INPUT_CLKIN); //Also CLKIN
 8003072:	2201      	movs	r2, #1
 8003074:	490b      	ldr	r1, [pc, #44]	@ (80030a4 <_ZN6Si53514initEhml+0xbc>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 feb8 	bl	8003dec <_ZN6Si535112set_ref_freqEm16si5351_pll_input>
		}

		// Set the frequency calibrations for the XO and CLKIN
		set_correction(corr, SI5351_PLL_INPUT_XO);
 800307c:	2200      	movs	r2, #0
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fe1d 	bl	8003cc0 <_ZN6Si535114set_correctionEl16si5351_pll_input>
		set_correction(corr, SI5351_PLL_INPUT_CLKIN);
 8003086:	2201      	movs	r2, #1
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fe18 	bl	8003cc0 <_ZN6Si535114set_correctionEl16si5351_pll_input>

		reset();
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f809 	bl	80030a8 <_ZN6Si53515resetEv>

		return true;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <_ZN6Si53514initEhml+0xb4>
	} else {
		return false;
 800309a:	2300      	movs	r3, #0
	}
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	017d7840 	.word	0x017d7840

080030a8 <_ZN6Si53515resetEv>:
 * reset(void)
 *
 * Call to reset the Si5351 to the state initialized by the library.
 *
 */
void Si5351::reset(void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	6078      	str	r0, [r7, #4]
	// Initialize the CLK outputs according to flowchart in datasheet
	// First, turn them off
	si5351_write(16, 0x80);
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	2110      	movs	r1, #16
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 ff13 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(17, 0x80);
 80030ba:	2280      	movs	r2, #128	@ 0x80
 80030bc:	2111      	movs	r1, #17
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 ff0e 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(18, 0x80);
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	2112      	movs	r1, #18
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 ff09 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(19, 0x80);
 80030ce:	2280      	movs	r2, #128	@ 0x80
 80030d0:	2113      	movs	r1, #19
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 ff04 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(20, 0x80);
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	2114      	movs	r1, #20
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 feff 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(21, 0x80);
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	2115      	movs	r1, #21
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fefa 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(22, 0x80);
 80030ec:	2280      	movs	r2, #128	@ 0x80
 80030ee:	2116      	movs	r1, #22
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fef5 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(23, 0x80);
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	2117      	movs	r1, #23
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fef0 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>

	// Turn the clocks back on...
	si5351_write(16, 0x0c);
 8003100:	220c      	movs	r2, #12
 8003102:	2110      	movs	r1, #16
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 feeb 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(17, 0x0c);
 800310a:	220c      	movs	r2, #12
 800310c:	2111      	movs	r1, #17
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fee6 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(18, 0x0c);
 8003114:	220c      	movs	r2, #12
 8003116:	2112      	movs	r1, #18
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fee1 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(19, 0x0c);
 800311e:	220c      	movs	r2, #12
 8003120:	2113      	movs	r1, #19
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fedc 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(20, 0x0c);
 8003128:	220c      	movs	r2, #12
 800312a:	2114      	movs	r1, #20
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fed7 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(21, 0x0c);
 8003132:	220c      	movs	r2, #12
 8003134:	2115      	movs	r1, #21
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fed2 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(22, 0x0c);
 800313c:	220c      	movs	r2, #12
 800313e:	2116      	movs	r1, #22
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fecd 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(23, 0x0c);
 8003146:	220c      	movs	r2, #12
 8003148:	2117      	movs	r1, #23
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fec8 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>

	// Set PLLA and PLLB to 800 MHz for automatic tuning
	set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
 8003150:	2300      	movs	r3, #0
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	a344      	add	r3, pc, #272	@ (adr r3, 8003268 <_ZN6Si53515resetEv+0x1c0>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fb3a 	bl	80037d4 <_ZN6Si53517set_pllEy10si5351_pll>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLB);
 8003160:	2301      	movs	r3, #1
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	a340      	add	r3, pc, #256	@ (adr r3, 8003268 <_ZN6Si53515resetEv+0x1c0>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fb32 	bl	80037d4 <_ZN6Si53517set_pllEy10si5351_pll>

	// Make PLL to CLK assignments for automatic tuning
	pll_assignment[0] = SI5351_PLLA;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	725a      	strb	r2, [r3, #9]
	pll_assignment[1] = SI5351_PLLA;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	729a      	strb	r2, [r3, #10]
	pll_assignment[2] = SI5351_PLLA;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	72da      	strb	r2, [r3, #11]
	pll_assignment[3] = SI5351_PLLA;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	731a      	strb	r2, [r3, #12]
	pll_assignment[4] = SI5351_PLLA;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	735a      	strb	r2, [r3, #13]
	pll_assignment[5] = SI5351_PLLA;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	739a      	strb	r2, [r3, #14]
	pll_assignment[6] = SI5351_PLLB;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	73da      	strb	r2, [r3, #15]
	pll_assignment[7] = SI5351_PLLB;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	741a      	strb	r2, [r3, #16]

	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2100      	movs	r1, #0
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fdc7 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>
	set_ms_source(SI5351_CLK1, SI5351_PLLA);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2101      	movs	r1, #1
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fdc2 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>
	set_ms_source(SI5351_CLK2, SI5351_PLLA);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2102      	movs	r1, #2
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fdbd 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>
	set_ms_source(SI5351_CLK3, SI5351_PLLA);
 80031be:	2200      	movs	r2, #0
 80031c0:	2103      	movs	r1, #3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fdb8 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>
	set_ms_source(SI5351_CLK4, SI5351_PLLA);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2104      	movs	r1, #4
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fdb3 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>
	set_ms_source(SI5351_CLK5, SI5351_PLLA);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2105      	movs	r1, #5
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fdae 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>
	set_ms_source(SI5351_CLK6, SI5351_PLLB);
 80031dc:	2201      	movs	r2, #1
 80031de:	2106      	movs	r1, #6
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fda9 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>
	set_ms_source(SI5351_CLK7, SI5351_PLLB);
 80031e6:	2201      	movs	r2, #1
 80031e8:	2107      	movs	r1, #7
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fda4 	bl	8003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>

	// Reset the VCXO param
	si5351_write(SI5351_VXCO_PARAMETERS_LOW, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	21a2      	movs	r1, #162	@ 0xa2
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fe73 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(SI5351_VXCO_PARAMETERS_MID, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	21a3      	movs	r1, #163	@ 0xa3
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fe6e 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	si5351_write(SI5351_VXCO_PARAMETERS_HIGH, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	21a4      	movs	r1, #164	@ 0xa4
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fe69 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>

	// Then reset the PLLs
	pll_reset(SI5351_PLLA);
 800320e:	2100      	movs	r1, #0
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fd76 	bl	8003d02 <_ZN6Si53519pll_resetE10si5351_pll>
	pll_reset(SI5351_PLLB);
 8003216:	2101      	movs	r1, #1
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fd72 	bl	8003d02 <_ZN6Si53519pll_resetE10si5351_pll>

	// Set initial frequencies
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	e019      	b.n	8003258 <_ZN6Si53515resetEv+0x1b0>
		clk_freq[i] = 0;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	3303      	adds	r3, #3
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	18d1      	adds	r1, r2, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9c1 2300 	strd	r2, r3, [r1]
		output_enable((enum si5351_clock) i, 0);
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2200      	movs	r2, #0
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fd0b 	bl	8003c5c <_ZN6Si535113output_enableE12si5351_clockh>
		clk_first_set[i] = false;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	for (i = 0; i < 8; i++) {
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	3301      	adds	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b07      	cmp	r3, #7
 800325c:	d9e2      	bls.n	8003224 <_ZN6Si53515resetEv+0x17c>
	}
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	a05f2000 	.word	0xa05f2000
 800326c:	00000012 	.word	0x00000012

08003270 <_ZN6Si53518set_freqEy12si5351_clock>:
 *
 * freq - Output frequency in Hz
 * clk - Clock output
 *   (use the si5351_clock enum)
 */
uint8_t Si5351::set_freq(uint64_t freq, enum si5351_clock clk) {
 8003270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003274:	b094      	sub	sp, #80	@ 0x50
 8003276:	af04      	add	r7, sp, #16
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	e9c7 2300 	strd	r2, r3, [r7]
	struct Si5351RegSet ms_reg;
	uint64_t pll_freq;
	uint8_t int_mode = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t div_by_4 = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t r_div = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	// Check which Multisynth is being set
	if ((uint8_t) clk <= (uint8_t) SI5351_CLK5) {
 8003290:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003294:	2b05      	cmp	r3, #5
 8003296:	f200 8173 	bhi.w	8003580 <_ZN6Si53518set_freqEy12si5351_clock+0x310>
		// MS0 through MS5 logic
		// ---------------------

		// Lower bounds check
		if (freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) {
 800329a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800329e:	4313      	orrs	r3, r2
 80032a0:	d00b      	beq.n	80032ba <_ZN6Si53518set_freqEy12si5351_clock+0x4a>
 80032a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032a6:	49b2      	ldr	r1, [pc, #712]	@ (8003570 <_ZN6Si53518set_freqEy12si5351_clock+0x300>)
 80032a8:	428a      	cmp	r2, r1
 80032aa:	f173 0300 	sbcs.w	r3, r3, #0
 80032ae:	d204      	bcs.n	80032ba <_ZN6Si53518set_freqEy12si5351_clock+0x4a>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 80032b0:	4aaf      	ldr	r2, [pc, #700]	@ (8003570 <_ZN6Si53518set_freqEy12si5351_clock+0x300>)
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9c7 2300 	strd	r2, r3, [r7]
		}

		// Upper bounds check
		if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT) {
 80032ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032be:	49ad      	ldr	r1, [pc, #692]	@ (8003574 <_ZN6Si53518set_freqEy12si5351_clock+0x304>)
 80032c0:	428a      	cmp	r2, r1
 80032c2:	f173 0305 	sbcs.w	r3, r3, #5
 80032c6:	d304      	bcc.n	80032d2 <_ZN6Si53518set_freqEy12si5351_clock+0x62>
			freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 80032c8:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003568 <_ZN6Si53518set_freqEy12si5351_clock+0x2f8>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	e9c7 2300 	strd	r2, r3, [r7]
		}

		// If requested freq >100 MHz and no other outputs are already >100 MHz,
		// we need to recalculate PLLA and then recalculate all other CLK outputs
		// on same PLL
		if (freq > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT)) {
 80032d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032d6:	49a8      	ldr	r1, [pc, #672]	@ (8003578 <_ZN6Si53518set_freqEy12si5351_clock+0x308>)
 80032d8:	428a      	cmp	r2, r1
 80032da:	f173 0302 	sbcs.w	r3, r3, #2
 80032de:	f0c0 80de 	bcc.w	800349e <_ZN6Si53518set_freqEy12si5351_clock+0x22e>
			// Check other clocks on same PLL
			uint8_t i;
			for (i = 0; i < 6; i++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80032e8:	e025      	b.n	8003336 <_ZN6Si53518set_freqEy12si5351_clock+0xc6>
				if (clk_freq[i]
 80032ea:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	3303      	adds	r3, #3
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	499f      	ldr	r1, [pc, #636]	@ (8003578 <_ZN6Si53518set_freqEy12si5351_clock+0x308>)
 80032fc:	428a      	cmp	r2, r1
 80032fe:	f173 0302 	sbcs.w	r3, r3, #2
 8003302:	d313      	bcc.n	800332c <_ZN6Si53518set_freqEy12si5351_clock+0xbc>
						> (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT)) {
					if (i != (uint8_t) clk
 8003304:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8003308:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800330c:	429a      	cmp	r2, r3
 800330e:	d00d      	beq.n	800332c <_ZN6Si53518set_freqEy12si5351_clock+0xbc>
							&& pll_assignment[i] == pll_assignment[clk]) {
 8003310:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	7a5a      	ldrb	r2, [r3, #9]
 800331a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	440b      	add	r3, r1
 8003322:	7a5b      	ldrb	r3, [r3, #9]
 8003324:	429a      	cmp	r2, r3
 8003326:	d101      	bne.n	800332c <_ZN6Si53518set_freqEy12si5351_clock+0xbc>
						return 1; // won't set if any other clks already >100 MHz
 8003328:	2301      	movs	r3, #1
 800332a:	e241      	b.n	80037b0 <_ZN6Si53518set_freqEy12si5351_clock+0x540>
			for (i = 0; i < 6; i++) {
 800332c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003330:	3301      	adds	r3, #1
 8003332:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8003336:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800333a:	2b05      	cmp	r3, #5
 800333c:	d9d5      	bls.n	80032ea <_ZN6Si53518set_freqEy12si5351_clock+0x7a>
					}
				}
			}

			// Enable the output on first set_freq only
			if (clk_first_set[(uint8_t) clk] == false) {
 800333e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4413      	add	r3, r2
 8003346:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <_ZN6Si53518set_freqEy12si5351_clock+0xfa>
				output_enable(clk, 1);
 800334e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003352:	2201      	movs	r2, #1
 8003354:	4619      	mov	r1, r3
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fc80 	bl	8003c5c <_ZN6Si535113output_enableE12si5351_clockh>
				clk_first_set[(uint8_t) clk] = true;
 800335c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			}

			// Set the freq in memory
			clk_freq[(uint8_t) clk] = freq;
 800336a:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 800336e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	3103      	adds	r1, #3
 8003376:	00c9      	lsls	r1, r1, #3
 8003378:	4401      	add	r1, r0
 800337a:	e9c1 2300 	strd	r2, r3, [r1]

			// Calculate the proper PLL frequency
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800337e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003382:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003386:	9102      	str	r1, [sp, #8]
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	e9cd 0100 	strd	r0, r1, [sp]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f001 f93f 	bl	8004618 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet>
 800339a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

			// Set PLL
			set_pll(pll_freq, pll_assignment[clk]);
 800339e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	7a5b      	ldrb	r3, [r3, #9]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa10 	bl	80037d4 <_ZN6Si53517set_pllEy10si5351_pll>

			// Recalculate params for other synths on same PLL
			for (i = 0; i < 6; i++) {
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80033ba:	e062      	b.n	8003482 <_ZN6Si53518set_freqEy12si5351_clock+0x212>
				if (clk_freq[i] != 0) {
 80033bc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	3303      	adds	r3, #3
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d053      	beq.n	8003478 <_ZN6Si53518set_freqEy12si5351_clock+0x208>
					if (pll_assignment[i] == pll_assignment[clk]) {
 80033d0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	7a5a      	ldrb	r2, [r3, #9]
 80033da:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	440b      	add	r3, r1
 80033e2:	7a5b      	ldrb	r3, [r3, #9]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d147      	bne.n	8003478 <_ZN6Si53518set_freqEy12si5351_clock+0x208>
						struct Si5351RegSet temp_reg;
						uint64_t temp_freq;

						// Select the proper R div value
						temp_freq = clk_freq[i];
 80033e8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	3303      	adds	r3, #3
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
						r_div = select_r_div(&temp_freq);
 80033fc:	f107 0310 	add.w	r3, r7, #16
 8003400:	4619      	mov	r1, r3
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f001 fbfc 	bl	8004c00 <_ZN6Si535112select_r_divEPy>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800340e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003412:	f107 0318 	add.w	r3, r7, #24
 8003416:	9302      	str	r3, [sp, #8]
 8003418:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800341c:	e9cd 2300 	strd	r2, r3, [sp]
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f001 f8f7 	bl	8004618 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet>

						// If freq > 150 MHz, we need to use DIVBY4 and integer mode
						if (temp_freq
								>= SI5351_MULTISYNTH_DIVBY4_FREQ
 800342a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
						if (temp_freq
 800342e:	4953      	ldr	r1, [pc, #332]	@ (800357c <_ZN6Si53518set_freqEy12si5351_clock+0x30c>)
 8003430:	428a      	cmp	r2, r1
 8003432:	f173 0303 	sbcs.w	r3, r3, #3
 8003436:	d306      	bcc.n	8003446 <_ZN6Si53518set_freqEy12si5351_clock+0x1d6>
										* SI5351_FREQ_MULT) {
							div_by_4 = 1;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							int_mode = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003444:	e005      	b.n	8003452 <_ZN6Si53518set_freqEy12si5351_clock+0x1e2>
						} else {
							div_by_4 = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							int_mode = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						}

						// Set multisynth registers
						set_ms((enum si5351_clock) i, temp_reg, int_mode, r_div,
 8003452:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003456:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800345a:	9303      	str	r3, [sp, #12]
 800345c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003460:	9302      	str	r3, [sp, #8]
 8003462:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f107 0318 	add.w	r3, r7, #24
 8003470:	cb0c      	ldmia	r3, {r2, r3}
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa9c 	bl	80039b0 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh>
			for (i = 0; i < 6; i++) {
 8003478:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800347c:	3301      	adds	r3, #1
 800347e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8003482:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003486:	2b05      	cmp	r3, #5
 8003488:	d998      	bls.n	80033bc <_ZN6Si53518set_freqEy12si5351_clock+0x14c>
					}
				}
			}

			// Reset the PLL
			pll_reset(pll_assignment[clk]);
 800348a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4413      	add	r3, r2
 8003492:	7a5b      	ldrb	r3, [r3, #9]
 8003494:	4619      	mov	r1, r3
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fc33 	bl	8003d02 <_ZN6Si53519pll_resetE10si5351_pll>
 800349c:	e060      	b.n	8003560 <_ZN6Si53518set_freqEy12si5351_clock+0x2f0>
		} else {
			clk_freq[(uint8_t) clk] = freq;
 800349e:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 80034a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	3103      	adds	r1, #3
 80034aa:	00c9      	lsls	r1, r1, #3
 80034ac:	4401      	add	r1, r0
 80034ae:	e9c1 2300 	strd	r2, r3, [r1]

			// Enable the output on first set_freq only
			if (clk_first_set[(uint8_t) clk] == false) {
 80034b2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <_ZN6Si53518set_freqEy12si5351_clock+0x26e>
				output_enable(clk, 1);
 80034c2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80034c6:	2201      	movs	r2, #1
 80034c8:	4619      	mov	r1, r3
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fbc6 	bl	8003c5c <_ZN6Si535113output_enableE12si5351_clockh>
				clk_first_set[(uint8_t) clk] = true;
 80034d0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			}

			// Select the proper R div value
			r_div = select_r_div(&freq);
 80034de:	463b      	mov	r3, r7
 80034e0:	4619      	mov	r1, r3
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f001 fb8c 	bl	8004c00 <_ZN6Si535112select_r_divEPy>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

			// Calculate the synth parameters
			if (pll_assignment[clk] == SI5351_PLLA) {
 80034ee:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	7a5b      	ldrb	r3, [r3, #9]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <_ZN6Si53518set_freqEy12si5351_clock+0x2ac>
				multisynth_calc(freq, plla_freq, &ms_reg);
 80034fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8003506:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800350a:	9402      	str	r4, [sp, #8]
 800350c:	e9cd 2300 	strd	r2, r3, [sp]
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f001 f87f 	bl	8004618 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet>
 800351a:	e00e      	b.n	800353a <_ZN6Si53518set_freqEy12si5351_clock+0x2ca>
			} else {
				multisynth_calc(freq, pllb_freq, &ms_reg);
 800351c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8003526:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800352a:	9402      	str	r4, [sp, #8]
 800352c:	e9cd 2300 	strd	r2, r3, [sp]
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f001 f86f 	bl	8004618 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet>
			}

			// Set multisynth registers
			set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 800353a:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 800353e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003542:	9303      	str	r3, [sp, #12]
 8003544:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003548:	9302      	str	r3, [sp, #8]
 800354a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003558:	cb0c      	ldmia	r3, {r2, r3}
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fa28 	bl	80039b0 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh>

			// Reset the PLL
			//pll_reset(pll_assignment[clk]);
		}

		return 0;
 8003560:	2300      	movs	r3, #0
 8003562:	e125      	b.n	80037b0 <_ZN6Si53518set_freqEy12si5351_clock+0x540>
 8003564:	f3af 8000 	nop.w
 8003568:	3d1ac100 	.word	0x3d1ac100
 800356c:	00000005 	.word	0x00000005
 8003570:	00061a80 	.word	0x00061a80
 8003574:	3d1ac101 	.word	0x3d1ac101
 8003578:	540be401 	.word	0x540be401
 800357c:	7e11d600 	.word	0x7e11d600
	} else {
		// MS6 and MS7 logic
		// -----------------

		// Lower bounds check
		if (freq > 0 && freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) {
 8003580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003584:	4313      	orrs	r3, r2
 8003586:	d00b      	beq.n	80035a0 <_ZN6Si53518set_freqEy12si5351_clock+0x330>
 8003588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800358c:	498e      	ldr	r1, [pc, #568]	@ (80037c8 <_ZN6Si53518set_freqEy12si5351_clock+0x558>)
 800358e:	428a      	cmp	r2, r1
 8003590:	f173 0300 	sbcs.w	r3, r3, #0
 8003594:	d204      	bcs.n	80035a0 <_ZN6Si53518set_freqEy12si5351_clock+0x330>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 8003596:	4a8d      	ldr	r2, [pc, #564]	@ (80037cc <_ZN6Si53518set_freqEy12si5351_clock+0x55c>)
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9c7 2300 	strd	r2, r3, [r7]
		}

		// Upper bounds check
		if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT) {
 80035a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035a4:	498a      	ldr	r1, [pc, #552]	@ (80037d0 <_ZN6Si53518set_freqEy12si5351_clock+0x560>)
 80035a6:	428a      	cmp	r2, r1
 80035a8:	f173 0303 	sbcs.w	r3, r3, #3
 80035ac:	d304      	bcc.n	80035b8 <_ZN6Si53518set_freqEy12si5351_clock+0x348>
			freq = SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT - 1;
 80035ae:	a384      	add	r3, pc, #528	@ (adr r3, 80037c0 <_ZN6Si53518set_freqEy12si5351_clock+0x550>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	e9c7 2300 	strd	r2, r3, [r7]
		}

		// If one of CLK6 or CLK7 is already set when trying to set the other,
		// we have to ensure that it will also have an integer division ratio
		// with the same PLL, otherwise do not set it.
		if (clk == SI5351_CLK6) {
 80035b8:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80035bc:	2b06      	cmp	r3, #6
 80035be:	d16d      	bne.n	800369c <_ZN6Si53518set_freqEy12si5351_clock+0x42c>
			if (clk_freq[7] != 0) {
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d03e      	beq.n	8003648 <_ZN6Si53518set_freqEy12si5351_clock+0x3d8>
				if (pllb_freq % freq == 0) {
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80035d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035d4:	f7fd fb90 	bl	8000cf8 <__aeabi_uldivmod>
 80035d8:	4313      	orrs	r3, r2
 80035da:	d133      	bne.n	8003644 <_ZN6Si53518set_freqEy12si5351_clock+0x3d4>
					if ((pllb_freq / freq) % 2 != 0) {
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80035e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035e6:	f7fd fb87 	bl	8000cf8 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	f002 0801 	and.w	r8, r2, #1
 80035f2:	f04f 0900 	mov.w	r9, #0
 80035f6:	ea58 0309 	orrs.w	r3, r8, r9
 80035fa:	d001      	beq.n	8003600 <_ZN6Si53518set_freqEy12si5351_clock+0x390>
						// Not an even divide ratio, no bueno
						return 1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0d7      	b.n	80037b0 <_ZN6Si53518set_freqEy12si5351_clock+0x540>
					} else {
						// Set the freq in memory
						clk_freq[(uint8_t) clk] = freq;
 8003600:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 8003604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	3103      	adds	r1, #3
 800360c:	00c9      	lsls	r1, r1, #3
 800360e:	4401      	add	r1, r0
 8003610:	e9c1 2300 	strd	r2, r3, [r1]

						// Select the proper R div value
						r_div = select_r_div_ms67(&freq);
 8003614:	463b      	mov	r3, r7
 8003616:	4619      	mov	r1, r3
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f001 fbf1 	bl	8004e00 <_ZN6Si535117select_r_div_ms67EPy>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						multisynth67_calc(freq, pllb_freq, &ms_reg);
 8003624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800362e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003632:	9402      	str	r4, [sp, #8]
 8003634:	e9cd 2300 	strd	r2, r3, [sp]
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f001 f947 	bl	80048d0 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet>
 8003642:	e09b      	b.n	800377c <_ZN6Si53518set_freqEy12si5351_clock+0x50c>
					}
				} else {
					// Not an integer divide ratio, no good
					return 1;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b3      	b.n	80037b0 <_ZN6Si53518set_freqEy12si5351_clock+0x540>
				}
			} else {
				// No previous assignment, so set PLLB based on CLK6

				// Set the freq in memory
				clk_freq[(uint8_t) clk] = freq;
 8003648:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 800364c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	3103      	adds	r1, #3
 8003654:	00c9      	lsls	r1, r1, #3
 8003656:	4401      	add	r1, r0
 8003658:	e9c1 2300 	strd	r2, r3, [r1]

				// Select the proper R div value
				r_div = select_r_div_ms67(&freq);
 800365c:	463b      	mov	r3, r7
 800365e:	4619      	mov	r1, r3
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f001 fbcd 	bl	8004e00 <_ZN6Si535117select_r_div_ms67EPy>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800366c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003670:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003674:	9102      	str	r1, [sp, #8]
 8003676:	f04f 0000 	mov.w	r0, #0
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	e9cd 0100 	strd	r0, r1, [sp]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f001 f924 	bl	80048d0 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet>
 8003688:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				//pllb_freq = pll_freq;
				set_pll(pll_freq, SI5351_PLLB);
 800368c:	2301      	movs	r3, #1
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f89d 	bl	80037d4 <_ZN6Si53517set_pllEy10si5351_pll>
 800369a:	e06f      	b.n	800377c <_ZN6Si53518set_freqEy12si5351_clock+0x50c>
			}
		} else {
			if (clk_freq[6] != 0) {
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d03d      	beq.n	8003722 <_ZN6Si53518set_freqEy12si5351_clock+0x4b2>
				if (pllb_freq % freq == 0) {
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80036ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036b0:	f7fd fb22 	bl	8000cf8 <__aeabi_uldivmod>
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d132      	bne.n	800371e <_ZN6Si53518set_freqEy12si5351_clock+0x4ae>
					if ((pllb_freq / freq) % 2 != 0) {
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80036be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036c2:	f7fd fb19 	bl	8000cf8 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	f002 0401 	and.w	r4, r2, #1
 80036ce:	2500      	movs	r5, #0
 80036d0:	ea54 0305 	orrs.w	r3, r4, r5
 80036d4:	d001      	beq.n	80036da <_ZN6Si53518set_freqEy12si5351_clock+0x46a>
						// Not an even divide ratio, no bueno
						return 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06a      	b.n	80037b0 <_ZN6Si53518set_freqEy12si5351_clock+0x540>
					} else {
						// Set the freq in memory
						clk_freq[(uint8_t) clk] = freq;
 80036da:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 80036de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	3103      	adds	r1, #3
 80036e6:	00c9      	lsls	r1, r1, #3
 80036e8:	4401      	add	r1, r0
 80036ea:	e9c1 2300 	strd	r2, r3, [r1]

						// Select the proper R div value
						r_div = select_r_div_ms67(&freq);
 80036ee:	463b      	mov	r3, r7
 80036f0:	4619      	mov	r1, r3
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f001 fb84 	bl	8004e00 <_ZN6Si535117select_r_div_ms67EPy>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						multisynth67_calc(freq, pllb_freq, &ms_reg);
 80036fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8003708:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800370c:	9402      	str	r4, [sp, #8]
 800370e:	e9cd 2300 	strd	r2, r3, [sp]
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f001 f8da 	bl	80048d0 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet>
 800371c:	e02e      	b.n	800377c <_ZN6Si53518set_freqEy12si5351_clock+0x50c>
					}
				} else {
					// Not an integer divide ratio, no good
					return 1;
 800371e:	2301      	movs	r3, #1
 8003720:	e046      	b.n	80037b0 <_ZN6Si53518set_freqEy12si5351_clock+0x540>
				}
			} else {
				// No previous assignment, so set PLLB based on CLK7

				// Set the freq in memory
				clk_freq[(uint8_t) clk] = freq;
 8003722:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 8003726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	3103      	adds	r1, #3
 800372e:	00c9      	lsls	r1, r1, #3
 8003730:	4401      	add	r1, r0
 8003732:	e9c1 2300 	strd	r2, r3, [r1]

				// Select the proper R div value
				r_div = select_r_div_ms67(&freq);
 8003736:	463b      	mov	r3, r7
 8003738:	4619      	mov	r1, r3
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f001 fb60 	bl	8004e00 <_ZN6Si535117select_r_div_ms67EPy>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 8003746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800374a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800374e:	9102      	str	r1, [sp, #8]
 8003750:	f04f 0000 	mov.w	r0, #0
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	e9cd 0100 	strd	r0, r1, [sp]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f001 f8b7 	bl	80048d0 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet>
 8003762:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				//pllb_freq = pll_freq;
				set_pll(pll_freq, pll_assignment[clk]);
 8003766:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	7a5b      	ldrb	r3, [r3, #9]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f82c 	bl	80037d4 <_ZN6Si53517set_pllEy10si5351_pll>
			}
		}

		div_by_4 = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		int_mode = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		// Set multisynth registers (MS must be set before PLL)
		set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 8003788:	f897 1058 	ldrb.w	r1, [r7, #88]	@ 0x58
 800378c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037a6:	cb0c      	ldmia	r3, {r2, r3}
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f901 	bl	80039b0 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh>

		return 0;
 80037ae:	2300      	movs	r3, #0
	}
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3740      	adds	r7, #64	@ 0x40
 80037b4:	46bd      	mov	sp, r7
 80037b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037ba:	bf00      	nop
 80037bc:	f3af 8000 	nop.w
 80037c0:	7e11d5ff 	.word	0x7e11d5ff
 80037c4:	00000003 	.word	0x00000003
 80037c8:	001c2898 	.word	0x001c2898
 80037cc:	00061a80 	.word	0x00061a80
 80037d0:	7e11d600 	.word	0x7e11d600

080037d4 <_ZN6Si53517set_pllEy10si5351_pll>:
 *
 * pll_freq - Desired PLL frequency in Hz * 100
 * target_pll - Which PLL to set
 *     (use the si5351_pll enum)
 */
void Si5351::set_pll(uint64_t pll_freq, enum si5351_pll target_pll) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08e      	sub	sp, #56	@ 0x38
 80037d8:	af04      	add	r7, sp, #16
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	e9c7 2300 	strd	r2, r3, [r7]
	struct Si5351RegSet pll_reg;

	if (target_pll == SI5351_PLLA) {
 80037e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d114      	bne.n	8003812 <_ZN6Si53517set_pllEy10si5351_pll+0x3e>
		pll_calc(SI5351_PLLA, pll_freq, &pll_reg, ref_correction[plla_ref_osc],
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	321e      	adds	r2, #30
 80037f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f8:	2200      	movs	r2, #0
 80037fa:	9202      	str	r2, [sp, #8]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003808:	2100      	movs	r1, #0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fbac 	bl	8003f68 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh>
 8003810:	e013      	b.n	800383a <_ZN6Si53517set_pllEy10si5351_pll+0x66>
				0);
	} else {
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc],
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8003818:	461a      	mov	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	321e      	adds	r2, #30
 800381e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003822:	2200      	movs	r2, #0
 8003824:	9202      	str	r2, [sp, #8]
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003832:	2101      	movs	r1, #1
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fb97 	bl	8003f68 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh>
	}

	// Derive the register values to write

	// Prepare an array for parameters to be written to
	uint8_t *params = new uint8_t[20];
 800383a:	2014      	movs	r0, #20
 800383c:	f00b f86a 	bl	800e914 <_Znaj>
 8003840:	4603      	mov	r3, r0
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t i = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t temp;

	// Registers 26-27
	temp = ((pll_reg.p3 >> 8) & 0xFF);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 8003852:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 800385c:	461a      	mov	r2, r3
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	4413      	add	r3, r2
 8003862:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003866:	701a      	strb	r2, [r3, #0]

	temp = (uint8_t) (pll_reg.p3 & 0xFF);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 800386e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 8003878:	461a      	mov	r2, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	4413      	add	r3, r2
 800387e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003882:	701a      	strb	r2, [r3, #0]

	// Register 28
	temp = (uint8_t) ((pll_reg.p1 >> 16) & 0x03);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	0c1b      	lsrs	r3, r3, #16
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 8003892:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 800389c:	461a      	mov	r2, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	4413      	add	r3, r2
 80038a2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80038a6:	701a      	strb	r2, [r3, #0]

	// Registers 29-30
	temp = (uint8_t) ((pll_reg.p1 >> 8) & 0xFF);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 80038b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 80038ba:	461a      	mov	r2, r3
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	4413      	add	r3, r2
 80038c0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80038c4:	701a      	strb	r2, [r3, #0]

	temp = (uint8_t) (pll_reg.p1 & 0xFF);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 80038cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 80038d6:	461a      	mov	r2, r3
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	4413      	add	r3, r2
 80038dc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80038e0:	701a      	strb	r2, [r3, #0]

	// Register 31
	temp = (uint8_t) ((pll_reg.p3 >> 12) & 0xF0);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	0b1b      	lsrs	r3, r3, #12
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f023 030f 	bic.w	r3, r3, #15
 80038ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	temp += (uint8_t) ((pll_reg.p2 >> 16) & 0x0F);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003900:	4413      	add	r3, r2
 8003902:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 8003906:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 8003910:	461a      	mov	r2, r3
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	4413      	add	r3, r2
 8003916:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800391a:	701a      	strb	r2, [r3, #0]

	// Registers 32-33
	temp = (uint8_t) ((pll_reg.p2 >> 8) & 0xFF);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 8003924:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 800392e:	461a      	mov	r2, r3
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	4413      	add	r3, r2
 8003934:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003938:	701a      	strb	r2, [r3, #0]

	temp = (uint8_t) (pll_reg.p2 & 0xFF);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	params[i++] = temp;
 8003940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	f887 2023 	strb.w	r2, [r7, #35]	@ 0x23
 800394a:	461a      	mov	r2, r3
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	4413      	add	r3, r2
 8003950:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003954:	701a      	strb	r2, [r3, #0]

	// Write the parameters
	if (target_pll == SI5351_PLLA) {
 8003956:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <_ZN6Si53517set_pllEy10si5351_pll+0x1a4>
		si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
 800395e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	211a      	movs	r1, #26
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fa96 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		plla_freq = pll_freq;
 800396c:	68f9      	ldr	r1, [r7, #12]
 800396e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003972:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8003976:	e00f      	b.n	8003998 <_ZN6Si53517set_pllEy10si5351_pll+0x1c4>
	} else if (target_pll == SI5351_PLLB) {
 8003978:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10b      	bne.n	8003998 <_ZN6Si53517set_pllEy10si5351_pll+0x1c4>
		si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
 8003980:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	2122      	movs	r1, #34	@ 0x22
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fa85 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		pllb_freq = pll_freq;
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003994:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	}

	delete params;
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <_ZN6Si53517set_pllEy10si5351_pll+0x1d2>
 800399e:	2101      	movs	r1, #1
 80039a0:	4618      	mov	r0, r3
 80039a2:	f00a ffb5 	bl	800e910 <_ZdlPvj>
}
 80039a6:	bf00      	nop
 80039a8:	3728      	adds	r7, #40	@ 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh>:
 * r_div - Desired r_div ratio
 * div_by_4 - Set Divide By 4 mode
 *   Set to 1 to enable, 0 to disable
 */
void Si5351::set_ms(enum si5351_clock clk, struct Si5351RegSet ms_reg,
		uint8_t int_mode, uint8_t r_div, uint8_t div_by_4) {
 80039b0:	b082      	sub	sp, #8
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	f107 0020 	add.w	r0, r7, #32
 80039be:	e880 000c 	stmia.w	r0, {r2, r3}
 80039c2:	460b      	mov	r3, r1
 80039c4:	70fb      	strb	r3, [r7, #3]
	uint8_t *params = new uint8_t[20];
 80039c6:	2014      	movs	r0, #20
 80039c8:	f00a ffa4 	bl	800e914 <_Znaj>
 80039cc:	4603      	mov	r3, r0
 80039ce:	613b      	str	r3, [r7, #16]
	uint8_t i = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
	uint8_t temp;
	uint8_t reg_val;

	if ((uint8_t) clk <= (uint8_t) SI5351_CLK5) {
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d876      	bhi.n	8003ac8 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x118>
		// Registers 42-43 for CLK0
		temp = (uint8_t) ((ms_reg.p3 >> 8) & 0xFF);
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	75fa      	strb	r2, [r7, #23]
 80039e6:	461a      	mov	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	7dba      	ldrb	r2, [r7, #22]
 80039ee:	701a      	strb	r2, [r3, #0]

		temp = (uint8_t) (ms_reg.p3 & 0xFF);
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	75fa      	strb	r2, [r7, #23]
 80039fa:	461a      	mov	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	7dba      	ldrb	r2, [r7, #22]
 8003a02:	701a      	strb	r2, [r3, #0]

		// Register 44 for CLK0
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	332c      	adds	r3, #44	@ 0x2c
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fa86 	bl	8003f22 <_ZN6Si535111si5351_readEh>
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
		reg_val &= ~(0x03);
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	f023 0303 	bic.w	r3, r3, #3
 8003a20:	73fb      	strb	r3, [r7, #15]
		temp = reg_val | ((uint8_t) ((ms_reg.p1 >> 16) & 0x03));
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	75fa      	strb	r2, [r7, #23]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	7dba      	ldrb	r2, [r7, #22]
 8003a42:	701a      	strb	r2, [r3, #0]

		// Registers 45-46 for CLK0
		temp = (uint8_t) ((ms_reg.p1 >> 8) & 0xFF);
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	75fa      	strb	r2, [r7, #23]
 8003a50:	461a      	mov	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	7dba      	ldrb	r2, [r7, #22]
 8003a58:	701a      	strb	r2, [r3, #0]

		temp = (uint8_t) (ms_reg.p1 & 0xFF);
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	75fa      	strb	r2, [r7, #23]
 8003a64:	461a      	mov	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	7dba      	ldrb	r2, [r7, #22]
 8003a6c:	701a      	strb	r2, [r3, #0]

		// Register 47 for CLK0
		temp = (uint8_t) ((ms_reg.p3 >> 12) & 0xF0);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	0b1b      	lsrs	r3, r3, #12
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f023 030f 	bic.w	r3, r3, #15
 8003a78:	75bb      	strb	r3, [r7, #22]
		temp += (uint8_t) ((ms_reg.p2 >> 16) & 0x0F);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	7dbb      	ldrb	r3, [r7, #22]
 8003a88:	4413      	add	r3, r2
 8003a8a:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	75fa      	strb	r2, [r7, #23]
 8003a92:	461a      	mov	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	7dba      	ldrb	r2, [r7, #22]
 8003a9a:	701a      	strb	r2, [r3, #0]

		// Registers 48-49 for CLK0
		temp = (uint8_t) ((ms_reg.p2 >> 8) & 0xFF);
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	75fa      	strb	r2, [r7, #23]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	7dba      	ldrb	r2, [r7, #22]
 8003ab0:	701a      	strb	r2, [r3, #0]

		temp = (uint8_t) (ms_reg.p2 & 0xFF);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	75bb      	strb	r3, [r7, #22]
		params[i++] = temp;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	75fa      	strb	r2, [r7, #23]
 8003abc:	461a      	mov	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	7dba      	ldrb	r2, [r7, #22]
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e001      	b.n	8003acc <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x11c>
	} else {
		// MS6 and MS7 only use one register
		temp = ms_reg.p1;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	75bb      	strb	r3, [r7, #22]
	}

	// Write the parameters
	switch (clk) {
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	2b07      	cmp	r3, #7
 8003ad0:	f200 80b6 	bhi.w	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
 8003ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x12c>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003afd 	.word	0x08003afd
 8003ae0:	08003b29 	.word	0x08003b29
 8003ae4:	08003b55 	.word	0x08003b55
 8003ae8:	08003b81 	.word	0x08003b81
 8003aec:	08003bad 	.word	0x08003bad
 8003af0:	08003bd9 	.word	0x08003bd9
 8003af4:	08003c05 	.word	0x08003c05
 8003af8:	08003c23 	.word	0x08003c23
	case SI5351_CLK0:
		si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
 8003afc:	7dfa      	ldrb	r2, [r7, #23]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	212a      	movs	r1, #42	@ 0x2a
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9c8 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		set_int(clk, int_mode);
 8003b08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f942 	bl	8003d9a <_ZN6Si53517set_intE12si5351_clockh>
		ms_div(clk, r_div, div_by_4);
 8003b16:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003b1a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003b1e:	78f9      	ldrb	r1, [r7, #3]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 ffe5 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003b26:	e08b      	b.n	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
	case SI5351_CLK1:
		si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
 8003b28:	7dfa      	ldrb	r2, [r7, #23]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2132      	movs	r1, #50	@ 0x32
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9b2 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		set_int(clk, int_mode);
 8003b34:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f92c 	bl	8003d9a <_ZN6Si53517set_intE12si5351_clockh>
		ms_div(clk, r_div, div_by_4);
 8003b42:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003b46:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003b4a:	78f9      	ldrb	r1, [r7, #3]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 ffcf 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003b52:	e075      	b.n	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
	case SI5351_CLK2:
		si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
 8003b54:	7dfa      	ldrb	r2, [r7, #23]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	213a      	movs	r1, #58	@ 0x3a
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f99c 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		set_int(clk, int_mode);
 8003b60:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f916 	bl	8003d9a <_ZN6Si53517set_intE12si5351_clockh>
		ms_div(clk, r_div, div_by_4);
 8003b6e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003b72:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003b76:	78f9      	ldrb	r1, [r7, #3]
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 ffb9 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003b7e:	e05f      	b.n	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
	case SI5351_CLK3:
		si5351_write_bulk(SI5351_CLK3_PARAMETERS, i, params);
 8003b80:	7dfa      	ldrb	r2, [r7, #23]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2142      	movs	r1, #66	@ 0x42
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f986 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		set_int(clk, int_mode);
 8003b8c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f900 	bl	8003d9a <_ZN6Si53517set_intE12si5351_clockh>
		ms_div(clk, r_div, div_by_4);
 8003b9a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003b9e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003ba2:	78f9      	ldrb	r1, [r7, #3]
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 ffa3 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003baa:	e049      	b.n	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
	case SI5351_CLK4:
		si5351_write_bulk(SI5351_CLK4_PARAMETERS, i, params);
 8003bac:	7dfa      	ldrb	r2, [r7, #23]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	214a      	movs	r1, #74	@ 0x4a
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f970 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		set_int(clk, int_mode);
 8003bb8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8ea 	bl	8003d9a <_ZN6Si53517set_intE12si5351_clockh>
		ms_div(clk, r_div, div_by_4);
 8003bc6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003bca:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003bce:	78f9      	ldrb	r1, [r7, #3]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 ff8d 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003bd6:	e033      	b.n	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
	case SI5351_CLK5:
		si5351_write_bulk(SI5351_CLK5_PARAMETERS, i, params);
 8003bd8:	7dfa      	ldrb	r2, [r7, #23]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2152      	movs	r1, #82	@ 0x52
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f95a 	bl	8003e98 <_ZN6Si535117si5351_write_bulkEhhPh>
		set_int(clk, int_mode);
 8003be4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f8d4 	bl	8003d9a <_ZN6Si53517set_intE12si5351_clockh>
		ms_div(clk, r_div, div_by_4);
 8003bf2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003bf6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003bfa:	78f9      	ldrb	r1, [r7, #3]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 ff77 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003c02:	e01d      	b.n	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
	case SI5351_CLK6:
		si5351_write(SI5351_CLK6_PARAMETERS, temp);
 8003c04:	7dbb      	ldrb	r3, [r7, #22]
 8003c06:	461a      	mov	r2, r3
 8003c08:	215a      	movs	r1, #90	@ 0x5a
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f968 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
		ms_div(clk, r_div, div_by_4);
 8003c10:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003c14:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003c18:	78f9      	ldrb	r1, [r7, #3]
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 ff68 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003c20:	e00e      	b.n	8003c40 <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x290>
	case SI5351_CLK7:
		si5351_write(SI5351_CLK7_PARAMETERS, temp);
 8003c22:	7dbb      	ldrb	r3, [r7, #22]
 8003c24:	461a      	mov	r2, r3
 8003c26:	215b      	movs	r1, #91	@ 0x5b
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f959 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
		ms_div(clk, r_div, div_by_4);
 8003c2e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003c32:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003c36:	78f9      	ldrb	r1, [r7, #3]
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 ff59 	bl	8004af0 <_ZN6Si53516ms_divE12si5351_clockhh>
		break;
 8003c3e:	bf00      	nop
	}

	delete params;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <_ZN6Si53516set_msE12si5351_clock12Si5351RegSethhh+0x29e>
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f00a fe61 	bl	800e910 <_ZdlPvj>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c58:	b002      	add	sp, #8
 8003c5a:	4770      	bx	lr

08003c5c <_ZN6Si535113output_enableE12si5351_clockh>:
 * Enable or disable a chosen output
 * clk - Clock output
 *   (use the si5351_clock enum)
 * enable - Set to 1 to enable, 0 to disable
 */
void Si5351::output_enable(enum si5351_clock clk, uint8_t enable) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val;

	reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 8003c6c:	2103      	movs	r1, #3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f957 	bl	8003f22 <_ZN6Si535111si5351_readEh>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]

	if (enable == 1) {
 8003c78:	78bb      	ldrb	r3, [r7, #2]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10c      	bne.n	8003c98 <_ZN6Si535113output_enableE12si5351_clockh+0x3c>
		reg_val &= ~(1 << (uint8_t) clk);
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	2201      	movs	r2, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	b25a      	sxtb	r2, r3
 8003c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	e009      	b.n	8003cac <_ZN6Si535113output_enableE12si5351_clockh+0x50>
	} else {
		reg_val |= (1 << (uint8_t) clk);
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	b25a      	sxtb	r2, r3
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	73fb      	strb	r3, [r7, #15]
	}

	si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2103      	movs	r1, #3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f914 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <_ZN6Si535114set_correctionEl16si5351_pll_input>:
 * correction factor is good across the entire tuning range of
 * the Si5351. Once this calibration is done accurately, it
 * should not have to be done again for the same Si5351 and
 * crystal.
 */
void Si5351::set_correction(int32_t corr, enum si5351_pll_input ref_osc) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	71fb      	strb	r3, [r7, #7]
	ref_correction[(uint8_t) ref_osc] = corr;
 8003cce:	79fa      	ldrb	r2, [r7, #7]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	321e      	adds	r2, #30
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// Recalculate and set PLL freqs based on correction value
	set_pll(plla_freq, SI5351_PLLA);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	9100      	str	r1, [sp, #0]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fd75 	bl	80037d4 <_ZN6Si53517set_pllEy10si5351_pll>
	set_pll(pllb_freq, SI5351_PLLB);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	9100      	str	r1, [sp, #0]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff fd6d 	bl	80037d4 <_ZN6Si53517set_pllEy10si5351_pll>
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZN6Si53519pll_resetE10si5351_pll>:
 * target_pll - Which PLL to reset
 *     (use the si5351_pll enum)
 *
 * Apply a reset to the indicated PLL.
 */
void Si5351::pll_reset(enum si5351_pll target_pll) {
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
	if (target_pll == SI5351_PLLA) {
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <_ZN6Si53519pll_resetE10si5351_pll+0x1e>
		si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
 8003d14:	2220      	movs	r2, #32
 8003d16:	21b1      	movs	r1, #177	@ 0xb1
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8e1 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	} else if (target_pll == SI5351_PLLB) {
		si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
	}
}
 8003d1e:	e007      	b.n	8003d30 <_ZN6Si53519pll_resetE10si5351_pll+0x2e>
	} else if (target_pll == SI5351_PLLB) {
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d104      	bne.n	8003d30 <_ZN6Si53519pll_resetE10si5351_pll+0x2e>
		si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 8003d26:	2280      	movs	r2, #128	@ 0x80
 8003d28:	21b1      	movs	r1, #177	@ 0xb1
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8d8 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll>:
 * pll - Which PLL to use as the source
 *     (use the si5351_pll enum)
 *
 * Set the desired PLL source for a multisynth.
 */
void Si5351::set_ms_source(enum si5351_clock clk, enum si5351_pll pll) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
 8003d44:	4613      	mov	r3, r2
 8003d46:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val;

	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t) clk);
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8e6 	bl	8003f22 <_ZN6Si535111si5351_readEh>
 8003d56:	4603      	mov	r3, r0
 8003d58:	73fb      	strb	r3, [r7, #15]

	if (pll == SI5351_PLLA) {
 8003d5a:	78bb      	ldrb	r3, [r7, #2]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll+0x32>
		reg_val &= ~(SI5351_CLK_PLL_SELECT);
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	f023 0320 	bic.w	r3, r3, #32
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	e006      	b.n	8003d78 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll+0x40>
	} else if (pll == SI5351_PLLB) {
 8003d6a:	78bb      	ldrb	r3, [r7, #2]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d103      	bne.n	8003d78 <_ZN6Si535113set_ms_sourceE12si5351_clock10si5351_pll+0x40>
		reg_val |= SI5351_CLK_PLL_SELECT;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f043 0320 	orr.w	r3, r3, #32
 8003d76:	73fb      	strb	r3, [r7, #15]
	}

	si5351_write(SI5351_CLK0_CTRL + (uint8_t) clk, reg_val);
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	3310      	adds	r3, #16
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f8ac 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>

	pll_assignment[(uint8_t) clk] = pll;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	78ba      	ldrb	r2, [r7, #2]
 8003d90:	725a      	strb	r2, [r3, #9]
}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_ZN6Si53517set_intE12si5351_clockh>:
 *   (use the si5351_clock enum)
 * enable - Set to 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
void Si5351::set_int(enum si5351_clock clk, uint8_t enable) {
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70fb      	strb	r3, [r7, #3]
 8003da6:	4613      	mov	r3, r2
 8003da8:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val;
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t) clk);
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	3310      	adds	r3, #16
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8b5 	bl	8003f22 <_ZN6Si535111si5351_readEh>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]

	if (enable == 1) {
 8003dbc:	78bb      	ldrb	r3, [r7, #2]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d104      	bne.n	8003dcc <_ZN6Si53517set_intE12si5351_clockh+0x32>
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	e003      	b.n	8003dd4 <_ZN6Si53517set_intE12si5351_clockh+0x3a>
	} else {
		reg_val &= ~(SI5351_CLK_INTEGER_MODE);
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd2:	73fb      	strb	r3, [r7, #15]
	}

	si5351_write(SI5351_CLK0_CTRL + (uint8_t) clk, reg_val);
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	3310      	adds	r3, #16
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f87e 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
	 break;
	 default:
	 break;
	 }
	 */
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZN6Si535112set_ref_freqEm16si5351_pll_input>:
 * ref_osc - Which reference oscillator frequency to set
 *    (use the si5351_pll_input enum)
 *
 * Set the reference frequency value for the desired reference oscillator
 */
void Si5351::set_ref_freq(uint32_t ref_freq, enum si5351_pll_input ref_osc) {
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	71fb      	strb	r3, [r7, #7]
	//reg_val = si5351_read(SI5351_PLL_INPUT_SOURCE);

	// Clear the bits first
	//reg_val &= ~(SI5351_CLKIN_DIV_MASK);

	if (ref_freq <= 30000000UL) {
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	@ (8003e8c <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0xa0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d80e      	bhi.n	8003e20 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x34>
		xtal_freq[(uint8_t) ref_osc] = ref_freq;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	331a      	adds	r3, #26
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	605a      	str	r2, [r3, #4]
		//reg_val |= SI5351_CLKIN_DIV_1;
		if (ref_osc == SI5351_PLL_INPUT_CLKIN) {
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d134      	bne.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
			clkin_div = SI5351_CLKIN_DIV_1;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	} else {
		//reg_val |= SI5351_CLKIN_DIV_1;
	}

	//si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
}
 8003e1e:	e02f      	b.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
	} else if (ref_freq > 30000000UL && ref_freq <= 60000000UL) {
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	@ (8003e8c <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0xa0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d913      	bls.n	8003e50 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x64>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a19      	ldr	r2, [pc, #100]	@ (8003e90 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0xa4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d80f      	bhi.n	8003e50 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x64>
		xtal_freq[(uint8_t) ref_osc] = ref_freq / 2;
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	0852      	lsrs	r2, r2, #1
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	331a      	adds	r3, #26
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	605a      	str	r2, [r3, #4]
		if (ref_osc == SI5351_PLL_INPUT_CLKIN) {
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d11c      	bne.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
			clkin_div = SI5351_CLKIN_DIV_2;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2240      	movs	r2, #64	@ 0x40
 8003e4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		if (ref_osc == SI5351_PLL_INPUT_CLKIN) {
 8003e4e:	e017      	b.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
	} else if (ref_freq > 60000000UL && ref_freq <= 100000000UL) {
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a0f      	ldr	r2, [pc, #60]	@ (8003e90 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0xa4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d913      	bls.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e94 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0xa8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d80f      	bhi.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
		xtal_freq[(uint8_t) ref_osc] = ref_freq / 4;
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	0892      	lsrs	r2, r2, #2
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	331a      	adds	r3, #26
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	605a      	str	r2, [r3, #4]
		if (ref_osc == SI5351_PLL_INPUT_CLKIN) {
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d104      	bne.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
			clkin_div = SI5351_CLKIN_DIV_4;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2280      	movs	r2, #128	@ 0x80
 8003e7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8003e7e:	e7ff      	b.n	8003e80 <_ZN6Si535112set_ref_freqEm16si5351_pll_input+0x94>
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	01c9c380 	.word	0x01c9c380
 8003e90:	03938700 	.word	0x03938700
 8003e94:	05f5e100 	.word	0x05f5e100

08003e98 <_ZN6Si535117si5351_write_bulkEhhPh>:

uint8_t Si5351::si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data) {
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b08b      	sub	sp, #44	@ 0x2c
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	72fb      	strb	r3, [r7, #11]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef reg_val;
	// Perform I2C write operation
	reg_val = HAL_I2C_Mem_Write(handler,              // I2C handle
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6f58      	ldr	r0, [r3, #116]	@ 0x74
			i2c_bus_addr,         // Device address (7-bit address shifted left)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
	reg_val = HAL_I2C_Mem_Write(handler,              // I2C handle
 8003eb4:	461c      	mov	r4, r3
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	7abb      	ldrb	r3, [r7, #10]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ec2:	9102      	str	r1, [sp, #8]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2301      	movs	r3, #1
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f003 f935 	bl	800713c <HAL_I2C_Mem_Write>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
			bytes,                // Number of bytes to write
			HAL_MAX_DELAY         // Timeout duration
			);

	// Return status as a uint8_t (success or failure)
	return (uint8_t) reg_val;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}

08003ee0 <_ZN6Si535112si5351_writeEhh>:

uint8_t Si5351::si5351_write(uint8_t addr, uint8_t data) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af04      	add	r7, sp, #16
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
 8003eec:	4613      	mov	r3, r2
 8003eee:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef reg_val;

	reg_val = HAL_I2C_Mem_Write(handler,              // I2C handle
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
			i2c_bus_addr,         // Device address (7-bit address shifted left)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
	reg_val = HAL_I2C_Mem_Write(handler,              // I2C handle
 8003efa:	4619      	mov	r1, r3
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	2301      	movs	r3, #1
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	1cbb      	adds	r3, r7, #2
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f003 f914 	bl	800713c <HAL_I2C_Mem_Write>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]
			1,                // Number of bytes to write
			HAL_MAX_DELAY         // Timeout duration
			);

	// Return status as a uint8_t (success or failure)
	return (uint8_t) reg_val;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <_ZN6Si535111si5351_readEh>:

uint8_t Si5351::si5351_read(uint8_t addr) {
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b088      	sub	sp, #32
 8003f26:	af04      	add	r7, sp, #16
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	70fb      	strb	r3, [r7, #3]
	uint8_t reg_val = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(handler, i2c_bus_addr, addr, I2C_MEMADD_SIZE_8BIT, &reg_val, 1, HAL_MAX_DELAY);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f46:	9302      	str	r3, [sp, #8]
 8003f48:	2301      	movs	r3, #1
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	f107 030f 	add.w	r3, r7, #15
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2301      	movs	r3, #1
 8003f54:	f003 f9ec 	bl	8007330 <HAL_I2C_Mem_Read>

	return reg_val;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	0000      	movs	r0, r0
 8003f64:	0000      	movs	r0, r0
	...

08003f68 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh>:
/*********************/
/* Private functions */
/*********************/

uint64_t Si5351::pll_calc(enum si5351_pll pll, uint64_t freq,
		struct Si5351RegSet *reg, int32_t correction, uint8_t vcxo) {
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b0de      	sub	sp, #376	@ 0x178
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
 8003f74:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
 8003f78:	460b      	mov	r3, r1
 8003f7a:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
	uint64_t ref_freq;
	if (pll == SI5351_PLLA) {
 8003f7e:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d144      	bne.n	8004010 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0xa8>
		ref_freq = xtal_freq[(uint8_t) plla_ref_osc] * SI5351_FREQ_MULT;
 8003f86:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003f8a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003f8e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8003f92:	331a      	adds	r3, #26
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003fa0:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003fa4:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003fa8:	4622      	mov	r2, r4
 8003faa:	462b      	mov	r3, r5
 8003fac:	1891      	adds	r1, r2, r2
 8003fae:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8003fb2:	415b      	adcs	r3, r3
 8003fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	eb12 0801 	adds.w	r8, r2, r1
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	eb43 0901 	adc.w	r9, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003fd4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003fd8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003fdc:	eb18 0102 	adds.w	r1, r8, r2
 8003fe0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003fe4:	eb49 0303 	adc.w	r3, r9, r3
 8003fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	189b      	adds	r3, r3, r2
 8003ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ffa:	462b      	mov	r3, r5
 8003ffc:	460a      	mov	r2, r1
 8003ffe:	eb42 0303 	adc.w	r3, r2, r3
 8004002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004006:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 800400a:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
 800400e:	e039      	b.n	8004084 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x11c>
	} else {
		ref_freq = xtal_freq[(uint8_t) pllb_ref_osc] * SI5351_FREQ_MULT;
 8004010:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004014:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8004018:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800401c:	331a      	adds	r3, #26
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	469a      	mov	sl, r3
 8004028:	4693      	mov	fp, r2
 800402a:	4652      	mov	r2, sl
 800402c:	465b      	mov	r3, fp
 800402e:	1891      	adds	r1, r2, r2
 8004030:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004034:	415b      	adcs	r3, r3
 8004036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800403a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800403e:	eb12 040a 	adds.w	r4, r2, sl
 8004042:	eb43 050b 	adc.w	r5, r3, fp
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	016b      	lsls	r3, r5, #5
 8004050:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004054:	0162      	lsls	r2, r4, #5
 8004056:	18a1      	adds	r1, r4, r2
 8004058:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800405c:	eb45 0303 	adc.w	r3, r5, r3
 8004060:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004064:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004068:	460b      	mov	r3, r1
 800406a:	eb13 030a 	adds.w	r3, r3, sl
 800406e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004072:	4613      	mov	r3, r2
 8004074:	eb43 030b 	adc.w	r3, r3, fp
 8004078:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800407c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004080:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170

	// Factor calibration value into nominal crystal frequency
	// Measured in parts-per-billion

	ref_freq = ref_freq
			+ (int32_t) ((((((int64_t) correction) << 31) / 1000000000LL)
 8004084:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004088:	17da      	asrs	r2, r3, #31
 800408a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800408e:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8004092:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004096:	460b      	mov	r3, r1
 8004098:	105b      	asrs	r3, r3, #1
 800409a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800409e:	460b      	mov	r3, r1
 80040a0:	07db      	lsls	r3, r3, #31
 80040a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80040a6:	a3c1      	add	r3, pc, #772	@ (adr r3, 80043ac <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x444>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80040b0:	f7fc fdd2 	bl	8000c58 <__aeabi_ldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
					* ref_freq) >> 31);
 80040b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80040bc:	fb03 f001 	mul.w	r0, r3, r1
 80040c0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80040c4:	fb02 f101 	mul.w	r1, r2, r1
 80040c8:	4408      	add	r0, r1
 80040ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80040ce:	fba1 2302 	umull	r2, r3, r1, r2
 80040d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80040d6:	4613      	mov	r3, r2
 80040d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80040dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80040e0:	18c3      	adds	r3, r0, r3
 80040e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 80040f2:	4621      	mov	r1, r4
 80040f4:	0fca      	lsrs	r2, r1, #31
 80040f6:	4629      	mov	r1, r5
 80040f8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80040fc:	4629      	mov	r1, r5
 80040fe:	0fcb      	lsrs	r3, r1, #31
			+ (int32_t) ((((((int64_t) correction) << 31) / 1000000000LL)
 8004100:	4613      	mov	r3, r2
 8004102:	17da      	asrs	r2, r3, #31
 8004104:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004108:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
	ref_freq = ref_freq
 800410c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004110:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004114:	4621      	mov	r1, r4
 8004116:	1851      	adds	r1, r2, r1
 8004118:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800411c:	4629      	mov	r1, r5
 800411e:	eb43 0101 	adc.w	r1, r3, r1
 8004122:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8004126:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800412a:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170

	// PLL bounds checking
	if (freq < SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT) {
 800412e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004132:	499b      	ldr	r1, [pc, #620]	@ (80043a0 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x438>)
 8004134:	428a      	cmp	r2, r1
 8004136:	f173 030d 	sbcs.w	r3, r3, #13
 800413a:	d204      	bcs.n	8004146 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x1de>
		freq = SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT;
 800413c:	a394      	add	r3, pc, #592	@ (adr r3, 8004390 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x428>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	}
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT) {
 8004146:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800414a:	4996      	ldr	r1, [pc, #600]	@ (80043a4 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x43c>)
 800414c:	428a      	cmp	r2, r1
 800414e:	f173 0314 	sbcs.w	r3, r3, #20
 8004152:	d304      	bcc.n	800415e <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x1f6>
		freq = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT;
 8004154:	a390      	add	r3, pc, #576	@ (adr r3, 8004398 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x430>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	}

	// Determine integer part of feedback equation
	a = freq / ref_freq;
 800415e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004162:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8004166:	f7fc fdc7 	bl	8000cf8 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4613      	mov	r3, r2
 8004170:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

	if (a < SI5351_PLL_A_MIN) {
 8004174:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004178:	2b0e      	cmp	r3, #14
 800417a:	d816      	bhi.n	80041aa <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x242>
		freq = ref_freq * SI5351_PLL_A_MIN;
 800417c:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 8004180:	4622      	mov	r2, r4
 8004182:	462b      	mov	r3, r5
 8004184:	f04f 0000 	mov.w	r0, #0
 8004188:	f04f 0100 	mov.w	r1, #0
 800418c:	0119      	lsls	r1, r3, #4
 800418e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8004192:	0110      	lsls	r0, r2, #4
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	1b11      	subs	r1, r2, r4
 800419a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800419c:	eb63 0305 	sbc.w	r3, r3, r5
 80041a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041a2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80041a6:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	}
	if (a > SI5351_PLL_A_MAX) {
 80041aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80041ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80041b0:	d92e      	bls.n	8004210 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x2a8>
		freq = ref_freq * SI5351_PLL_A_MAX;
 80041b2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	1894      	adds	r4, r2, r2
 80041bc:	673c      	str	r4, [r7, #112]	@ 0x70
 80041be:	415b      	adcs	r3, r3
 80041c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80041c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80041c6:	1814      	adds	r4, r2, r0
 80041c8:	66bc      	str	r4, [r7, #104]	@ 0x68
 80041ca:	414b      	adcs	r3, r1
 80041cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80041da:	4629      	mov	r1, r5
 80041dc:	010b      	lsls	r3, r1, #4
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80041e4:	4621      	mov	r1, r4
 80041e6:	010a      	lsls	r2, r1, #4
 80041e8:	4621      	mov	r1, r4
 80041ea:	1a51      	subs	r1, r2, r1
 80041ec:	6639      	str	r1, [r7, #96]	@ 0x60
 80041ee:	4629      	mov	r1, r5
 80041f0:	eb63 0301 	sbc.w	r3, r3, r1
 80041f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80041f6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80041fa:	460b      	mov	r3, r1
 80041fc:	18db      	adds	r3, r3, r3
 80041fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004200:	4613      	mov	r3, r2
 8004202:	eb42 0303 	adc.w	r3, r2, r3
 8004206:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004208:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800420c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	// lltmp = freq % ref_freq;
	// lltmp *= denom;
	// do_div(lltmp, ref_freq);

	//b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
	if (vcxo) {
 8004210:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05c      	beq.n	80042d2 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x36a>
		b = (((uint64_t) (freq % ref_freq)) * 1000000ULL) / ref_freq;
 8004218:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800421c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004220:	f7fc fd6a 	bl	8000cf8 <__aeabi_uldivmod>
 8004224:	4614      	mov	r4, r2
 8004226:	461d      	mov	r5, r3
 8004228:	4622      	mov	r2, r4
 800422a:	462b      	mov	r3, r5
 800422c:	f04f 0000 	mov.w	r0, #0
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	0159      	lsls	r1, r3, #5
 8004236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423a:	0150      	lsls	r0, r2, #5
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	1b11      	subs	r1, r2, r4
 8004242:	6539      	str	r1, [r7, #80]	@ 0x50
 8004244:	eb63 0305 	sbc.w	r3, r3, r5
 8004248:	657b      	str	r3, [r7, #84]	@ 0x54
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004256:	4649      	mov	r1, r9
 8004258:	024b      	lsls	r3, r1, #9
 800425a:	4641      	mov	r1, r8
 800425c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004260:	4641      	mov	r1, r8
 8004262:	024a      	lsls	r2, r1, #9
 8004264:	4611      	mov	r1, r2
 8004266:	461a      	mov	r2, r3
 8004268:	460b      	mov	r3, r1
 800426a:	191b      	adds	r3, r3, r4
 800426c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800426e:	4613      	mov	r3, r2
 8004270:	eb45 0303 	adc.w	r3, r5, r3
 8004274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8004282:	4649      	mov	r1, r9
 8004284:	018b      	lsls	r3, r1, #6
 8004286:	4641      	mov	r1, r8
 8004288:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428c:	4641      	mov	r1, r8
 800428e:	018a      	lsls	r2, r1, #6
 8004290:	4641      	mov	r1, r8
 8004292:	1a51      	subs	r1, r2, r1
 8004294:	6439      	str	r1, [r7, #64]	@ 0x40
 8004296:	4649      	mov	r1, r9
 8004298:	eb63 0301 	sbc.w	r3, r3, r1
 800429c:	647b      	str	r3, [r7, #68]	@ 0x44
 800429e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80042a2:	460b      	mov	r3, r1
 80042a4:	191b      	adds	r3, r3, r4
 80042a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042aa:	4613      	mov	r3, r2
 80042ac:	eb45 0303 	adc.w	r3, r5, r3
 80042b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042b4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80042b8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80042bc:	f7fc fd1c 	bl	8000cf8 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
		c = 1000000ULL;
 80042ca:	4b37      	ldr	r3, [pc, #220]	@ (80043a8 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x440>)
 80042cc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80042d0:	e073      	b.n	80043ba <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x452>
	} else {
		b = (((uint64_t) (freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
 80042d2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80042d6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80042da:	f7fc fd0d 	bl	8000cf8 <__aeabi_uldivmod>
 80042de:	4614      	mov	r4, r2
 80042e0:	461d      	mov	r5, r3
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	0159      	lsls	r1, r3, #5
 80042f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f4:	0150      	lsls	r0, r2, #5
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	1b11      	subs	r1, r2, r4
 80042fc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042fe:	eb63 0305 	sbc.w	r3, r3, r5
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004310:	4649      	mov	r1, r9
 8004312:	024b      	lsls	r3, r1, #9
 8004314:	4641      	mov	r1, r8
 8004316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800431a:	4641      	mov	r1, r8
 800431c:	024a      	lsls	r2, r1, #9
 800431e:	4611      	mov	r1, r2
 8004320:	461a      	mov	r2, r3
 8004322:	460b      	mov	r3, r1
 8004324:	191b      	adds	r3, r3, r4
 8004326:	633b      	str	r3, [r7, #48]	@ 0x30
 8004328:	4613      	mov	r3, r2
 800432a:	eb45 0303 	adc.w	r3, r5, r3
 800432e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 800433c:	4649      	mov	r1, r9
 800433e:	018b      	lsls	r3, r1, #6
 8004340:	4641      	mov	r1, r8
 8004342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004346:	4641      	mov	r1, r8
 8004348:	018a      	lsls	r2, r1, #6
 800434a:	4641      	mov	r1, r8
 800434c:	1a51      	subs	r1, r2, r1
 800434e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004350:	4649      	mov	r1, r9
 8004352:	eb63 0301 	sbc.w	r3, r3, r1
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004358:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800435c:	460b      	mov	r3, r1
 800435e:	191b      	adds	r3, r3, r4
 8004360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004364:	4613      	mov	r3, r2
 8004366:	eb45 0303 	adc.w	r3, r5, r3
 800436a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800436e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004372:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004376:	f7fc fcbf 	bl	8000cf8 <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4613      	mov	r3, r2
 8004380:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
		c = b ? RFRAC_DENOM : 1;
 8004384:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d013      	beq.n	80043b4 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x44c>
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x440>)
 800438e:	e012      	b.n	80043b6 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x44e>
 8004390:	f8475800 	.word	0xf8475800
 8004394:	0000000d 	.word	0x0000000d
 8004398:	f46b0400 	.word	0xf46b0400
 800439c:	00000014 	.word	0x00000014
 80043a0:	f8475800 	.word	0xf8475800
 80043a4:	f46b0401 	.word	0xf46b0401
 80043a8:	000f4240 	.word	0x000f4240
 80043ac:	3b9aca00 	.word	0x3b9aca00
 80043b0:	00000000 	.word	0x00000000
 80043b4:	2301      	movs	r3, #1
 80043b6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
	}

	// Calculate parameters
	p1 = 128 * a + ((128 * b) / c) - 512;
 80043ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80043be:	01d9      	lsls	r1, r3, #7
 80043c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043c4:	01da      	lsls	r2, r3, #7
 80043c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	440b      	add	r3, r1
 80043d0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80043d4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
	p2 = 128 * b - c * ((128 * b) / c);
 80043d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043dc:	01d9      	lsls	r1, r3, #7
 80043de:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80043e2:	fbb1 f2f3 	udiv	r2, r1, r3
 80043e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	1acb      	subs	r3, r1, r3
 80043f0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	p3 = c;
 80043f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80043f8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

	// Recalculate frequency as fIN * (a + b/c)
	lltmp = ref_freq;
 80043fc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004400:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	lltmp *= b;
 8004404:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004408:	2200      	movs	r2, #0
 800440a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800440e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004412:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004416:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800441a:	4622      	mov	r2, r4
 800441c:	fb02 f203 	mul.w	r2, r2, r3
 8004420:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004424:	4629      	mov	r1, r5
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	441a      	add	r2, r3
 800442c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004430:	4621      	mov	r1, r4
 8004432:	fba3 1301 	umull	r1, r3, r3, r1
 8004436:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800443a:	460b      	mov	r3, r1
 800443c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800444a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 800444e:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 8004452:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
	do_div(lltmp, c);
 8004456:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800445a:	2200      	movs	r2, #0
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004460:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004464:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8004468:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800446c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8004470:	f7fc fc42 	bl	8000cf8 <__aeabi_uldivmod>
 8004474:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8004478:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800447c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8004480:	f7fc fc3a 	bl	8000cf8 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	freq = lltmp;
 800448c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8004490:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	freq += ref_freq * a;
 8004494:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80044a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80044aa:	462a      	mov	r2, r5
 80044ac:	fb02 f203 	mul.w	r2, r2, r3
 80044b0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80044b4:	4621      	mov	r1, r4
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	441a      	add	r2, r3
 80044bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80044c0:	4621      	mov	r1, r4
 80044c2:	fba3 1301 	umull	r1, r3, r3, r1
 80044c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80044ca:	460b      	mov	r3, r1
 80044cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80044d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80044d4:	18d3      	adds	r3, r2, r3
 80044d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80044da:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80044de:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 80044e2:	4621      	mov	r1, r4
 80044e4:	1851      	adds	r1, r2, r1
 80044e6:	61b9      	str	r1, [r7, #24]
 80044e8:	4629      	mov	r1, r5
 80044ea:	eb43 0101 	adc.w	r1, r3, r1
 80044ee:	61f9      	str	r1, [r7, #28]
 80044f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80044f4:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130

	reg->p1 = p1;
 80044f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80044fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004500:	6013      	str	r3, [r2, #0]
	reg->p2 = p2;
 8004502:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004506:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800450a:	6053      	str	r3, [r2, #4]
	reg->p3 = p3;
 800450c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004510:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004514:	6093      	str	r3, [r2, #8]

	if (vcxo) {
 8004516:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06c      	beq.n	80045f8 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x690>
		return (uint64_t) (128 * a * 1000000ULL + b);
 800451e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004522:	01db      	lsls	r3, r3, #7
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800452a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800452e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004532:	4622      	mov	r2, r4
 8004534:	462b      	mov	r3, r5
 8004536:	f04f 0000 	mov.w	r0, #0
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	0159      	lsls	r1, r3, #5
 8004540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004544:	0150      	lsls	r0, r2, #5
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4621      	mov	r1, r4
 800454c:	1a51      	subs	r1, r2, r1
 800454e:	6139      	str	r1, [r7, #16]
 8004550:	4629      	mov	r1, r5
 8004552:	eb63 0301 	sbc.w	r3, r3, r1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004564:	4649      	mov	r1, r9
 8004566:	024b      	lsls	r3, r1, #9
 8004568:	4641      	mov	r1, r8
 800456a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800456e:	4641      	mov	r1, r8
 8004570:	024a      	lsls	r2, r1, #9
 8004572:	4610      	mov	r0, r2
 8004574:	4619      	mov	r1, r3
 8004576:	4603      	mov	r3, r0
 8004578:	4622      	mov	r2, r4
 800457a:	189b      	adds	r3, r3, r2
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	460b      	mov	r3, r1
 8004580:	462a      	mov	r2, r5
 8004582:	eb42 0303 	adc.w	r3, r2, r3
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004594:	4649      	mov	r1, r9
 8004596:	018b      	lsls	r3, r1, #6
 8004598:	4641      	mov	r1, r8
 800459a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800459e:	4641      	mov	r1, r8
 80045a0:	018a      	lsls	r2, r1, #6
 80045a2:	4641      	mov	r1, r8
 80045a4:	1a51      	subs	r1, r2, r1
 80045a6:	6039      	str	r1, [r7, #0]
 80045a8:	4649      	mov	r1, r9
 80045aa:	eb63 0301 	sbc.w	r3, r3, r1
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045b4:	4603      	mov	r3, r0
 80045b6:	4622      	mov	r2, r4
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045be:	462b      	mov	r3, r5
 80045c0:	460a      	mov	r2, r1
 80045c2:	eb42 0303 	adc.w	r3, r2, r3
 80045c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045d8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80045dc:	4623      	mov	r3, r4
 80045de:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80045e2:	4602      	mov	r2, r0
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80045ea:	460b      	mov	r3, r1
 80045ec:	462a      	mov	r2, r5
 80045ee:	eb42 0303 	adc.w	r3, r2, r3
 80045f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80045f6:	e003      	b.n	8004600 <_ZN6Si53518pll_calcE10si5351_pllyP12Si5351RegSetlh+0x698>
	} else {
		return freq;
 80045f8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80045fc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	}
}
 8004600:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004612:	bf00      	nop
 8004614:	0000      	movs	r0, r0
	...

08004618 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet>:

uint64_t Si5351::multisynth_calc(uint64_t freq, uint64_t pll_freq,
		struct Si5351RegSet *reg) {
 8004618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800461c:	b098      	sub	sp, #96	@ 0x60
 800461e:	af00      	add	r7, sp, #0
 8004620:	6278      	str	r0, [r7, #36]	@ 0x24
 8004622:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t lltmp;
	uint32_t a, b, c, p1, p2, p3;
	uint8_t divby4 = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t ret_val = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	// Multisynth bounds checking
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT) {
 8004632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004636:	49a2      	ldr	r1, [pc, #648]	@ (80048c0 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x2a8>)
 8004638:	428a      	cmp	r2, r1
 800463a:	f173 0305 	sbcs.w	r3, r3, #5
 800463e:	d304      	bcc.n	800464a <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x32>
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 8004640:	a399      	add	r3, pc, #612	@ (adr r3, 80048a8 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x290>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	if (freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT) {
 800464a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464e:	499d      	ldr	r1, [pc, #628]	@ (80048c4 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x2ac>)
 8004650:	428a      	cmp	r2, r1
 8004652:	f173 0300 	sbcs.w	r3, r3, #0
 8004656:	d204      	bcs.n	8004662 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x4a>
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 8004658:	a395      	add	r3, pc, #596	@ (adr r3, 80048b0 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x298>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT) {
 8004662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004666:	4998      	ldr	r1, [pc, #608]	@ (80048c8 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x2b0>)
 8004668:	428a      	cmp	r2, r1
 800466a:	f173 0303 	sbcs.w	r3, r3, #3
 800466e:	d302      	bcc.n	8004676 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x5e>
		divby4 = 1;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if (pll_freq == 0) {
 8004676:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800467a:	4313      	orrs	r3, r2
 800467c:	d158      	bne.n	8004730 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x118>
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		if (divby4 == 0) {
 800467e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004682:	2b00      	cmp	r3, #0
 8004684:	d134      	bne.n	80046f0 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0xd8>
			lltmp = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT; // margin needed?
 8004686:	a38c      	add	r3, pc, #560	@ (adr r3, 80048b8 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x2a0>)
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			do_div(lltmp, freq);
 8004690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004694:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8004698:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800469c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80046a0:	f7fc fb2a 	bl	8000cf8 <__aeabi_uldivmod>
 80046a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80046a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80046ac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80046b0:	f7fc fb22 	bl	8000cf8 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			if (lltmp == 5) {
 80046bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046c0:	1f51      	subs	r1, r2, #5
 80046c2:	430b      	orrs	r3, r1
 80046c4:	d106      	bne.n	80046d4 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0xbc>
				lltmp = 4;
 80046c6:	f04f 0204 	mov.w	r2, #4
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80046d2:	e00a      	b.n	80046ea <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0xd2>
			} else if (lltmp == 7) {
 80046d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046d8:	1fd1      	subs	r1, r2, #7
 80046da:	430b      	orrs	r3, r1
 80046dc:	d105      	bne.n	80046ea <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0xd2>
				lltmp = 6;
 80046de:	f04f 0206 	mov.w	r2, #6
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			}
			a = (uint32_t) lltmp;
 80046ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ee:	e001      	b.n	80046f4 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0xdc>
		} else {
			a = 4;
 80046f0:	2304      	movs	r3, #4
 80046f2:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		b = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	653b      	str	r3, [r7, #80]	@ 0x50
		c = 1;
 80046f8:	2301      	movs	r3, #1
 80046fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		pll_freq = a * freq;
 80046fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fe:	2200      	movs	r2, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	617a      	str	r2, [r7, #20]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800470a:	4642      	mov	r2, r8
 800470c:	fb02 f203 	mul.w	r2, r2, r3
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	4649      	mov	r1, r9
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4641      	mov	r1, r8
 800471e:	fba2 4501 	umull	r4, r5, r2, r1
 8004722:	442b      	add	r3, r5
 8004724:	461d      	mov	r5, r3
 8004726:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
 800472a:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
 800472e:	e07d      	b.n	800482c <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x214>
	} else {
		// Preset PLL, so return the actual freq for these params instead of PLL freq
		ret_val = 1;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		// Determine integer part of feedback equation
		a = pll_freq / freq;
 8004736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800473e:	f7fc fadb 	bl	8000cf8 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4613      	mov	r3, r2
 8004748:	657b      	str	r3, [r7, #84]	@ 0x54

		if (a < SI5351_MULTISYNTH_A_MIN) {
 800474a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474c:	2b05      	cmp	r3, #5
 800474e:	d80b      	bhi.n	8004768 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x150>
			freq = pll_freq / SI5351_MULTISYNTH_A_MIN;
 8004750:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004754:	f04f 0206 	mov.w	r2, #6
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	f7fc facc 	bl	8000cf8 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}
		if (a > SI5351_MULTISYNTH_A_MAX) {
 8004768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800476a:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800476e:	d90b      	bls.n	8004788 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x170>
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 8004770:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004774:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	f7fc fabc 	bl	8000cf8 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}

		b = (pll_freq % freq * RFRAC_DENOM) / freq;
 8004788:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800478c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004790:	f7fc fab2 	bl	8000cf8 <__aeabi_uldivmod>
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	f04f 0400 	mov.w	r4, #0
 80047a0:	f04f 0500 	mov.w	r5, #0
 80047a4:	015d      	lsls	r5, r3, #5
 80047a6:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80047aa:	0154      	lsls	r4, r2, #5
 80047ac:	4622      	mov	r2, r4
 80047ae:	462b      	mov	r3, r5
 80047b0:	ebb2 0800 	subs.w	r8, r2, r0
 80047b4:	eb63 0901 	sbc.w	r9, r3, r1
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80047c4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80047c8:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80047cc:	4690      	mov	r8, r2
 80047ce:	4699      	mov	r9, r3
 80047d0:	eb18 0a00 	adds.w	sl, r8, r0
 80047d4:	eb49 0b01 	adc.w	fp, r9, r1
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047ec:	ebb2 040a 	subs.w	r4, r2, sl
 80047f0:	603c      	str	r4, [r7, #0]
 80047f2:	eb63 030b 	sbc.w	r3, r3, fp
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047fc:	4623      	mov	r3, r4
 80047fe:	181b      	adds	r3, r3, r0
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	462b      	mov	r3, r5
 8004804:	eb41 0303 	adc.w	r3, r1, r3
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800480e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004812:	f7fc fa71 	bl	8000cf8 <__aeabi_uldivmod>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4613      	mov	r3, r2
 800481c:	653b      	str	r3, [r7, #80]	@ 0x50
		c = b ? RFRAC_DENOM : 1;
 800481e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x210>
 8004824:	4b29      	ldr	r3, [pc, #164]	@ (80048cc <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x2b4>)
 8004826:	e000      	b.n	800482a <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x212>
 8004828:	2301      	movs	r3, #1
 800482a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

	// Calculate parameters
	if (divby4 == 1) {
 800482c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x22a>
		p3 = 1;
 8004834:	2301      	movs	r3, #1
 8004836:	643b      	str	r3, [r7, #64]	@ 0x40
		p2 = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	647b      	str	r3, [r7, #68]	@ 0x44
		p1 = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004840:	e016      	b.n	8004870 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x258>
	} else {
		p1 = 128 * a + ((128 * b) / c) - 512;
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	01da      	lsls	r2, r3, #7
 8004846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004848:	01d9      	lsls	r1, r3, #7
 800484a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800484c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48
		p2 = 128 * b - c * ((128 * b) / c);
 8004858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485a:	01db      	lsls	r3, r3, #7
 800485c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800485e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004862:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004864:	fb01 f202 	mul.w	r2, r1, r2
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	647b      	str	r3, [r7, #68]	@ 0x44
		p3 = c;
 800486c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800486e:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	reg->p1 = p1;
 8004870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004876:	601a      	str	r2, [r3, #0]
	reg->p2 = p2;
 8004878:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800487c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800487e:	605a      	str	r2, [r3, #4]
	reg->p3 = p3;
 8004880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004886:	609a      	str	r2, [r3, #8]

	if (ret_val == 0) {
 8004888:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x27e>
		return pll_freq;
 8004890:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004894:	e001      	b.n	800489a <_ZN6Si535115multisynth_calcEyyP12Si5351RegSet+0x282>
	} else {
		return freq;
 8004896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
	}
}
 800489a:	4610      	mov	r0, r2
 800489c:	4619      	mov	r1, r3
 800489e:	3760      	adds	r7, #96	@ 0x60
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	3d1ac100 	.word	0x3d1ac100
 80048ac:	00000005 	.word	0x00000005
 80048b0:	02faf080 	.word	0x02faf080
 80048b4:	00000000 	.word	0x00000000
 80048b8:	f46b0400 	.word	0xf46b0400
 80048bc:	00000014 	.word	0x00000014
 80048c0:	3d1ac101 	.word	0x3d1ac101
 80048c4:	02faf080 	.word	0x02faf080
 80048c8:	7e11d600 	.word	0x7e11d600
 80048cc:	000f4240 	.word	0x000f4240

080048d0 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet>:

uint64_t Si5351::multisynth67_calc(uint64_t freq, uint64_t pll_freq,
		struct Si5351RegSet *reg) {
 80048d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d4:	b092      	sub	sp, #72	@ 0x48
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80048da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// uint8_t ret_val = 0;
	uint32_t a;
	uint64_t lltmp;

	// Multisynth bounds checking
	if (freq > SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT) {
 80048de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e2:	497f      	ldr	r1, [pc, #508]	@ (8004ae0 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x210>)
 80048e4:	428a      	cmp	r2, r1
 80048e6:	f173 0303 	sbcs.w	r3, r3, #3
 80048ea:	d304      	bcc.n	80048f6 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x26>
		freq = SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT;
 80048ec:	a376      	add	r3, pc, #472	@ (adr r3, 8004ac8 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x1f8>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	if (freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT) {
 80048f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fa:	497a      	ldr	r1, [pc, #488]	@ (8004ae4 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x214>)
 80048fc:	428a      	cmp	r2, r1
 80048fe:	f173 0300 	sbcs.w	r3, r3, #0
 8004902:	d204      	bcs.n	800490e <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x3e>
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 8004904:	a372      	add	r3, pc, #456	@ (adr r3, 8004ad0 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x200>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	if (pll_freq == 0) {
 800490e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004912:	4313      	orrs	r3, r2
 8004914:	f040 809e 	bne.w	8004a54 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x184>
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		lltmp = (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT) - 100000000UL; // margin needed?
 8004918:	a36f      	add	r3, pc, #444	@ (adr r3, 8004ad8 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x208>)
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		do_div(lltmp, freq);
 8004922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004926:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800492a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800492e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004932:	f7fc f9e1 	bl	8000cf8 <__aeabi_uldivmod>
 8004936:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800493a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800493e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004942:	f7fc f9d9 	bl	8000cf8 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		a = (uint32_t) lltmp;
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44

		// Divisor has to be even
		if (a % 2 != 0) {
 8004952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x92>
			a++;
 800495c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800495e:	3301      	adds	r3, #1
 8004960:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		// Divisor bounds check
		if (a < SI5351_MULTISYNTH_A_MIN) {
 8004962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004964:	2b05      	cmp	r3, #5
 8004966:	d801      	bhi.n	800496c <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x9c>
			a = SI5351_MULTISYNTH_A_MIN;
 8004968:	2306      	movs	r3, #6
 800496a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (a > SI5351_MULTISYNTH67_A_MAX) {
 800496c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004970:	d901      	bls.n	8004976 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0xa6>
			a = SI5351_MULTISYNTH67_A_MAX;
 8004972:	23fe      	movs	r3, #254	@ 0xfe
 8004974:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		pll_freq = a * freq;
 8004976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004978:	2200      	movs	r2, #0
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	617a      	str	r2, [r7, #20]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004984:	4602      	mov	r2, r0
 8004986:	fb02 f203 	mul.w	r2, r2, r3
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	6939      	ldr	r1, [r7, #16]
 800499a:	fba2 ab01 	umull	sl, fp, r2, r1
 800499e:	445b      	add	r3, fp
 80049a0:	469b      	mov	fp, r3
 80049a2:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
 80049a6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68

		// PLL bounds checking
		if (pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)) {
 80049aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80049ae:	494e      	ldr	r1, [pc, #312]	@ (8004ae8 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x218>)
 80049b0:	428a      	cmp	r2, r1
 80049b2:	f173 0314 	sbcs.w	r3, r3, #20
 80049b6:	d31c      	bcc.n	80049f2 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x122>
			a -= 2;
 80049b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ba:	3b02      	subs	r3, #2
 80049bc:	647b      	str	r3, [r7, #68]	@ 0x44
			pll_freq = a * freq;
 80049be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049c0:	2200      	movs	r2, #0
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	60fa      	str	r2, [r7, #12]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049cc:	4622      	mov	r2, r4
 80049ce:	fb02 f203 	mul.w	r2, r2, r3
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4629      	mov	r1, r5
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4621      	mov	r1, r4
 80049e0:	fba2 8901 	umull	r8, r9, r2, r1
 80049e4:	444b      	add	r3, r9
 80049e6:	4699      	mov	r9, r3
 80049e8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 80049ec:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 80049f0:	e022      	b.n	8004a38 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x168>
		} else if (pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT)) {
 80049f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80049f6:	493d      	ldr	r1, [pc, #244]	@ (8004aec <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x21c>)
 80049f8:	428a      	cmp	r2, r1
 80049fa:	f173 030d 	sbcs.w	r3, r3, #13
 80049fe:	d21b      	bcs.n	8004a38 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x168>
			a += 2;
 8004a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a02:	3302      	adds	r3, #2
 8004a04:	647b      	str	r3, [r7, #68]	@ 0x44
			pll_freq = a * freq;
 8004a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a08:	2200      	movs	r2, #0
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004a14:	4642      	mov	r2, r8
 8004a16:	fb02 f203 	mul.w	r2, r2, r3
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4641      	mov	r1, r8
 8004a28:	fba2 4501 	umull	r4, r5, r2, r1
 8004a2c:	442b      	add	r3, r5
 8004a2e:	461d      	mov	r5, r3
 8004a30:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8004a34:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
		}

		reg->p1 = (uint8_t) a;
 8004a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a40:	601a      	str	r2, [r3, #0]
		reg->p2 = 0;
 8004a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a44:	2200      	movs	r2, #0
 8004a46:	605a      	str	r2, [r3, #4]
		reg->p3 = 0;
 8004a48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
		return pll_freq;
 8004a4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004a52:	e030      	b.n	8004ab6 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x1e6>
	} else {
		// Multisynth frequency must be integer division of PLL
		if (pll_freq % freq) {
 8004a54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a5c:	f7fc f94c 	bl	8000cf8 <__aeabi_uldivmod>
 8004a60:	4313      	orrs	r3, r2
 8004a62:	d004      	beq.n	8004a6e <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x19e>
			// No good
			return 0;
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e023      	b.n	8004ab6 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x1e6>
		} else {
			a = pll_freq / freq;
 8004a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a76:	f7fc f93f 	bl	8000cf8 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4613      	mov	r3, r2
 8004a80:	647b      	str	r3, [r7, #68]	@ 0x44

			// Division ratio bounds check
			if (a < SI5351_MULTISYNTH_A_MIN || a > SI5351_MULTISYNTH67_A_MAX) {
 8004a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d902      	bls.n	8004a8e <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x1be>
 8004a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004a8c:	d904      	bls.n	8004a98 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x1c8>
				// No bueno
				return 0;
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e00e      	b.n	8004ab6 <_ZN6Si535117multisynth67_calcEyyP12Si5351RegSet+0x1e6>
			} else {
				reg->p1 = (uint8_t) a;
 8004a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aa0:	601a      	str	r2, [r3, #0]
				reg->p2 = 0;
 8004aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]
				reg->p3 = 0;
 8004aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
				return 1;
 8004aae:	f04f 0201 	mov.w	r2, #1
 8004ab2:	f04f 0300 	mov.w	r3, #0
			}
		}
	}
}
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	3748      	adds	r7, #72	@ 0x48
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	7e11d600 	.word	0x7e11d600
 8004acc:	00000003 	.word	0x00000003
 8004ad0:	02faf080 	.word	0x02faf080
 8004ad4:	00000000 	.word	0x00000000
 8004ad8:	ee752300 	.word	0xee752300
 8004adc:	00000014 	.word	0x00000014
 8004ae0:	7e11d601 	.word	0x7e11d601
 8004ae4:	02faf080 	.word	0x02faf080
 8004ae8:	f46b0401 	.word	0xf46b0401
 8004aec:	f8475800 	.word	0xf8475800

08004af0 <_ZN6Si53516ms_divE12si5351_clockhh>:
	int_status->LOL_B_STKY = (reg_val >> 6) & 0x01;
	int_status->LOL_A_STKY = (reg_val >> 5) & 0x01;
	int_status->LOS_STKY = (reg_val >> 4) & 0x01;
}

void Si5351::ms_div(enum si5351_clock clk, uint8_t r_div, uint8_t div_by_4) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	70fb      	strb	r3, [r7, #3]
 8004b02:	460b      	mov	r3, r1
 8004b04:	70bb      	strb	r3, [r7, #2]
 8004b06:	4613      	mov	r3, r2
 8004b08:	707b      	strb	r3, [r7, #1]
	uint8_t reg_val = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_addr = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73bb      	strb	r3, [r7, #14]

	switch (clk) {
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	2b07      	cmp	r3, #7
 8004b16:	d82b      	bhi.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
 8004b18:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <_ZN6Si53516ms_divE12si5351_clockhh+0x30>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b41 	.word	0x08004b41
 8004b24:	08004b47 	.word	0x08004b47
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b53 	.word	0x08004b53
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b5f 	.word	0x08004b5f
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b6b 	.word	0x08004b6b
	case SI5351_CLK0:
		reg_addr = SI5351_CLK0_PARAMETERS + 2;
 8004b40:	232c      	movs	r3, #44	@ 0x2c
 8004b42:	73bb      	strb	r3, [r7, #14]
		break;
 8004b44:	e014      	b.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
	case SI5351_CLK1:
		reg_addr = SI5351_CLK1_PARAMETERS + 2;
 8004b46:	2334      	movs	r3, #52	@ 0x34
 8004b48:	73bb      	strb	r3, [r7, #14]
		break;
 8004b4a:	e011      	b.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
	case SI5351_CLK2:
		reg_addr = SI5351_CLK2_PARAMETERS + 2;
 8004b4c:	233c      	movs	r3, #60	@ 0x3c
 8004b4e:	73bb      	strb	r3, [r7, #14]
		break;
 8004b50:	e00e      	b.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
	case SI5351_CLK3:
		reg_addr = SI5351_CLK3_PARAMETERS + 2;
 8004b52:	2344      	movs	r3, #68	@ 0x44
 8004b54:	73bb      	strb	r3, [r7, #14]
		break;
 8004b56:	e00b      	b.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
	case SI5351_CLK4:
		reg_addr = SI5351_CLK4_PARAMETERS + 2;
 8004b58:	234c      	movs	r3, #76	@ 0x4c
 8004b5a:	73bb      	strb	r3, [r7, #14]
		break;
 8004b5c:	e008      	b.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
	case SI5351_CLK5:
		reg_addr = SI5351_CLK5_PARAMETERS + 2;
 8004b5e:	2354      	movs	r3, #84	@ 0x54
 8004b60:	73bb      	strb	r3, [r7, #14]
		break;
 8004b62:	e005      	b.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
	case SI5351_CLK6:
		reg_addr = SI5351_CLK6_7_OUTPUT_DIVIDER;
 8004b64:	235c      	movs	r3, #92	@ 0x5c
 8004b66:	73bb      	strb	r3, [r7, #14]
		break;
 8004b68:	e002      	b.n	8004b70 <_ZN6Si53516ms_divE12si5351_clockhh+0x80>
	case SI5351_CLK7:
		reg_addr = SI5351_CLK6_7_OUTPUT_DIVIDER;
 8004b6a:	235c      	movs	r3, #92	@ 0x5c
 8004b6c:	73bb      	strb	r3, [r7, #14]
		break;
 8004b6e:	bf00      	nop
	}

	reg_val = si5351_read(reg_addr);
 8004b70:	7bbb      	ldrb	r3, [r7, #14]
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff f9d4 	bl	8003f22 <_ZN6Si535111si5351_readEh>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	73fb      	strb	r3, [r7, #15]

	if (clk <= (uint8_t) SI5351_CLK5) {
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	2b05      	cmp	r3, #5
 8004b82:	d818      	bhi.n	8004bb6 <_ZN6Si53516ms_divE12si5351_clockhh+0xc6>
		// Clear the relevant bits
		reg_val &= ~(0x7c);
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8004b8a:	73fb      	strb	r3, [r7, #15]

		if (div_by_4 == 0) {
 8004b8c:	787b      	ldrb	r3, [r7, #1]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <_ZN6Si53516ms_divE12si5351_clockhh+0xac>
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	f023 030c 	bic.w	r3, r3, #12
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	e003      	b.n	8004ba4 <_ZN6Si53516ms_divE12si5351_clockhh+0xb4>
		} else {
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	f043 030c 	orr.w	r3, r3, #12
 8004ba2:	73fb      	strb	r3, [r7, #15]
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 8004ba4:	78bb      	ldrb	r3, [r7, #2]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	b25a      	sxtb	r2, r3
 8004baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	b25b      	sxtb	r3, r3
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e01a      	b.n	8004bec <_ZN6Si53516ms_divE12si5351_clockhh+0xfc>
	} else if (clk == SI5351_CLK6) {
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	2b06      	cmp	r3, #6
 8004bba:	d108      	bne.n	8004bce <_ZN6Si53516ms_divE12si5351_clockhh+0xde>
		// Clear the relevant bits
		reg_val &= ~(0x07);
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	f023 0307 	bic.w	r3, r3, #7
 8004bc2:	73fb      	strb	r3, [r7, #15]

		reg_val |= r_div;
 8004bc4:	7bfa      	ldrb	r2, [r7, #15]
 8004bc6:	78bb      	ldrb	r3, [r7, #2]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	e00e      	b.n	8004bec <_ZN6Si53516ms_divE12si5351_clockhh+0xfc>
	} else if (clk == SI5351_CLK7) {
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	d10b      	bne.n	8004bec <_ZN6Si53516ms_divE12si5351_clockhh+0xfc>
		// Clear the relevant bits
		reg_val &= ~(0x70);
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bda:	73fb      	strb	r3, [r7, #15]

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 8004bdc:	78bb      	ldrb	r3, [r7, #2]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	b25a      	sxtb	r2, r3
 8004be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	b25b      	sxtb	r3, r3
 8004bea:	73fb      	strb	r3, [r7, #15]
	}

	si5351_write(reg_addr, reg_val);
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	7bbb      	ldrb	r3, [r7, #14]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff f974 	bl	8003ee0 <_ZN6Si535112si5351_writeEhh>
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN6Si535112select_r_divEPy>:

uint8_t Si5351::select_r_div(uint64_t *freq) {
 8004c00:	b4b0      	push	{r4, r5, r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]

	// Choose the correct R divider
	if ((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	4972      	ldr	r1, [pc, #456]	@ (8004de0 <_ZN6Si535112select_r_divEPy+0x1e0>)
 8004c16:	428a      	cmp	r2, r1
 8004c18:	f173 0300 	sbcs.w	r3, r3, #0
 8004c1c:	d318      	bcc.n	8004c50 <_ZN6Si535112select_r_divEPy+0x50>
			&& (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2)) {
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	496f      	ldr	r1, [pc, #444]	@ (8004de4 <_ZN6Si535112select_r_divEPy+0x1e4>)
 8004c26:	428a      	cmp	r2, r1
 8004c28:	f173 0300 	sbcs.w	r3, r3, #0
 8004c2c:	d210      	bcs.n	8004c50 <_ZN6Si535112select_r_divEPy+0x50>
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 8004c2e:	2307      	movs	r3, #7
 8004c30:	73fb      	strb	r3, [r7, #15]
		*freq *= 128ULL;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	01cb      	lsls	r3, r1, #7
 8004c42:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8004c46:	01c2      	lsls	r2, r0, #7
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	e9c1 2300 	strd	r2, r3, [r1]
 8004c4e:	e0c1      	b.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	4963      	ldr	r1, [pc, #396]	@ (8004de4 <_ZN6Si535112select_r_divEPy+0x1e4>)
 8004c58:	428a      	cmp	r2, r1
 8004c5a:	f173 0300 	sbcs.w	r3, r3, #0
 8004c5e:	d318      	bcc.n	8004c92 <_ZN6Si535112select_r_divEPy+0x92>
			&& (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4)) {
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	4960      	ldr	r1, [pc, #384]	@ (8004de8 <_ZN6Si535112select_r_divEPy+0x1e8>)
 8004c68:	428a      	cmp	r2, r1
 8004c6a:	f173 0300 	sbcs.w	r3, r3, #0
 8004c6e:	d210      	bcs.n	8004c92 <_ZN6Si535112select_r_divEPy+0x92>
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 8004c70:	2306      	movs	r3, #6
 8004c72:	73fb      	strb	r3, [r7, #15]
		*freq *= 64ULL;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	018b      	lsls	r3, r1, #6
 8004c84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c88:	0182      	lsls	r2, r0, #6
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	e9c1 2300 	strd	r2, r3, [r1]
 8004c90:	e0a0      	b.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	4953      	ldr	r1, [pc, #332]	@ (8004de8 <_ZN6Si535112select_r_divEPy+0x1e8>)
 8004c9a:	428a      	cmp	r2, r1
 8004c9c:	f173 0300 	sbcs.w	r3, r3, #0
 8004ca0:	d318      	bcc.n	8004cd4 <_ZN6Si535112select_r_divEPy+0xd4>
			&& (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8)) {
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	4950      	ldr	r1, [pc, #320]	@ (8004dec <_ZN6Si535112select_r_divEPy+0x1ec>)
 8004caa:	428a      	cmp	r2, r1
 8004cac:	f173 0300 	sbcs.w	r3, r3, #0
 8004cb0:	d210      	bcs.n	8004cd4 <_ZN6Si535112select_r_divEPy+0xd4>
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 8004cb2:	2305      	movs	r3, #5
 8004cb4:	73fb      	strb	r3, [r7, #15]
		*freq *= 32ULL;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	014b      	lsls	r3, r1, #5
 8004cc6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cca:	0142      	lsls	r2, r0, #5
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	e9c1 2300 	strd	r2, r3, [r1]
 8004cd2:	e07f      	b.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	4944      	ldr	r1, [pc, #272]	@ (8004dec <_ZN6Si535112select_r_divEPy+0x1ec>)
 8004cdc:	428a      	cmp	r2, r1
 8004cde:	f173 0300 	sbcs.w	r3, r3, #0
 8004ce2:	d318      	bcc.n	8004d16 <_ZN6Si535112select_r_divEPy+0x116>
			&& (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16)) {
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	4941      	ldr	r1, [pc, #260]	@ (8004df0 <_ZN6Si535112select_r_divEPy+0x1f0>)
 8004cec:	428a      	cmp	r2, r1
 8004cee:	f173 0300 	sbcs.w	r3, r3, #0
 8004cf2:	d210      	bcs.n	8004d16 <_ZN6Si535112select_r_divEPy+0x116>
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	73fb      	strb	r3, [r7, #15]
		*freq *= 16ULL;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	010b      	lsls	r3, r1, #4
 8004d08:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004d0c:	0102      	lsls	r2, r0, #4
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	e9c1 2300 	strd	r2, r3, [r1]
 8004d14:	e05e      	b.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	4934      	ldr	r1, [pc, #208]	@ (8004df0 <_ZN6Si535112select_r_divEPy+0x1f0>)
 8004d1e:	428a      	cmp	r2, r1
 8004d20:	f173 0300 	sbcs.w	r3, r3, #0
 8004d24:	d318      	bcc.n	8004d58 <_ZN6Si535112select_r_divEPy+0x158>
			&& (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32)) {
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	4931      	ldr	r1, [pc, #196]	@ (8004df4 <_ZN6Si535112select_r_divEPy+0x1f4>)
 8004d2e:	428a      	cmp	r2, r1
 8004d30:	f173 0300 	sbcs.w	r3, r3, #0
 8004d34:	d210      	bcs.n	8004d58 <_ZN6Si535112select_r_divEPy+0x158>
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 8004d36:	2303      	movs	r3, #3
 8004d38:	73fb      	strb	r3, [r7, #15]
		*freq *= 8ULL;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	00cb      	lsls	r3, r1, #3
 8004d4a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004d4e:	00c2      	lsls	r2, r0, #3
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	e9c1 2300 	strd	r2, r3, [r1]
 8004d56:	e03d      	b.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	4925      	ldr	r1, [pc, #148]	@ (8004df4 <_ZN6Si535112select_r_divEPy+0x1f4>)
 8004d60:	428a      	cmp	r2, r1
 8004d62:	f173 0300 	sbcs.w	r3, r3, #0
 8004d66:	d318      	bcc.n	8004d9a <_ZN6Si535112select_r_divEPy+0x19a>
			&& (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64)) {
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	4922      	ldr	r1, [pc, #136]	@ (8004df8 <_ZN6Si535112select_r_divEPy+0x1f8>)
 8004d70:	428a      	cmp	r2, r1
 8004d72:	f173 0300 	sbcs.w	r3, r3, #0
 8004d76:	d210      	bcs.n	8004d9a <_ZN6Si535112select_r_divEPy+0x19a>
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	73fb      	strb	r3, [r7, #15]
		*freq *= 4ULL;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	008b      	lsls	r3, r1, #2
 8004d8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d90:	0082      	lsls	r2, r0, #2
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	e9c1 2300 	strd	r2, r3, [r1]
 8004d98:	e01c      	b.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	4915      	ldr	r1, [pc, #84]	@ (8004df8 <_ZN6Si535112select_r_divEPy+0x1f8>)
 8004da2:	428a      	cmp	r2, r1
 8004da4:	f173 0300 	sbcs.w	r3, r3, #0
 8004da8:	d314      	bcc.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
			&& (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128)) {
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	4912      	ldr	r1, [pc, #72]	@ (8004dfc <_ZN6Si535112select_r_divEPy+0x1fc>)
 8004db2:	428a      	cmp	r2, r1
 8004db4:	f173 0300 	sbcs.w	r3, r3, #0
 8004db8:	d20c      	bcs.n	8004dd4 <_ZN6Si535112select_r_divEPy+0x1d4>
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
		*freq *= 2ULL;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	1894      	adds	r4, r2, r2
 8004dc6:	eb43 0503 	adc.w	r5, r3, r3
 8004dca:	4622      	mov	r2, r4
 8004dcc:	462b      	mov	r3, r5
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return r_div;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bcb0      	pop	{r4, r5, r7}
 8004dde:	4770      	bx	lr
 8004de0:	00061a80 	.word	0x00061a80
 8004de4:	000c3500 	.word	0x000c3500
 8004de8:	00186a00 	.word	0x00186a00
 8004dec:	0030d400 	.word	0x0030d400
 8004df0:	0061a800 	.word	0x0061a800
 8004df4:	00c35000 	.word	0x00c35000
 8004df8:	0186a000 	.word	0x0186a000
 8004dfc:	030d4000 	.word	0x030d4000

08004e00 <_ZN6Si535117select_r_div_ms67EPy>:

uint8_t Si5351::select_r_div_ms67(uint64_t *freq) {
 8004e00:	b4b0      	push	{r4, r5, r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]

	// Choose the correct R divider
	if ((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	4972      	ldr	r1, [pc, #456]	@ (8004fe0 <_ZN6Si535117select_r_div_ms67EPy+0x1e0>)
 8004e16:	428a      	cmp	r2, r1
 8004e18:	f173 0300 	sbcs.w	r3, r3, #0
 8004e1c:	d318      	bcc.n	8004e50 <_ZN6Si535117select_r_div_ms67EPy+0x50>
			&& (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2)) {
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	496f      	ldr	r1, [pc, #444]	@ (8004fe4 <_ZN6Si535117select_r_div_ms67EPy+0x1e4>)
 8004e26:	428a      	cmp	r2, r1
 8004e28:	f173 0300 	sbcs.w	r3, r3, #0
 8004e2c:	d210      	bcs.n	8004e50 <_ZN6Si535117select_r_div_ms67EPy+0x50>
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 8004e2e:	2307      	movs	r3, #7
 8004e30:	73fb      	strb	r3, [r7, #15]
		*freq *= 128ULL;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	01cb      	lsls	r3, r1, #7
 8004e42:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8004e46:	01c2      	lsls	r2, r0, #7
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	e9c1 2300 	strd	r2, r3, [r1]
 8004e4e:	e0c1      	b.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	4963      	ldr	r1, [pc, #396]	@ (8004fe4 <_ZN6Si535117select_r_div_ms67EPy+0x1e4>)
 8004e58:	428a      	cmp	r2, r1
 8004e5a:	f173 0300 	sbcs.w	r3, r3, #0
 8004e5e:	d318      	bcc.n	8004e92 <_ZN6Si535117select_r_div_ms67EPy+0x92>
			&& (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4)) {
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	4960      	ldr	r1, [pc, #384]	@ (8004fe8 <_ZN6Si535117select_r_div_ms67EPy+0x1e8>)
 8004e68:	428a      	cmp	r2, r1
 8004e6a:	f173 0300 	sbcs.w	r3, r3, #0
 8004e6e:	d210      	bcs.n	8004e92 <_ZN6Si535117select_r_div_ms67EPy+0x92>
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 8004e70:	2306      	movs	r3, #6
 8004e72:	73fb      	strb	r3, [r7, #15]
		*freq *= 64ULL;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	018b      	lsls	r3, r1, #6
 8004e84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e88:	0182      	lsls	r2, r0, #6
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	e9c1 2300 	strd	r2, r3, [r1]
 8004e90:	e0a0      	b.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	4953      	ldr	r1, [pc, #332]	@ (8004fe8 <_ZN6Si535117select_r_div_ms67EPy+0x1e8>)
 8004e9a:	428a      	cmp	r2, r1
 8004e9c:	f173 0300 	sbcs.w	r3, r3, #0
 8004ea0:	d318      	bcc.n	8004ed4 <_ZN6Si535117select_r_div_ms67EPy+0xd4>
			&& (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8)) {
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	4950      	ldr	r1, [pc, #320]	@ (8004fec <_ZN6Si535117select_r_div_ms67EPy+0x1ec>)
 8004eaa:	428a      	cmp	r2, r1
 8004eac:	f173 0300 	sbcs.w	r3, r3, #0
 8004eb0:	d210      	bcs.n	8004ed4 <_ZN6Si535117select_r_div_ms67EPy+0xd4>
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 8004eb2:	2305      	movs	r3, #5
 8004eb4:	73fb      	strb	r3, [r7, #15]
		*freq *= 32ULL;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	014b      	lsls	r3, r1, #5
 8004ec6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004eca:	0142      	lsls	r2, r0, #5
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	e9c1 2300 	strd	r2, r3, [r1]
 8004ed2:	e07f      	b.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	4944      	ldr	r1, [pc, #272]	@ (8004fec <_ZN6Si535117select_r_div_ms67EPy+0x1ec>)
 8004edc:	428a      	cmp	r2, r1
 8004ede:	f173 0300 	sbcs.w	r3, r3, #0
 8004ee2:	d318      	bcc.n	8004f16 <_ZN6Si535117select_r_div_ms67EPy+0x116>
			&& (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16)) {
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	4941      	ldr	r1, [pc, #260]	@ (8004ff0 <_ZN6Si535117select_r_div_ms67EPy+0x1f0>)
 8004eec:	428a      	cmp	r2, r1
 8004eee:	f173 0300 	sbcs.w	r3, r3, #0
 8004ef2:	d210      	bcs.n	8004f16 <_ZN6Si535117select_r_div_ms67EPy+0x116>
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	73fb      	strb	r3, [r7, #15]
		*freq *= 16ULL;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	010b      	lsls	r3, r1, #4
 8004f08:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004f0c:	0102      	lsls	r2, r0, #4
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	e9c1 2300 	strd	r2, r3, [r1]
 8004f14:	e05e      	b.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	4934      	ldr	r1, [pc, #208]	@ (8004ff0 <_ZN6Si535117select_r_div_ms67EPy+0x1f0>)
 8004f1e:	428a      	cmp	r2, r1
 8004f20:	f173 0300 	sbcs.w	r3, r3, #0
 8004f24:	d318      	bcc.n	8004f58 <_ZN6Si535117select_r_div_ms67EPy+0x158>
			&& (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32)) {
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	4931      	ldr	r1, [pc, #196]	@ (8004ff4 <_ZN6Si535117select_r_div_ms67EPy+0x1f4>)
 8004f2e:	428a      	cmp	r2, r1
 8004f30:	f173 0300 	sbcs.w	r3, r3, #0
 8004f34:	d210      	bcs.n	8004f58 <_ZN6Si535117select_r_div_ms67EPy+0x158>
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 8004f36:	2303      	movs	r3, #3
 8004f38:	73fb      	strb	r3, [r7, #15]
		*freq *= 8ULL;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	00cb      	lsls	r3, r1, #3
 8004f4a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004f4e:	00c2      	lsls	r2, r0, #3
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	e9c1 2300 	strd	r2, r3, [r1]
 8004f56:	e03d      	b.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	4925      	ldr	r1, [pc, #148]	@ (8004ff4 <_ZN6Si535117select_r_div_ms67EPy+0x1f4>)
 8004f60:	428a      	cmp	r2, r1
 8004f62:	f173 0300 	sbcs.w	r3, r3, #0
 8004f66:	d318      	bcc.n	8004f9a <_ZN6Si535117select_r_div_ms67EPy+0x19a>
			&& (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64)) {
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	4922      	ldr	r1, [pc, #136]	@ (8004ff8 <_ZN6Si535117select_r_div_ms67EPy+0x1f8>)
 8004f70:	428a      	cmp	r2, r1
 8004f72:	f173 0300 	sbcs.w	r3, r3, #0
 8004f76:	d210      	bcs.n	8004f9a <_ZN6Si535117select_r_div_ms67EPy+0x19a>
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	73fb      	strb	r3, [r7, #15]
		*freq *= 4ULL;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	008b      	lsls	r3, r1, #2
 8004f8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f90:	0082      	lsls	r2, r0, #2
 8004f92:	6839      	ldr	r1, [r7, #0]
 8004f94:	e9c1 2300 	strd	r2, r3, [r1]
 8004f98:	e01c      	b.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
	} else if ((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	4915      	ldr	r1, [pc, #84]	@ (8004ff8 <_ZN6Si535117select_r_div_ms67EPy+0x1f8>)
 8004fa2:	428a      	cmp	r2, r1
 8004fa4:	f173 0300 	sbcs.w	r3, r3, #0
 8004fa8:	d314      	bcc.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
			&& (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 128)) {
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	4912      	ldr	r1, [pc, #72]	@ (8004ffc <_ZN6Si535117select_r_div_ms67EPy+0x1fc>)
 8004fb2:	428a      	cmp	r2, r1
 8004fb4:	f173 0300 	sbcs.w	r3, r3, #0
 8004fb8:	d20c      	bcs.n	8004fd4 <_ZN6Si535117select_r_div_ms67EPy+0x1d4>
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
		*freq *= 2ULL;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	1894      	adds	r4, r2, r2
 8004fc6:	eb43 0503 	adc.w	r5, r3, r3
 8004fca:	4622      	mov	r2, r4
 8004fcc:	462b      	mov	r3, r5
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return r_div;
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bcb0      	pop	{r4, r5, r7}
 8004fde:	4770      	bx	lr
 8004fe0:	001c2898 	.word	0x001c2898
 8004fe4:	00385130 	.word	0x00385130
 8004fe8:	0070a260 	.word	0x0070a260
 8004fec:	00e144c0 	.word	0x00e144c0
 8004ff0:	01c28980 	.word	0x01c28980
 8004ff4:	03851300 	.word	0x03851300
 8004ff8:	070a2600 	.word	0x070a2600
 8004ffc:	0e144c00 	.word	0x0e144c00

08005000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	4b10      	ldr	r3, [pc, #64]	@ (800504c <HAL_MspInit+0x4c>)
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	4a0f      	ldr	r2, [pc, #60]	@ (800504c <HAL_MspInit+0x4c>)
 8005010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005014:	6453      	str	r3, [r2, #68]	@ 0x44
 8005016:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <HAL_MspInit+0x4c>)
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800501e:	607b      	str	r3, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	4b09      	ldr	r3, [pc, #36]	@ (800504c <HAL_MspInit+0x4c>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	4a08      	ldr	r2, [pc, #32]	@ (800504c <HAL_MspInit+0x4c>)
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005030:	6413      	str	r3, [r2, #64]	@ 0x40
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_MspInit+0x4c>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800

08005050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <NMI_Handler+0x4>

08005058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800505c:	bf00      	nop
 800505e:	e7fd      	b.n	800505c <HardFault_Handler+0x4>

08005060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <MemManage_Handler+0x4>

08005068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <BusFault_Handler+0x4>

08005070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <UsageFault_Handler+0x4>

08005078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005098:	bf00      	nop
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050a6:	f000 fa81 	bl	80055ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80050b4:	4802      	ldr	r0, [pc, #8]	@ (80050c0 <ADC_IRQHandler+0x10>)
 80050b6:	f000 fb00 	bl	80056ba <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	200007dc 	.word	0x200007dc

080050c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80050c8:	2020      	movs	r0, #32
 80050ca:	f001 fddd 	bl	8006c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80050d8:	4802      	ldr	r0, [pc, #8]	@ (80050e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80050da:	f005 f93b 	bl	800a354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000ae8 	.word	0x20000ae8

080050e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80050ec:	4802      	ldr	r0, [pc, #8]	@ (80050f8 <TIM3_IRQHandler+0x10>)
 80050ee:	f005 f931 	bl	800a354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000aa0 	.word	0x20000aa0

080050fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005100:	4802      	ldr	r0, [pc, #8]	@ (800510c <DMA2_Stream0_IRQHandler+0x10>)
 8005102:	f001 f9bb 	bl	800647c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000824 	.word	0x20000824

08005110 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005114:	4802      	ldr	r0, [pc, #8]	@ (8005120 <OTG_FS_IRQHandler+0x10>)
 8005116:	f003 f9e5 	bl	80084e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20001814 	.word	0x20001814

08005124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return 1;
 8005128:	2301      	movs	r3, #1
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <_kill>:

int _kill(int pid, int sig)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800513e:	f00b f8ab 	bl	8010298 <__errno>
 8005142:	4603      	mov	r3, r0
 8005144:	2216      	movs	r2, #22
 8005146:	601a      	str	r2, [r3, #0]
  return -1;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_exit>:

void _exit (int status)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800515c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ffe7 	bl	8005134 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <_exit+0x12>

0800516a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e00a      	b.n	8005192 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800517c:	f3af 8000 	nop.w
 8005180:	4601      	mov	r1, r0
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	60ba      	str	r2, [r7, #8]
 8005188:	b2ca      	uxtb	r2, r1
 800518a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3301      	adds	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	dbf0      	blt.n	800517c <_read+0x12>
  }

  return len;
 800519a:	687b      	ldr	r3, [r7, #4]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e009      	b.n	80051ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	60ba      	str	r2, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3301      	adds	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	dbf1      	blt.n	80051b6 <_write+0x12>
  }
  return len;
 80051d2:	687b      	ldr	r3, [r7, #4]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <_close>:

int _close(int file)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80051e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005204:	605a      	str	r2, [r3, #4]
  return 0;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <_isatty>:

int _isatty(int file)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800521c:	2301      	movs	r3, #1
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800524c:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <_sbrk+0x5c>)
 800524e:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <_sbrk+0x60>)
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005258:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <_sbrk+0x64>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005260:	4b11      	ldr	r3, [pc, #68]	@ (80052a8 <_sbrk+0x64>)
 8005262:	4a12      	ldr	r2, [pc, #72]	@ (80052ac <_sbrk+0x68>)
 8005264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005266:	4b10      	ldr	r3, [pc, #64]	@ (80052a8 <_sbrk+0x64>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d207      	bcs.n	8005284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005274:	f00b f810 	bl	8010298 <__errno>
 8005278:	4603      	mov	r3, r0
 800527a:	220c      	movs	r2, #12
 800527c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005282:	e009      	b.n	8005298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005284:	4b08      	ldr	r3, [pc, #32]	@ (80052a8 <_sbrk+0x64>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800528a:	4b07      	ldr	r3, [pc, #28]	@ (80052a8 <_sbrk+0x64>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	4a05      	ldr	r2, [pc, #20]	@ (80052a8 <_sbrk+0x64>)
 8005294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005296:	68fb      	ldr	r3, [r7, #12]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20010000 	.word	0x20010000
 80052a4:	00000400 	.word	0x00000400
 80052a8:	20000a9c 	.word	0x20000a9c
 80052ac:	20002228 	.word	0x20002228

080052b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052b4:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <SystemInit+0x20>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ba:	4a05      	ldr	r2, [pc, #20]	@ (80052d0 <SystemInit+0x20>)
 80052bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000ed00 	.word	0xe000ed00

080052d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08c      	sub	sp, #48	@ 0x30
 80052d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80052da:	f107 030c 	add.w	r3, r7, #12
 80052de:	2224      	movs	r2, #36	@ 0x24
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f00a ff03 	bl	80100ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052f0:	4b20      	ldr	r3, [pc, #128]	@ (8005374 <MX_TIM3_Init+0xa0>)
 80052f2:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <MX_TIM3_Init+0xa4>)
 80052f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80052f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <MX_TIM3_Init+0xa0>)
 80052f8:	2203      	movs	r2, #3
 80052fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005374 <MX_TIM3_Init+0xa0>)
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005302:	4b1c      	ldr	r3, [pc, #112]	@ (8005374 <MX_TIM3_Init+0xa0>)
 8005304:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005308:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800530a:	4b1a      	ldr	r3, [pc, #104]	@ (8005374 <MX_TIM3_Init+0xa0>)
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005310:	4b18      	ldr	r3, [pc, #96]	@ (8005374 <MX_TIM3_Init+0xa0>)
 8005312:	2280      	movs	r2, #128	@ 0x80
 8005314:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005316:	2303      	movs	r3, #3
 8005318:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800531e:	2301      	movs	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005322:	2300      	movs	r3, #0
 8005324:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005326:	230f      	movs	r3, #15
 8005328:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800532a:	2302      	movs	r3, #2
 800532c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800532e:	2301      	movs	r3, #1
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005332:	2300      	movs	r3, #0
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8005336:	230f      	movs	r3, #15
 8005338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	4619      	mov	r1, r3
 8005340:	480c      	ldr	r0, [pc, #48]	@ (8005374 <MX_TIM3_Init+0xa0>)
 8005342:	f004 fed3 	bl	800a0ec <HAL_TIM_Encoder_Init>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800534c:	f7fc fec8 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005350:	2300      	movs	r3, #0
 8005352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005358:	1d3b      	adds	r3, r7, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4805      	ldr	r0, [pc, #20]	@ (8005374 <MX_TIM3_Init+0xa0>)
 800535e:	f005 f9cd 	bl	800a6fc <HAL_TIMEx_MasterConfigSynchronization>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005368:	f7fc feba 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800536c:	bf00      	nop
 800536e:	3730      	adds	r7, #48	@ 0x30
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000aa0 	.word	0x20000aa0
 8005378:	40000400 	.word	0x40000400

0800537c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005380:	4b0e      	ldr	r3, [pc, #56]	@ (80053bc <MX_TIM11_Init+0x40>)
 8005382:	4a0f      	ldr	r2, [pc, #60]	@ (80053c0 <MX_TIM11_Init+0x44>)
 8005384:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 8005386:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <MX_TIM11_Init+0x40>)
 8005388:	2253      	movs	r2, #83	@ 0x53
 800538a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800538c:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <MX_TIM11_Init+0x40>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8005392:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <MX_TIM11_Init+0x40>)
 8005394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005398:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800539a:	4b08      	ldr	r3, [pc, #32]	@ (80053bc <MX_TIM11_Init+0x40>)
 800539c:	2200      	movs	r2, #0
 800539e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <MX_TIM11_Init+0x40>)
 80053a2:	2280      	movs	r2, #128	@ 0x80
 80053a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80053a6:	4805      	ldr	r0, [pc, #20]	@ (80053bc <MX_TIM11_Init+0x40>)
 80053a8:	f004 fdee 	bl	8009f88 <HAL_TIM_Base_Init>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80053b2:	f7fc fe95 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000ae8 	.word	0x20000ae8
 80053c0:	40014800 	.word	0x40014800

080053c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	@ 0x28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053cc:	f107 0314 	add.w	r3, r7, #20
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <HAL_TIM_Encoder_MspInit+0x94>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d133      	bne.n	800544e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	4b1c      	ldr	r3, [pc, #112]	@ (800545c <HAL_TIM_Encoder_MspInit+0x98>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	4a1b      	ldr	r2, [pc, #108]	@ (800545c <HAL_TIM_Encoder_MspInit+0x98>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80053f6:	4b19      	ldr	r3, [pc, #100]	@ (800545c <HAL_TIM_Encoder_MspInit+0x98>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	4b15      	ldr	r3, [pc, #84]	@ (800545c <HAL_TIM_Encoder_MspInit+0x98>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540a:	4a14      	ldr	r2, [pc, #80]	@ (800545c <HAL_TIM_Encoder_MspInit+0x98>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6313      	str	r3, [r2, #48]	@ 0x30
 8005412:	4b12      	ldr	r3, [pc, #72]	@ (800545c <HAL_TIM_Encoder_MspInit+0x98>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800541e:	23c0      	movs	r3, #192	@ 0xc0
 8005420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005422:	2302      	movs	r3, #2
 8005424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542a:	2300      	movs	r3, #0
 800542c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800542e:	2302      	movs	r3, #2
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005432:	f107 0314 	add.w	r3, r7, #20
 8005436:	4619      	mov	r1, r3
 8005438:	4809      	ldr	r0, [pc, #36]	@ (8005460 <HAL_TIM_Encoder_MspInit+0x9c>)
 800543a:	f001 fa89 	bl	8006950 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800543e:	2200      	movs	r2, #0
 8005440:	2100      	movs	r1, #0
 8005442:	201d      	movs	r0, #29
 8005444:	f000 fedd 	bl	8006202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005448:	201d      	movs	r0, #29
 800544a:	f000 fef6 	bl	800623a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800544e:	bf00      	nop
 8005450:	3728      	adds	r7, #40	@ 0x28
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40000400 	.word	0x40000400
 800545c:	40023800 	.word	0x40023800
 8005460:	40020000 	.word	0x40020000

08005464 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0e      	ldr	r2, [pc, #56]	@ (80054ac <HAL_TIM_Base_MspInit+0x48>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d115      	bne.n	80054a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <HAL_TIM_Base_MspInit+0x4c>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	4a0c      	ldr	r2, [pc, #48]	@ (80054b0 <HAL_TIM_Base_MspInit+0x4c>)
 8005480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005484:	6453      	str	r3, [r2, #68]	@ 0x44
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <HAL_TIM_Base_MspInit+0x4c>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005492:	2200      	movs	r2, #0
 8005494:	2100      	movs	r1, #0
 8005496:	201a      	movs	r0, #26
 8005498:	f000 feb3 	bl	8006202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800549c:	201a      	movs	r0, #26
 800549e:	f000 fecc 	bl	800623a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40014800 	.word	0x40014800
 80054b0:	40023800 	.word	0x40023800

080054b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80054b8:	f7ff fefa 	bl	80052b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054bc:	480c      	ldr	r0, [pc, #48]	@ (80054f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80054be:	490d      	ldr	r1, [pc, #52]	@ (80054f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80054c0:	4a0d      	ldr	r2, [pc, #52]	@ (80054f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80054c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054c4:	e002      	b.n	80054cc <LoopCopyDataInit>

080054c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054ca:	3304      	adds	r3, #4

080054cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054d0:	d3f9      	bcc.n	80054c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054d2:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80054d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80054d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054d8:	e001      	b.n	80054de <LoopFillZerobss>

080054da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054dc:	3204      	adds	r2, #4

080054de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054e0:	d3fb      	bcc.n	80054da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80054e2:	f00a fedf 	bl	80102a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054e6:	f7fc fd77 	bl	8001fd8 <main>
  bx  lr    
 80054ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80054f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054f4:	200007c0 	.word	0x200007c0
  ldr r2, =_sidata
 80054f8:	0801495c 	.word	0x0801495c
  ldr r2, =_sbss
 80054fc:	200007c0 	.word	0x200007c0
  ldr r4, =_ebss
 8005500:	20002228 	.word	0x20002228

08005504 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005504:	e7fe      	b.n	8005504 <DMA1_Stream0_IRQHandler>
	...

08005508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800550c:	4b0e      	ldr	r3, [pc, #56]	@ (8005548 <HAL_Init+0x40>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0d      	ldr	r2, [pc, #52]	@ (8005548 <HAL_Init+0x40>)
 8005512:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <HAL_Init+0x40>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <HAL_Init+0x40>)
 800551e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005524:	4b08      	ldr	r3, [pc, #32]	@ (8005548 <HAL_Init+0x40>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a07      	ldr	r2, [pc, #28]	@ (8005548 <HAL_Init+0x40>)
 800552a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800552e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005530:	2003      	movs	r0, #3
 8005532:	f000 fe5b 	bl	80061ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005536:	200f      	movs	r0, #15
 8005538:	f000 f808 	bl	800554c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800553c:	f7ff fd60 	bl	8005000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40023c00 	.word	0x40023c00

0800554c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005554:	4b12      	ldr	r3, [pc, #72]	@ (80055a0 <HAL_InitTick+0x54>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b12      	ldr	r3, [pc, #72]	@ (80055a4 <HAL_InitTick+0x58>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	4619      	mov	r1, r3
 800555e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005562:	fbb3 f3f1 	udiv	r3, r3, r1
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fe73 	bl	8006256 <HAL_SYSTICK_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e00e      	b.n	8005598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b0f      	cmp	r3, #15
 800557e:	d80a      	bhi.n	8005596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005580:	2200      	movs	r2, #0
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005588:	f000 fe3b 	bl	8006202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800558c:	4a06      	ldr	r2, [pc, #24]	@ (80055a8 <HAL_InitTick+0x5c>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e000      	b.n	8005598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000000 	.word	0x20000000
 80055a4:	20000008 	.word	0x20000008
 80055a8:	20000004 	.word	0x20000004

080055ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055b0:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_IncTick+0x20>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_IncTick+0x24>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4413      	add	r3, r2
 80055bc:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <HAL_IncTick+0x24>)
 80055be:	6013      	str	r3, [r2, #0]
}
 80055c0:	bf00      	nop
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000008 	.word	0x20000008
 80055d0:	20000b30 	.word	0x20000b30

080055d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  return uwTick;
 80055d8:	4b03      	ldr	r3, [pc, #12]	@ (80055e8 <HAL_GetTick+0x14>)
 80055da:	681b      	ldr	r3, [r3, #0]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000b30 	.word	0x20000b30

080055ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055f4:	f7ff ffee 	bl	80055d4 <HAL_GetTick>
 80055f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005604:	d005      	beq.n	8005612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005606:	4b0a      	ldr	r3, [pc, #40]	@ (8005630 <HAL_Delay+0x44>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005612:	bf00      	nop
 8005614:	f7ff ffde 	bl	80055d4 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	429a      	cmp	r2, r3
 8005622:	d8f7      	bhi.n	8005614 <HAL_Delay+0x28>
  {
  }
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000008 	.word	0x20000008

08005634 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e033      	b.n	80056b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb ff02 	bl	800145c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	d118      	bne.n	80056a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800567a:	f023 0302 	bic.w	r3, r3, #2
 800567e:	f043 0202 	orr.w	r2, r3, #2
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fb58 	bl	8005d3c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80056a2:	e001      	b.n	80056a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d049      	beq.n	8005784 <HAL_ADC_IRQHandler+0xca>
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d046      	beq.n	8005784 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d12b      	bne.n	8005774 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005720:	2b00      	cmp	r3, #0
 8005722:	d127      	bne.n	8005774 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800573c:	2b00      	cmp	r3, #0
 800573e:	d119      	bne.n	8005774 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0220 	bic.w	r2, r2, #32
 800574e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	f043 0201 	orr.w	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc fd73 	bl	8002260 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0212 	mvn.w	r2, #18
 8005782:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005792:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d057      	beq.n	800584a <HAL_ADC_IRQHandler+0x190>
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d054      	beq.n	800584a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d139      	bne.n	800583a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d12b      	bne.n	800583a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d124      	bne.n	800583a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11d      	bne.n	800583a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005802:	2b00      	cmp	r3, #0
 8005804:	d119      	bne.n	800583a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005814:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fbfc 	bl	8006038 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 020c 	mvn.w	r2, #12
 8005848:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d017      	beq.n	8005890 <HAL_ADC_IRQHandler+0x1d6>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d014      	beq.n	8005890 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10d      	bne.n	8005890 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005878:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f925 	bl	8005ad0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0201 	mvn.w	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800589e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d015      	beq.n	80058d2 <HAL_ADC_IRQHandler+0x218>
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d012      	beq.n	80058d2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b0:	f043 0202 	orr.w	r2, r3, #2
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0220 	mvn.w	r2, #32
 80058c0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f90e 	bl	8005ae4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0220 	mvn.w	r2, #32
 80058d0:	601a      	str	r2, [r3, #0]
  }
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_ADC_Start_DMA+0x1e>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e0ce      	b.n	8005a98 <HAL_ADC_Start_DMA+0x1bc>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b01      	cmp	r3, #1
 800590e:	d018      	beq.n	8005942 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005920:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa0 <HAL_ADC_Start_DMA+0x1c4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a5f      	ldr	r2, [pc, #380]	@ (8005aa4 <HAL_ADC_Start_DMA+0x1c8>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	0c9a      	lsrs	r2, r3, #18
 800592c:	4613      	mov	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4413      	add	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005934:	e002      	b.n	800593c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3b01      	subs	r3, #1
 800593a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f9      	bne.n	8005936 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005950:	d107      	bne.n	8005962 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	f040 8086 	bne.w	8005a7e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800599c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b0:	d106      	bne.n	80059c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	f023 0206 	bic.w	r2, r3, #6
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80059be:	e002      	b.n	80059c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059ce:	4b36      	ldr	r3, [pc, #216]	@ (8005aa8 <HAL_ADC_Start_DMA+0x1cc>)
 80059d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	4a35      	ldr	r2, [pc, #212]	@ (8005aac <HAL_ADC_Start_DMA+0x1d0>)
 80059d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	4a34      	ldr	r2, [pc, #208]	@ (8005ab0 <HAL_ADC_Start_DMA+0x1d4>)
 80059e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	4a33      	ldr	r2, [pc, #204]	@ (8005ab4 <HAL_ADC_Start_DMA+0x1d8>)
 80059e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80059f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005a02:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a12:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	334c      	adds	r3, #76	@ 0x4c
 8005a1e:	4619      	mov	r1, r3
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f000 fcd2 	bl	80063cc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10f      	bne.n	8005a54 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d129      	bne.n	8005a96 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	e020      	b.n	8005a96 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <HAL_ADC_Start_DMA+0x1dc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d11b      	bne.n	8005a96 <HAL_ADC_Start_DMA+0x1ba>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d114      	bne.n	8005a96 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	e00b      	b.n	8005a96 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f043 0210 	orr.w	r2, r3, #16
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000000 	.word	0x20000000
 8005aa4:	431bde83 	.word	0x431bde83
 8005aa8:	40012300 	.word	0x40012300
 8005aac:	08005f35 	.word	0x08005f35
 8005ab0:	08005fef 	.word	0x08005fef
 8005ab4:	0800600b 	.word	0x0800600b
 8005ab8:	40012000 	.word	0x40012000

08005abc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x1c>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e105      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x228>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b09      	cmp	r3, #9
 8005b22:	d925      	bls.n	8005b70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68d9      	ldr	r1, [r3, #12]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	4613      	mov	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	4413      	add	r3, r2
 8005b38:	3b1e      	subs	r3, #30
 8005b3a:	2207      	movs	r2, #7
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43da      	mvns	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	400a      	ands	r2, r1
 8005b48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68d9      	ldr	r1, [r3, #12]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	4403      	add	r3, r0
 8005b62:	3b1e      	subs	r3, #30
 8005b64:	409a      	lsls	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	e022      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6919      	ldr	r1, [r3, #16]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	2207      	movs	r2, #7
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	43da      	mvns	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	400a      	ands	r2, r1
 8005b92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6919      	ldr	r1, [r3, #16]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	4403      	add	r3, r0
 8005bac:	409a      	lsls	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d824      	bhi.n	8005c08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	3b05      	subs	r3, #5
 8005bd0:	221f      	movs	r2, #31
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	400a      	ands	r2, r1
 8005bde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	4618      	mov	r0, r3
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3b05      	subs	r3, #5
 8005bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c06:	e04c      	b.n	8005ca2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	d824      	bhi.n	8005c5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	3b23      	subs	r3, #35	@ 0x23
 8005c22:	221f      	movs	r2, #31
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43da      	mvns	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	400a      	ands	r2, r1
 8005c30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	4618      	mov	r0, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	3b23      	subs	r3, #35	@ 0x23
 8005c4c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c58:	e023      	b.n	8005ca2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	3b41      	subs	r3, #65	@ 0x41
 8005c6c:	221f      	movs	r2, #31
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43da      	mvns	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	400a      	ands	r2, r1
 8005c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4618      	mov	r0, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	3b41      	subs	r3, #65	@ 0x41
 8005c96:	fa00 f203 	lsl.w	r2, r0, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ca2:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <HAL_ADC_ConfigChannel+0x234>)
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a21      	ldr	r2, [pc, #132]	@ (8005d30 <HAL_ADC_ConfigChannel+0x238>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d109      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x1cc>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b12      	cmp	r3, #18
 8005cb6:	d105      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	@ (8005d30 <HAL_ADC_ConfigChannel+0x238>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d123      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x21e>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d003      	beq.n	8005cde <HAL_ADC_ConfigChannel+0x1e6>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b11      	cmp	r3, #17
 8005cdc:	d11b      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b10      	cmp	r3, #16
 8005cf0:	d111      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <HAL_ADC_ConfigChannel+0x23c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a10      	ldr	r2, [pc, #64]	@ (8005d38 <HAL_ADC_ConfigChannel+0x240>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	0c9a      	lsrs	r2, r3, #18
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005d08:	e002      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f9      	bne.n	8005d0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40012300 	.word	0x40012300
 8005d30:	40012000 	.word	0x40012000
 8005d34:	20000000 	.word	0x20000000
 8005d38:	431bde83 	.word	0x431bde83

08005d3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d44:	4b79      	ldr	r3, [pc, #484]	@ (8005f2c <ADC_Init+0x1f0>)
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	021a      	lsls	r2, r3, #8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6859      	ldr	r1, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dce:	4a58      	ldr	r2, [pc, #352]	@ (8005f30 <ADC_Init+0x1f4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d022      	beq.n	8005e1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005de2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6899      	ldr	r1, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6899      	ldr	r1, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	e00f      	b.n	8005e3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005e38:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0202 	bic.w	r2, r2, #2
 8005e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6899      	ldr	r1, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7e1b      	ldrb	r3, [r3, #24]
 8005e54:	005a      	lsls	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e76:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005e86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	3b01      	subs	r3, #1
 8005e94:	035a      	lsls	r2, r3, #13
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	e007      	b.n	8005eb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	051a      	lsls	r2, r3, #20
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6899      	ldr	r1, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ef2:	025a      	lsls	r2, r3, #9
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6899      	ldr	r1, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	029a      	lsls	r2, r3, #10
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	609a      	str	r2, [r3, #8]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	40012300 	.word	0x40012300
 8005f30:	0f000001 	.word	0x0f000001

08005f34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d13c      	bne.n	8005fc8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d12b      	bne.n	8005fc0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d127      	bne.n	8005fc0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d006      	beq.n	8005f8c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d119      	bne.n	8005fc0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0220 	bic.w	r2, r2, #32
 8005f9a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	f043 0201 	orr.w	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7fc f94d 	bl	8002260 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005fc6:	e00e      	b.n	8005fe6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff fd85 	bl	8005ae4 <HAL_ADC_ErrorCallback>
}
 8005fda:	e004      	b.n	8005fe6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fd5d 	bl	8005abc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2240      	movs	r2, #64	@ 0x40
 800601c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006022:	f043 0204 	orr.w	r2, r3, #4
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fd5a 	bl	8005ae4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <__NVIC_SetPriorityGrouping+0x44>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006068:	4013      	ands	r3, r2
 800606a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800607c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800607e:	4a04      	ldr	r2, [pc, #16]	@ (8006090 <__NVIC_SetPriorityGrouping+0x44>)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	60d3      	str	r3, [r2, #12]
}
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	e000ed00 	.word	0xe000ed00

08006094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006098:	4b04      	ldr	r3, [pc, #16]	@ (80060ac <__NVIC_GetPriorityGrouping+0x18>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	f003 0307 	and.w	r3, r3, #7
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	e000ed00 	.word	0xe000ed00

080060b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	db0b      	blt.n	80060da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	f003 021f 	and.w	r2, r3, #31
 80060c8:	4907      	ldr	r1, [pc, #28]	@ (80060e8 <__NVIC_EnableIRQ+0x38>)
 80060ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	2001      	movs	r0, #1
 80060d2:	fa00 f202 	lsl.w	r2, r0, r2
 80060d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	e000e100 	.word	0xe000e100

080060ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	db0a      	blt.n	8006116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	b2da      	uxtb	r2, r3
 8006104:	490c      	ldr	r1, [pc, #48]	@ (8006138 <__NVIC_SetPriority+0x4c>)
 8006106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610a:	0112      	lsls	r2, r2, #4
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	440b      	add	r3, r1
 8006110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006114:	e00a      	b.n	800612c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	b2da      	uxtb	r2, r3
 800611a:	4908      	ldr	r1, [pc, #32]	@ (800613c <__NVIC_SetPriority+0x50>)
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	3b04      	subs	r3, #4
 8006124:	0112      	lsls	r2, r2, #4
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	440b      	add	r3, r1
 800612a:	761a      	strb	r2, [r3, #24]
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	e000e100 	.word	0xe000e100
 800613c:	e000ed00 	.word	0xe000ed00

08006140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006140:	b480      	push	{r7}
 8006142:	b089      	sub	sp, #36	@ 0x24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f1c3 0307 	rsb	r3, r3, #7
 800615a:	2b04      	cmp	r3, #4
 800615c:	bf28      	it	cs
 800615e:	2304      	movcs	r3, #4
 8006160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3304      	adds	r3, #4
 8006166:	2b06      	cmp	r3, #6
 8006168:	d902      	bls.n	8006170 <NVIC_EncodePriority+0x30>
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3b03      	subs	r3, #3
 800616e:	e000      	b.n	8006172 <NVIC_EncodePriority+0x32>
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	43da      	mvns	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	401a      	ands	r2, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	fa01 f303 	lsl.w	r3, r1, r3
 8006192:	43d9      	mvns	r1, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006198:	4313      	orrs	r3, r2
         );
}
 800619a:	4618      	mov	r0, r3
 800619c:	3724      	adds	r7, #36	@ 0x24
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b8:	d301      	bcc.n	80061be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ba:	2301      	movs	r3, #1
 80061bc:	e00f      	b.n	80061de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061be:	4a0a      	ldr	r2, [pc, #40]	@ (80061e8 <SysTick_Config+0x40>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061c6:	210f      	movs	r1, #15
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061cc:	f7ff ff8e 	bl	80060ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <SysTick_Config+0x40>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061d6:	4b04      	ldr	r3, [pc, #16]	@ (80061e8 <SysTick_Config+0x40>)
 80061d8:	2207      	movs	r2, #7
 80061da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	e000e010 	.word	0xe000e010

080061ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff ff29 	bl	800604c <__NVIC_SetPriorityGrouping>
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	4603      	mov	r3, r0
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006214:	f7ff ff3e 	bl	8006094 <__NVIC_GetPriorityGrouping>
 8006218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	6978      	ldr	r0, [r7, #20]
 8006220:	f7ff ff8e 	bl	8006140 <NVIC_EncodePriority>
 8006224:	4602      	mov	r2, r0
 8006226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622a:	4611      	mov	r1, r2
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ff5d 	bl	80060ec <__NVIC_SetPriority>
}
 8006232:	bf00      	nop
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	4603      	mov	r3, r0
 8006242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff ff31 	bl	80060b0 <__NVIC_EnableIRQ>
}
 800624e:	bf00      	nop
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff ffa2 	bl	80061a8 <SysTick_Config>
 8006264:	4603      	mov	r3, r0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800627c:	f7ff f9aa 	bl	80055d4 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e099      	b.n	80063c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ac:	e00f      	b.n	80062ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062ae:	f7ff f991 	bl	80055d4 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b05      	cmp	r3, #5
 80062ba:	d908      	bls.n	80062ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2203      	movs	r2, #3
 80062c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e078      	b.n	80063c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e8      	bne.n	80062ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4b38      	ldr	r3, [pc, #224]	@ (80063c8 <HAL_DMA_Init+0x158>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	2b04      	cmp	r3, #4
 8006326:	d107      	bne.n	8006338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006330:	4313      	orrs	r3, r2
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f023 0307 	bic.w	r3, r3, #7
 800634e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	2b04      	cmp	r3, #4
 8006360:	d117      	bne.n	8006392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00e      	beq.n	8006392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa6f 	bl	8006858 <DMA_CheckFifoParam>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2240      	movs	r2, #64	@ 0x40
 8006384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800638e:	2301      	movs	r3, #1
 8006390:	e016      	b.n	80063c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa26 	bl	80067ec <DMA_CalcBaseAndBitshift>
 80063a0:	4603      	mov	r3, r0
 80063a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a8:	223f      	movs	r2, #63	@ 0x3f
 80063aa:	409a      	lsls	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	f010803f 	.word	0xf010803f

080063cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_DMA_Start_IT+0x26>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e040      	b.n	8006474 <HAL_DMA_Start_IT+0xa8>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d12f      	bne.n	8006466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f9b8 	bl	8006790 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006424:	223f      	movs	r2, #63	@ 0x3f
 8006426:	409a      	lsls	r2, r3
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0216 	orr.w	r2, r2, #22
 800643a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0208 	orr.w	r2, r2, #8
 8006452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	e005      	b.n	8006472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800646e:	2302      	movs	r3, #2
 8006470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006488:	4b8e      	ldr	r3, [pc, #568]	@ (80066c4 <HAL_DMA_IRQHandler+0x248>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a8e      	ldr	r2, [pc, #568]	@ (80066c8 <HAL_DMA_IRQHandler+0x24c>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	0a9b      	lsrs	r3, r3, #10
 8006494:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a6:	2208      	movs	r2, #8
 80064a8:	409a      	lsls	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01a      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0204 	bic.w	r2, r2, #4
 80064ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d4:	2208      	movs	r2, #8
 80064d6:	409a      	lsls	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e0:	f043 0201 	orr.w	r2, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ec:	2201      	movs	r2, #1
 80064ee:	409a      	lsls	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d012      	beq.n	800651e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800650a:	2201      	movs	r2, #1
 800650c:	409a      	lsls	r2, r3
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006516:	f043 0202 	orr.w	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006522:	2204      	movs	r2, #4
 8006524:	409a      	lsls	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d012      	beq.n	8006554 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006540:	2204      	movs	r2, #4
 8006542:	409a      	lsls	r2, r3
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654c:	f043 0204 	orr.w	r2, r3, #4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006558:	2210      	movs	r2, #16
 800655a:	409a      	lsls	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4013      	ands	r3, r2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d043      	beq.n	80065ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d03c      	beq.n	80065ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006576:	2210      	movs	r2, #16
 8006578:	409a      	lsls	r2, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d018      	beq.n	80065be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d024      	beq.n	80065ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
 80065aa:	e01f      	b.n	80065ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01b      	beq.n	80065ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	e016      	b.n	80065ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d107      	bne.n	80065dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0208 	bic.w	r2, r2, #8
 80065da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f0:	2220      	movs	r2, #32
 80065f2:	409a      	lsls	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 808f 	beq.w	800671c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0310 	and.w	r3, r3, #16
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8087 	beq.w	800671c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006612:	2220      	movs	r2, #32
 8006614:	409a      	lsls	r2, r3
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b05      	cmp	r3, #5
 8006624:	d136      	bne.n	8006694 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0216 	bic.w	r2, r2, #22
 8006634:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006644:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <HAL_DMA_IRQHandler+0x1da>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0208 	bic.w	r2, r2, #8
 8006664:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666a:	223f      	movs	r2, #63	@ 0x3f
 800666c:	409a      	lsls	r2, r3
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006686:	2b00      	cmp	r3, #0
 8006688:	d07e      	beq.n	8006788 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
        }
        return;
 8006692:	e079      	b.n	8006788 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01d      	beq.n	80066de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10d      	bne.n	80066cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d031      	beq.n	800671c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
 80066c0:	e02c      	b.n	800671c <HAL_DMA_IRQHandler+0x2a0>
 80066c2:	bf00      	nop
 80066c4:	20000000 	.word	0x20000000
 80066c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d023      	beq.n	800671c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
 80066dc:	e01e      	b.n	800671c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10f      	bne.n	800670c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0210 	bic.w	r2, r2, #16
 80066fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006720:	2b00      	cmp	r3, #0
 8006722:	d032      	beq.n	800678a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d022      	beq.n	8006776 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2205      	movs	r2, #5
 8006734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	3301      	adds	r3, #1
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	429a      	cmp	r2, r3
 8006752:	d307      	bcc.n	8006764 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f2      	bne.n	8006748 <HAL_DMA_IRQHandler+0x2cc>
 8006762:	e000      	b.n	8006766 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006764:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d005      	beq.n	800678a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
 8006786:	e000      	b.n	800678a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006788:	bf00      	nop
    }
  }
}
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b40      	cmp	r3, #64	@ 0x40
 80067bc:	d108      	bne.n	80067d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067ce:	e007      	b.n	80067e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
}
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	3b10      	subs	r3, #16
 80067fc:	4a14      	ldr	r2, [pc, #80]	@ (8006850 <DMA_CalcBaseAndBitshift+0x64>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006806:	4a13      	ldr	r2, [pc, #76]	@ (8006854 <DMA_CalcBaseAndBitshift+0x68>)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b03      	cmp	r3, #3
 8006818:	d909      	bls.n	800682e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	1d1a      	adds	r2, r3, #4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	659a      	str	r2, [r3, #88]	@ 0x58
 800682c:	e007      	b.n	800683e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	aaaaaaab 	.word	0xaaaaaaab
 8006854:	0801457c 	.word	0x0801457c

08006858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d11f      	bne.n	80068b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b03      	cmp	r3, #3
 8006876:	d856      	bhi.n	8006926 <DMA_CheckFifoParam+0xce>
 8006878:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <DMA_CheckFifoParam+0x28>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	08006891 	.word	0x08006891
 8006884:	080068a3 	.word	0x080068a3
 8006888:	08006891 	.word	0x08006891
 800688c:	08006927 	.word	0x08006927
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d046      	beq.n	800692a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068a0:	e043      	b.n	800692a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068aa:	d140      	bne.n	800692e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b0:	e03d      	b.n	800692e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ba:	d121      	bne.n	8006900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d837      	bhi.n	8006932 <DMA_CheckFifoParam+0xda>
 80068c2:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <DMA_CheckFifoParam+0x70>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068d9 	.word	0x080068d9
 80068cc:	080068df 	.word	0x080068df
 80068d0:	080068d9 	.word	0x080068d9
 80068d4:	080068f1 	.word	0x080068f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
      break;
 80068dc:	e030      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d025      	beq.n	8006936 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ee:	e022      	b.n	8006936 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068f8:	d11f      	bne.n	800693a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068fe:	e01c      	b.n	800693a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d903      	bls.n	800690e <DMA_CheckFifoParam+0xb6>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b03      	cmp	r3, #3
 800690a:	d003      	beq.n	8006914 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800690c:	e018      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
      break;
 8006912:	e015      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00e      	beq.n	800693e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
      break;
 8006924:	e00b      	b.n	800693e <DMA_CheckFifoParam+0xe6>
      break;
 8006926:	bf00      	nop
 8006928:	e00a      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      break;
 800692a:	bf00      	nop
 800692c:	e008      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      break;
 800692e:	bf00      	nop
 8006930:	e006      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      break;
 8006932:	bf00      	nop
 8006934:	e004      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      break;
 8006936:	bf00      	nop
 8006938:	e002      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      break;   
 800693a:	bf00      	nop
 800693c:	e000      	b.n	8006940 <DMA_CheckFifoParam+0xe8>
      break;
 800693e:	bf00      	nop
    }
  } 
  
  return status; 
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop

08006950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006950:	b480      	push	{r7}
 8006952:	b089      	sub	sp, #36	@ 0x24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	e159      	b.n	8006c20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800696c:	2201      	movs	r2, #1
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4013      	ands	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	429a      	cmp	r2, r3
 8006986:	f040 8148 	bne.w	8006c1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b01      	cmp	r3, #1
 8006994:	d005      	beq.n	80069a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d130      	bne.n	8006a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	2203      	movs	r2, #3
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4013      	ands	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069d8:	2201      	movs	r2, #1
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	43db      	mvns	r3, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	4013      	ands	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 0201 	and.w	r2, r3, #1
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d017      	beq.n	8006a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	43db      	mvns	r3, r3
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	4013      	ands	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d123      	bne.n	8006a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	08da      	lsrs	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3208      	adds	r2, #8
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	220f      	movs	r2, #15
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	08da      	lsrs	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3208      	adds	r2, #8
 8006a8e:	69b9      	ldr	r1, [r7, #24]
 8006a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 0203 	and.w	r2, r3, #3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80a2 	beq.w	8006c1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	4b57      	ldr	r3, [pc, #348]	@ (8006c38 <HAL_GPIO_Init+0x2e8>)
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ade:	4a56      	ldr	r2, [pc, #344]	@ (8006c38 <HAL_GPIO_Init+0x2e8>)
 8006ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ae6:	4b54      	ldr	r3, [pc, #336]	@ (8006c38 <HAL_GPIO_Init+0x2e8>)
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006af2:	4a52      	ldr	r2, [pc, #328]	@ (8006c3c <HAL_GPIO_Init+0x2ec>)
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	089b      	lsrs	r3, r3, #2
 8006af8:	3302      	adds	r3, #2
 8006afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	220f      	movs	r2, #15
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	4013      	ands	r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a49      	ldr	r2, [pc, #292]	@ (8006c40 <HAL_GPIO_Init+0x2f0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d019      	beq.n	8006b52 <HAL_GPIO_Init+0x202>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a48      	ldr	r2, [pc, #288]	@ (8006c44 <HAL_GPIO_Init+0x2f4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_GPIO_Init+0x1fe>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a47      	ldr	r2, [pc, #284]	@ (8006c48 <HAL_GPIO_Init+0x2f8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00d      	beq.n	8006b4a <HAL_GPIO_Init+0x1fa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a46      	ldr	r2, [pc, #280]	@ (8006c4c <HAL_GPIO_Init+0x2fc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d007      	beq.n	8006b46 <HAL_GPIO_Init+0x1f6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a45      	ldr	r2, [pc, #276]	@ (8006c50 <HAL_GPIO_Init+0x300>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d101      	bne.n	8006b42 <HAL_GPIO_Init+0x1f2>
 8006b3e:	2304      	movs	r3, #4
 8006b40:	e008      	b.n	8006b54 <HAL_GPIO_Init+0x204>
 8006b42:	2307      	movs	r3, #7
 8006b44:	e006      	b.n	8006b54 <HAL_GPIO_Init+0x204>
 8006b46:	2303      	movs	r3, #3
 8006b48:	e004      	b.n	8006b54 <HAL_GPIO_Init+0x204>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e002      	b.n	8006b54 <HAL_GPIO_Init+0x204>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <HAL_GPIO_Init+0x204>
 8006b52:	2300      	movs	r3, #0
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	f002 0203 	and.w	r2, r2, #3
 8006b5a:	0092      	lsls	r2, r2, #2
 8006b5c:	4093      	lsls	r3, r2
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b64:	4935      	ldr	r1, [pc, #212]	@ (8006c3c <HAL_GPIO_Init+0x2ec>)
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b72:	4b38      	ldr	r3, [pc, #224]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b96:	4a2f      	ldr	r2, [pc, #188]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bc0:	4a24      	ldr	r2, [pc, #144]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bc6:	4b23      	ldr	r3, [pc, #140]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bea:	4a1a      	ldr	r2, [pc, #104]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bf0:	4b18      	ldr	r3, [pc, #96]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c14:	4a0f      	ldr	r2, [pc, #60]	@ (8006c54 <HAL_GPIO_Init+0x304>)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	2b0f      	cmp	r3, #15
 8006c24:	f67f aea2 	bls.w	800696c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	3724      	adds	r7, #36	@ 0x24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	40013800 	.word	0x40013800
 8006c40:	40020000 	.word	0x40020000
 8006c44:	40020400 	.word	0x40020400
 8006c48:	40020800 	.word	0x40020800
 8006c4c:	40020c00 	.word	0x40020c00
 8006c50:	40021000 	.word	0x40021000
 8006c54:	40013c00 	.word	0x40013c00

08006c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	887b      	ldrh	r3, [r7, #2]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
 8006c74:	e001      	b.n	8006c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c92:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c94:	695a      	ldr	r2, [r3, #20]
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d006      	beq.n	8006cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c9e:	4a05      	ldr	r2, [pc, #20]	@ (8006cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ca0:	88fb      	ldrh	r3, [r7, #6]
 8006ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fb fa9c 	bl	80021e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40013c00 	.word	0x40013c00

08006cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e12b      	b.n	8006f22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fa fcdc 	bl	800169c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2224      	movs	r2, #36	@ 0x24
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d1c:	f003 f920 	bl	8009f60 <HAL_RCC_GetPCLK1Freq>
 8006d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4a81      	ldr	r2, [pc, #516]	@ (8006f2c <HAL_I2C_Init+0x274>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d807      	bhi.n	8006d3c <HAL_I2C_Init+0x84>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4a80      	ldr	r2, [pc, #512]	@ (8006f30 <HAL_I2C_Init+0x278>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bf94      	ite	ls
 8006d34:	2301      	movls	r3, #1
 8006d36:	2300      	movhi	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	e006      	b.n	8006d4a <HAL_I2C_Init+0x92>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a7d      	ldr	r2, [pc, #500]	@ (8006f34 <HAL_I2C_Init+0x27c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bf94      	ite	ls
 8006d44:	2301      	movls	r3, #1
 8006d46:	2300      	movhi	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e0e7      	b.n	8006f22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a78      	ldr	r2, [pc, #480]	@ (8006f38 <HAL_I2C_Init+0x280>)
 8006d56:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5a:	0c9b      	lsrs	r3, r3, #18
 8006d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a6a      	ldr	r2, [pc, #424]	@ (8006f2c <HAL_I2C_Init+0x274>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d802      	bhi.n	8006d8c <HAL_I2C_Init+0xd4>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	e009      	b.n	8006da0 <HAL_I2C_Init+0xe8>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	4a69      	ldr	r2, [pc, #420]	@ (8006f3c <HAL_I2C_Init+0x284>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	099b      	lsrs	r3, r3, #6
 8006d9e:	3301      	adds	r3, #1
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006db2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	495c      	ldr	r1, [pc, #368]	@ (8006f2c <HAL_I2C_Init+0x274>)
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	d819      	bhi.n	8006df4 <HAL_I2C_Init+0x13c>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1e59      	subs	r1, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dce:	1c59      	adds	r1, r3, #1
 8006dd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006dd4:	400b      	ands	r3, r1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <HAL_I2C_Init+0x138>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1e59      	subs	r1, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006de8:	3301      	adds	r3, #1
 8006dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dee:	e051      	b.n	8006e94 <HAL_I2C_Init+0x1dc>
 8006df0:	2304      	movs	r3, #4
 8006df2:	e04f      	b.n	8006e94 <HAL_I2C_Init+0x1dc>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d111      	bne.n	8006e20 <HAL_I2C_Init+0x168>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	1e58      	subs	r0, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6859      	ldr	r1, [r3, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	440b      	add	r3, r1
 8006e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e0e:	3301      	adds	r3, #1
 8006e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bf0c      	ite	eq
 8006e18:	2301      	moveq	r3, #1
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	e012      	b.n	8006e46 <HAL_I2C_Init+0x18e>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1e58      	subs	r0, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6859      	ldr	r1, [r3, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	0099      	lsls	r1, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e36:	3301      	adds	r3, #1
 8006e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bf0c      	ite	eq
 8006e40:	2301      	moveq	r3, #1
 8006e42:	2300      	movne	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <HAL_I2C_Init+0x196>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e022      	b.n	8006e94 <HAL_I2C_Init+0x1dc>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10e      	bne.n	8006e74 <HAL_I2C_Init+0x1bc>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	1e58      	subs	r0, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6859      	ldr	r1, [r3, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	440b      	add	r3, r1
 8006e64:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e72:	e00f      	b.n	8006e94 <HAL_I2C_Init+0x1dc>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	1e58      	subs	r0, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6859      	ldr	r1, [r3, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	0099      	lsls	r1, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	6809      	ldr	r1, [r1, #0]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69da      	ldr	r2, [r3, #28]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006ec2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6911      	ldr	r1, [r2, #16]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68d2      	ldr	r2, [r2, #12]
 8006ece:	4311      	orrs	r1, r2
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	000186a0 	.word	0x000186a0
 8006f30:	001e847f 	.word	0x001e847f
 8006f34:	003d08ff 	.word	0x003d08ff
 8006f38:	431bde83 	.word	0x431bde83
 8006f3c:	10624dd3 	.word	0x10624dd3

08006f40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	817b      	strh	r3, [r7, #10]
 8006f50:	4613      	mov	r3, r2
 8006f52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f54:	f7fe fb3e 	bl	80055d4 <HAL_GetTick>
 8006f58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	f040 80e0 	bne.w	8007128 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2319      	movs	r3, #25
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4970      	ldr	r1, [pc, #448]	@ (8007134 <HAL_I2C_Master_Transmit+0x1f4>)
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 ff3c 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0d3      	b.n	800712a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_I2C_Master_Transmit+0x50>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e0cc      	b.n	800712a <HAL_I2C_Master_Transmit+0x1ea>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d007      	beq.n	8006fb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2221      	movs	r2, #33	@ 0x21
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	893a      	ldrh	r2, [r7, #8]
 8006fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4a50      	ldr	r2, [pc, #320]	@ (8007138 <HAL_I2C_Master_Transmit+0x1f8>)
 8006ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ff8:	8979      	ldrh	r1, [r7, #10]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	6a3a      	ldr	r2, [r7, #32]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fcf6 	bl	80079f0 <I2C_MasterRequestWrite>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e08d      	b.n	800712a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007024:	e066      	b.n	80070f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	6a39      	ldr	r1, [r7, #32]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 fffa 	bl	8008024 <I2C_WaitOnTXEFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	2b04      	cmp	r3, #4
 800703c:	d107      	bne.n	800704e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800704c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e06b      	b.n	800712a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b04      	cmp	r3, #4
 800708e:	d11b      	bne.n	80070c8 <HAL_I2C_Master_Transmit+0x188>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007094:	2b00      	cmp	r3, #0
 8007096:	d017      	beq.n	80070c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	781a      	ldrb	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	6a39      	ldr	r1, [r7, #32]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fff1 	bl	80080b4 <I2C_WaitOnBTFFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d107      	bne.n	80070f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e01a      	b.n	800712a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d194      	bne.n	8007026 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800710a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	00100002 	.word	0x00100002
 8007138:	ffff0000 	.word	0xffff0000

0800713c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af02      	add	r7, sp, #8
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4603      	mov	r3, r0
 800714c:	817b      	strh	r3, [r7, #10]
 800714e:	460b      	mov	r3, r1
 8007150:	813b      	strh	r3, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007156:	f7fe fa3d 	bl	80055d4 <HAL_GetTick>
 800715a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b20      	cmp	r3, #32
 8007166:	f040 80d9 	bne.w	800731c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	2319      	movs	r3, #25
 8007170:	2201      	movs	r2, #1
 8007172:	496d      	ldr	r1, [pc, #436]	@ (8007328 <HAL_I2C_Mem_Write+0x1ec>)
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fe3b 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007180:	2302      	movs	r3, #2
 8007182:	e0cc      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_I2C_Mem_Write+0x56>
 800718e:	2302      	movs	r3, #2
 8007190:	e0c5      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d007      	beq.n	80071b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2221      	movs	r2, #33	@ 0x21
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2240      	movs	r2, #64	@ 0x40
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a3a      	ldr	r2, [r7, #32]
 80071e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4a4d      	ldr	r2, [pc, #308]	@ (800732c <HAL_I2C_Mem_Write+0x1f0>)
 80071f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071fa:	88f8      	ldrh	r0, [r7, #6]
 80071fc:	893a      	ldrh	r2, [r7, #8]
 80071fe:	8979      	ldrh	r1, [r7, #10]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4603      	mov	r3, r0
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fc72 	bl	8007af4 <I2C_RequestMemoryWrite>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d052      	beq.n	80072bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e081      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 ff00 	bl	8008024 <I2C_WaitOnTXEFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	2b04      	cmp	r3, #4
 8007230:	d107      	bne.n	8007242 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e06b      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b04      	cmp	r3, #4
 8007282:	d11b      	bne.n	80072bc <HAL_I2C_Mem_Write+0x180>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	d017      	beq.n	80072bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1aa      	bne.n	800721a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fef3 	bl	80080b4 <I2C_WaitOnBTFFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d107      	bne.n	80072ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e016      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	00100002 	.word	0x00100002
 800732c:	ffff0000 	.word	0xffff0000

08007330 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08c      	sub	sp, #48	@ 0x30
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	4603      	mov	r3, r0
 8007340:	817b      	strh	r3, [r7, #10]
 8007342:	460b      	mov	r3, r1
 8007344:	813b      	strh	r3, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800734a:	f7fe f943 	bl	80055d4 <HAL_GetTick>
 800734e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b20      	cmp	r3, #32
 800735a:	f040 8214 	bne.w	8007786 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	2319      	movs	r3, #25
 8007364:	2201      	movs	r2, #1
 8007366:	497b      	ldr	r1, [pc, #492]	@ (8007554 <HAL_I2C_Mem_Read+0x224>)
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fd41 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007374:	2302      	movs	r3, #2
 8007376:	e207      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_I2C_Mem_Read+0x56>
 8007382:	2302      	movs	r3, #2
 8007384:	e200      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b01      	cmp	r3, #1
 800739a:	d007      	beq.n	80073ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2222      	movs	r2, #34	@ 0x22
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2240      	movs	r2, #64	@ 0x40
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80073dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a5b      	ldr	r2, [pc, #364]	@ (8007558 <HAL_I2C_Mem_Read+0x228>)
 80073ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073ee:	88f8      	ldrh	r0, [r7, #6]
 80073f0:	893a      	ldrh	r2, [r7, #8]
 80073f2:	8979      	ldrh	r1, [r7, #10]
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	4603      	mov	r3, r0
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fc0e 	bl	8007c20 <I2C_RequestMemoryRead>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e1bc      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d113      	bne.n	800743e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007416:	2300      	movs	r3, #0
 8007418:	623b      	str	r3, [r7, #32]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	623b      	str	r3, [r7, #32]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	623b      	str	r3, [r7, #32]
 800742a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	e190      	b.n	8007760 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007442:	2b01      	cmp	r3, #1
 8007444:	d11b      	bne.n	800747e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e170      	b.n	8007760 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007482:	2b02      	cmp	r3, #2
 8007484:	d11b      	bne.n	80074be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007494:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a6:	2300      	movs	r3, #0
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	e150      	b.n	8007760 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80074d4:	e144      	b.n	8007760 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074da:	2b03      	cmp	r3, #3
 80074dc:	f200 80f1 	bhi.w	80076c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d123      	bne.n	8007530 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fe29 	bl	8008144 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e145      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800752e:	e117      	b.n	8007760 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007534:	2b02      	cmp	r3, #2
 8007536:	d14e      	bne.n	80075d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	2200      	movs	r2, #0
 8007540:	4906      	ldr	r1, [pc, #24]	@ (800755c <HAL_I2C_Mem_Read+0x22c>)
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fc54 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d008      	beq.n	8007560 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e11a      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
 8007552:	bf00      	nop
 8007554:	00100002 	.word	0x00100002
 8007558:	ffff0000 	.word	0xffff0000
 800755c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800756e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691a      	ldr	r2, [r3, #16]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075d4:	e0c4      	b.n	8007760 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075dc:	2200      	movs	r2, #0
 80075de:	496c      	ldr	r1, [pc, #432]	@ (8007790 <HAL_I2C_Mem_Read+0x460>)
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fc05 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0cb      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691a      	ldr	r2, [r3, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007638:	2200      	movs	r2, #0
 800763a:	4955      	ldr	r1, [pc, #340]	@ (8007790 <HAL_I2C_Mem_Read+0x460>)
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fbd7 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e09d      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800765a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076c0:	e04e      	b.n	8007760 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fd3c 	bl	8008144 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e058      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b04      	cmp	r3, #4
 8007714:	d124      	bne.n	8007760 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800771a:	2b03      	cmp	r3, #3
 800771c:	d107      	bne.n	800772e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800772c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007764:	2b00      	cmp	r3, #0
 8007766:	f47f aeb6 	bne.w	80074d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3728      	adds	r7, #40	@ 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	00010004 	.word	0x00010004

08007794 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	@ 0x28
 8007798:	af02      	add	r7, sp, #8
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	607a      	str	r2, [r7, #4]
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	460b      	mov	r3, r1
 80077a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80077a4:	f7fd ff16 	bl	80055d4 <HAL_GetTick>
 80077a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	f040 8111 	bne.w	80079de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	2319      	movs	r3, #25
 80077c2:	2201      	movs	r2, #1
 80077c4:	4988      	ldr	r1, [pc, #544]	@ (80079e8 <HAL_I2C_IsDeviceReady+0x254>)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 fb12 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
 80077d4:	e104      	b.n	80079e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_I2C_IsDeviceReady+0x50>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e0fd      	b.n	80079e0 <HAL_I2C_IsDeviceReady+0x24c>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d007      	beq.n	800780a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0201 	orr.w	r2, r2, #1
 8007808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2224      	movs	r2, #36	@ 0x24
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a70      	ldr	r2, [pc, #448]	@ (80079ec <HAL_I2C_IsDeviceReady+0x258>)
 800782c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800783c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2200      	movs	r2, #0
 8007846:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fad0 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007864:	d103      	bne.n	800786e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800786c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e0b6      	b.n	80079e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007872:	897b      	ldrh	r3, [r7, #10]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007880:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007882:	f7fd fea7 	bl	80055d4 <HAL_GetTick>
 8007886:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b02      	cmp	r3, #2
 8007894:	bf0c      	ite	eq
 8007896:	2301      	moveq	r3, #1
 8007898:	2300      	movne	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ac:	bf0c      	ite	eq
 80078ae:	2301      	moveq	r3, #1
 80078b0:	2300      	movne	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80078b6:	e025      	b.n	8007904 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078b8:	f7fd fe8c 	bl	80055d4 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d302      	bcc.n	80078ce <HAL_I2C_IsDeviceReady+0x13a>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	22a0      	movs	r2, #160	@ 0xa0
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	bf0c      	ite	eq
 80078e4:	2301      	moveq	r3, #1
 80078e6:	2300      	movne	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078fa:	bf0c      	ite	eq
 80078fc:	2301      	moveq	r3, #1
 80078fe:	2300      	movne	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2ba0      	cmp	r3, #160	@ 0xa0
 800790e:	d005      	beq.n	800791c <HAL_I2C_IsDeviceReady+0x188>
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <HAL_I2C_IsDeviceReady+0x188>
 8007916:	7dbb      	ldrb	r3, [r7, #22]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0cd      	beq.n	80078b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b02      	cmp	r3, #2
 8007930:	d129      	bne.n	8007986 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007940:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2319      	movs	r3, #25
 800795e:	2201      	movs	r2, #1
 8007960:	4921      	ldr	r1, [pc, #132]	@ (80079e8 <HAL_I2C_IsDeviceReady+0x254>)
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fa44 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e036      	b.n	80079e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	e02c      	b.n	80079e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007994:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800799e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	2319      	movs	r3, #25
 80079a6:	2201      	movs	r2, #1
 80079a8:	490f      	ldr	r1, [pc, #60]	@ (80079e8 <HAL_I2C_IsDeviceReady+0x254>)
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fa20 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e012      	b.n	80079e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	3301      	adds	r3, #1
 80079be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	f4ff af32 	bcc.w	800782e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	00100002 	.word	0x00100002
 80079ec:	ffff0000 	.word	0xffff0000

080079f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	607a      	str	r2, [r7, #4]
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	460b      	mov	r3, r1
 80079fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d006      	beq.n	8007a1a <I2C_MasterRequestWrite+0x2a>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d003      	beq.n	8007a1a <I2C_MasterRequestWrite+0x2a>
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a18:	d108      	bne.n	8007a2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e00b      	b.n	8007a44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a30:	2b12      	cmp	r3, #18
 8007a32:	d107      	bne.n	8007a44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f9cd 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00d      	beq.n	8007a78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a6a:	d103      	bne.n	8007a74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e035      	b.n	8007ae4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a80:	d108      	bne.n	8007a94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a82:	897b      	ldrh	r3, [r7, #10]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007a90:	611a      	str	r2, [r3, #16]
 8007a92:	e01b      	b.n	8007acc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007a94:	897b      	ldrh	r3, [r7, #10]
 8007a96:	11db      	asrs	r3, r3, #7
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f003 0306 	and.w	r3, r3, #6
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f063 030f 	orn	r3, r3, #15
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	490e      	ldr	r1, [pc, #56]	@ (8007aec <I2C_MasterRequestWrite+0xfc>)
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fa16 	bl	8007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e010      	b.n	8007ae4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ac2:	897b      	ldrh	r3, [r7, #10]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4907      	ldr	r1, [pc, #28]	@ (8007af0 <I2C_MasterRequestWrite+0x100>)
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fa06 	bl	8007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	00010008 	.word	0x00010008
 8007af0:	00010002 	.word	0x00010002

08007af4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	461a      	mov	r2, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	817b      	strh	r3, [r7, #10]
 8007b06:	460b      	mov	r3, r1
 8007b08:	813b      	strh	r3, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f960 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00d      	beq.n	8007b52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b44:	d103      	bne.n	8007b4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e05f      	b.n	8007c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b52:	897b      	ldrh	r3, [r7, #10]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	6a3a      	ldr	r2, [r7, #32]
 8007b66:	492d      	ldr	r1, [pc, #180]	@ (8007c1c <I2C_RequestMemoryWrite+0x128>)
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 f9bb 	bl	8007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e04c      	b.n	8007c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b90:	6a39      	ldr	r1, [r7, #32]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fa46 	bl	8008024 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00d      	beq.n	8007bba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d107      	bne.n	8007bb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e02b      	b.n	8007c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d105      	bne.n	8007bcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bc0:	893b      	ldrh	r3, [r7, #8]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	611a      	str	r2, [r3, #16]
 8007bca:	e021      	b.n	8007c10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007bcc:	893b      	ldrh	r3, [r7, #8]
 8007bce:	0a1b      	lsrs	r3, r3, #8
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bdc:	6a39      	ldr	r1, [r7, #32]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fa20 	bl	8008024 <I2C_WaitOnTXEFlagUntilTimeout>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00d      	beq.n	8007c06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d107      	bne.n	8007c02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e005      	b.n	8007c12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c06:	893b      	ldrh	r3, [r7, #8]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	00010002 	.word	0x00010002

08007c20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4603      	mov	r3, r0
 8007c30:	817b      	strh	r3, [r7, #10]
 8007c32:	460b      	mov	r3, r1
 8007c34:	813b      	strh	r3, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f8c2 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c80:	d103      	bne.n	8007c8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e0aa      	b.n	8007de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c8e:	897b      	ldrh	r3, [r7, #10]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	461a      	mov	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	6a3a      	ldr	r2, [r7, #32]
 8007ca2:	4952      	ldr	r1, [pc, #328]	@ (8007dec <I2C_RequestMemoryRead+0x1cc>)
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f91d 	bl	8007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e097      	b.n	8007de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	617b      	str	r3, [r7, #20]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ccc:	6a39      	ldr	r1, [r7, #32]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f9a8 	bl	8008024 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00d      	beq.n	8007cf6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d107      	bne.n	8007cf2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e076      	b.n	8007de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d105      	bne.n	8007d08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cfc:	893b      	ldrh	r3, [r7, #8]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	611a      	str	r2, [r3, #16]
 8007d06:	e021      	b.n	8007d4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d08:	893b      	ldrh	r3, [r7, #8]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d18:	6a39      	ldr	r1, [r7, #32]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f982 	bl	8008024 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00d      	beq.n	8007d42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d107      	bne.n	8007d3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e050      	b.n	8007de4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d42:	893b      	ldrh	r3, [r7, #8]
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4e:	6a39      	ldr	r1, [r7, #32]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f967 	bl	8008024 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00d      	beq.n	8007d78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d107      	bne.n	8007d74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e035      	b.n	8007de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f82b 	bl	8007df0 <I2C_WaitOnFlagUntilTimeout>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00d      	beq.n	8007dbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dae:	d103      	bne.n	8007db8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007db6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e013      	b.n	8007de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007dbc:	897b      	ldrh	r3, [r7, #10]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f043 0301 	orr.w	r3, r3, #1
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	6a3a      	ldr	r2, [r7, #32]
 8007dd0:	4906      	ldr	r1, [pc, #24]	@ (8007dec <I2C_RequestMemoryRead+0x1cc>)
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f886 	bl	8007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	00010002 	.word	0x00010002

08007df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e00:	e048      	b.n	8007e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e08:	d044      	beq.n	8007e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0a:	f7fd fbe3 	bl	80055d4 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d302      	bcc.n	8007e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d139      	bne.n	8007e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	0c1b      	lsrs	r3, r3, #16
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d10d      	bne.n	8007e46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	43da      	mvns	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	4013      	ands	r3, r2
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf0c      	ite	eq
 8007e3c:	2301      	moveq	r3, #1
 8007e3e:	2300      	movne	r3, #0
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	e00c      	b.n	8007e60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	43da      	mvns	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	4013      	ands	r3, r2
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d116      	bne.n	8007e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e80:	f043 0220 	orr.w	r2, r3, #32
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e023      	b.n	8007edc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d10d      	bne.n	8007eba <I2C_WaitOnFlagUntilTimeout+0xca>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	43da      	mvns	r2, r3
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bf0c      	ite	eq
 8007eb0:	2301      	moveq	r3, #1
 8007eb2:	2300      	movne	r3, #0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	e00c      	b.n	8007ed4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	43da      	mvns	r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bf0c      	ite	eq
 8007ecc:	2301      	moveq	r3, #1
 8007ece:	2300      	movne	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d093      	beq.n	8007e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ef2:	e071      	b.n	8007fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f02:	d123      	bne.n	8007f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	f043 0204 	orr.w	r2, r3, #4
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e067      	b.n	800801c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f52:	d041      	beq.n	8007fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f54:	f7fd fb3e 	bl	80055d4 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d302      	bcc.n	8007f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d136      	bne.n	8007fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d10c      	bne.n	8007f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	43da      	mvns	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bf14      	ite	ne
 8007f86:	2301      	movne	r3, #1
 8007f88:	2300      	moveq	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	e00b      	b.n	8007fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	43da      	mvns	r2, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	f043 0220 	orr.w	r2, r3, #32
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e021      	b.n	800801c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	0c1b      	lsrs	r3, r3, #16
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d10c      	bne.n	8007ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	43da      	mvns	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	4013      	ands	r3, r2
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	bf14      	ite	ne
 8007ff4:	2301      	movne	r3, #1
 8007ff6:	2300      	moveq	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	e00b      	b.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	43da      	mvns	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	4013      	ands	r3, r2
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf14      	ite	ne
 800800e:	2301      	movne	r3, #1
 8008010:	2300      	moveq	r3, #0
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f af6d 	bne.w	8007ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008030:	e034      	b.n	800809c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f8e3 	bl	80081fe <I2C_IsAcknowledgeFailed>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e034      	b.n	80080ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008048:	d028      	beq.n	800809c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804a:	f7fd fac3 	bl	80055d4 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	429a      	cmp	r2, r3
 8008058:	d302      	bcc.n	8008060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11d      	bne.n	800809c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806a:	2b80      	cmp	r3, #128	@ 0x80
 800806c:	d016      	beq.n	800809c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008088:	f043 0220 	orr.w	r2, r3, #32
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e007      	b.n	80080ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a6:	2b80      	cmp	r3, #128	@ 0x80
 80080a8:	d1c3      	bne.n	8008032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080c0:	e034      	b.n	800812c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f89b 	bl	80081fe <I2C_IsAcknowledgeFailed>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e034      	b.n	800813c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080d8:	d028      	beq.n	800812c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080da:	f7fd fa7b 	bl	80055d4 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d302      	bcc.n	80080f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11d      	bne.n	800812c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d016      	beq.n	800812c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008118:	f043 0220 	orr.w	r2, r3, #32
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e007      	b.n	800813c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b04      	cmp	r3, #4
 8008138:	d1c3      	bne.n	80080c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008150:	e049      	b.n	80081e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b10      	cmp	r3, #16
 800815e:	d119      	bne.n	8008194 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0210 	mvn.w	r2, #16
 8008168:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e030      	b.n	80081f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008194:	f7fd fa1e 	bl	80055d4 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d302      	bcc.n	80081aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d11d      	bne.n	80081e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b4:	2b40      	cmp	r3, #64	@ 0x40
 80081b6:	d016      	beq.n	80081e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d2:	f043 0220 	orr.w	r2, r3, #32
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e007      	b.n	80081f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f0:	2b40      	cmp	r3, #64	@ 0x40
 80081f2:	d1ae      	bne.n	8008152 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008214:	d11b      	bne.n	800824e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800821e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823a:	f043 0204 	orr.w	r2, r3, #4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e101      	b.n	8008472 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f006 f837 	bl	800e2fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2203      	movs	r2, #3
 8008292:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800829c:	d102      	bne.n	80082a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f002 fbc0 	bl	800aa2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7c1a      	ldrb	r2, [r3, #16]
 80082b6:	f88d 2000 	strb.w	r2, [sp]
 80082ba:	3304      	adds	r3, #4
 80082bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082be:	f002 fa9f 	bl	800a800 <USB_CoreInit>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0ce      	b.n	8008472 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f002 fbb8 	bl	800aa50 <USB_SetCurrentMode>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2202      	movs	r2, #2
 80082ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e0bf      	b.n	8008472 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	e04a      	b.n	800838e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80082f8:	7bfa      	ldrb	r2, [r7, #15]
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	3315      	adds	r3, #21
 8008308:	2201      	movs	r2, #1
 800830a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800830c:	7bfa      	ldrb	r2, [r7, #15]
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	4613      	mov	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	3314      	adds	r3, #20
 800831c:	7bfa      	ldrb	r2, [r7, #15]
 800831e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008320:	7bfa      	ldrb	r2, [r7, #15]
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	b298      	uxth	r0, r3
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	332e      	adds	r3, #46	@ 0x2e
 8008334:	4602      	mov	r2, r0
 8008336:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008338:	7bfa      	ldrb	r2, [r7, #15]
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	440b      	add	r3, r1
 8008346:	3318      	adds	r3, #24
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800834c:	7bfa      	ldrb	r2, [r7, #15]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	331c      	adds	r3, #28
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008360:	7bfa      	ldrb	r2, [r7, #15]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	3320      	adds	r3, #32
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008374:	7bfa      	ldrb	r2, [r7, #15]
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	3324      	adds	r3, #36	@ 0x24
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	3301      	adds	r3, #1
 800838c:	73fb      	strb	r3, [r7, #15]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	791b      	ldrb	r3, [r3, #4]
 8008392:	7bfa      	ldrb	r2, [r7, #15]
 8008394:	429a      	cmp	r2, r3
 8008396:	d3af      	bcc.n	80082f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
 800839c:	e044      	b.n	8008428 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800839e:	7bfa      	ldrb	r2, [r7, #15]
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80083b4:	7bfa      	ldrb	r2, [r7, #15]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80083c6:	7bfa      	ldrb	r2, [r7, #15]
 80083c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80083ca:	7bfa      	ldrb	r2, [r7, #15]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80083e0:	7bfa      	ldrb	r2, [r7, #15]
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80083f6:	7bfa      	ldrb	r2, [r7, #15]
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	440b      	add	r3, r1
 8008404:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800840c:	7bfa      	ldrb	r2, [r7, #15]
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4613      	mov	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	440b      	add	r3, r1
 800841a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	3301      	adds	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	791b      	ldrb	r3, [r3, #4]
 800842c:	7bfa      	ldrb	r2, [r7, #15]
 800842e:	429a      	cmp	r2, r3
 8008430:	d3b5      	bcc.n	800839e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7c1a      	ldrb	r2, [r3, #16]
 800843a:	f88d 2000 	strb.w	r2, [sp]
 800843e:	3304      	adds	r3, #4
 8008440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008442:	f002 fb51 	bl	800aae8 <USB_DevInit>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e00c      	b.n	8008472 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4618      	mov	r0, r3
 800846c:	f003 fb9b 	bl	800bba6 <USB_DevDisconnect>

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_PCD_Start+0x1c>
 8008492:	2302      	movs	r3, #2
 8008494:	e022      	b.n	80084dc <HAL_PCD_Start+0x62>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d105      	bne.n	80084be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f002 faa2 	bl	800aa0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f003 fb49 	bl	800bb64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b08d      	sub	sp, #52	@ 0x34
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f003 fc07 	bl	800bd0e <USB_GetMode>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 848c 	bne.w	8008e20 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f003 fb6b 	bl	800bbe8 <USB_ReadInterrupts>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 8482 	beq.w	8008e1e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	0a1b      	lsrs	r3, r3, #8
 8008524:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f003 fb58 	bl	800bbe8 <USB_ReadInterrupts>
 8008538:	4603      	mov	r3, r0
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b02      	cmp	r3, #2
 8008540:	d107      	bne.n	8008552 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	695a      	ldr	r2, [r3, #20]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f002 0202 	and.w	r2, r2, #2
 8008550:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f003 fb46 	bl	800bbe8 <USB_ReadInterrupts>
 800855c:	4603      	mov	r3, r0
 800855e:	f003 0310 	and.w	r3, r3, #16
 8008562:	2b10      	cmp	r3, #16
 8008564:	d161      	bne.n	800862a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0210 	bic.w	r2, r2, #16
 8008574:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	f003 020f 	and.w	r2, r3, #15
 8008582:	4613      	mov	r3, r2
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	4413      	add	r3, r2
 8008592:	3304      	adds	r3, #4
 8008594:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	0c5b      	lsrs	r3, r3, #17
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d124      	bne.n	80085ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80085a8:	4013      	ands	r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d035      	beq.n	800861a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	091b      	lsrs	r3, r3, #4
 80085b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80085b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085bc:	b29b      	uxth	r3, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	6a38      	ldr	r0, [r7, #32]
 80085c2:	f003 f97d 	bl	800b8c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085d2:	441a      	add	r2, r3
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	695a      	ldr	r2, [r3, #20]
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	091b      	lsrs	r3, r3, #4
 80085e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085e4:	441a      	add	r2, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	615a      	str	r2, [r3, #20]
 80085ea:	e016      	b.n	800861a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	0c5b      	lsrs	r3, r3, #17
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	2b06      	cmp	r3, #6
 80085f6:	d110      	bne.n	800861a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80085fe:	2208      	movs	r2, #8
 8008600:	4619      	mov	r1, r3
 8008602:	6a38      	ldr	r0, [r7, #32]
 8008604:	f003 f95c 	bl	800b8c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	695a      	ldr	r2, [r3, #20]
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	091b      	lsrs	r3, r3, #4
 8008610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008614:	441a      	add	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0210 	orr.w	r2, r2, #16
 8008628:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f003 fada 	bl	800bbe8 <USB_ReadInterrupts>
 8008634:	4603      	mov	r3, r0
 8008636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800863a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800863e:	f040 80a7 	bne.w	8008790 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f003 fadf 	bl	800bc0e <USB_ReadDevAllOutEpInterrupt>
 8008650:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008652:	e099      	b.n	8008788 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 808e 	beq.w	800877c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f003 fb03 	bl	800bc76 <USB_ReadDevOutEPInterrupt>
 8008670:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00c      	beq.n	8008696 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008688:	461a      	mov	r2, r3
 800868a:	2301      	movs	r3, #1
 800868c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800868e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fea3 	bl	80093dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ac:	461a      	mov	r2, r3
 80086ae:	2308      	movs	r3, #8
 80086b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80086b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 ff79 	bl	80095ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d008      	beq.n	80086d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d0:	461a      	mov	r2, r3
 80086d2:	2310      	movs	r3, #16
 80086d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d030      	beq.n	8008742 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e8:	2b80      	cmp	r3, #128	@ 0x80
 80086ea:	d109      	bne.n	8008700 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008702:	4613      	mov	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	4413      	add	r3, r2
 8008712:	3304      	adds	r3, #4
 8008714:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	78db      	ldrb	r3, [r3, #3]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d108      	bne.n	8008730 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	b2db      	uxtb	r3, r3
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f005 fee2 	bl	800e4f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873c:	461a      	mov	r2, r3
 800873e:	2302      	movs	r3, #2
 8008740:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008758:	461a      	mov	r2, r3
 800875a:	2320      	movs	r3, #32
 800875c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008774:	461a      	mov	r2, r3
 8008776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800877a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	3301      	adds	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	2b00      	cmp	r3, #0
 800878c:	f47f af62 	bne.w	8008654 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f003 fa27 	bl	800bbe8 <USB_ReadInterrupts>
 800879a:	4603      	mov	r3, r0
 800879c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087a4:	f040 80db 	bne.w	800895e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f003 fa48 	bl	800bc42 <USB_ReadDevAllInEpInterrupt>
 80087b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80087b8:	e0cd      	b.n	8008956 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80c2 	beq.w	800894a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f003 fa6e 	bl	800bcb2 <USB_ReadDevInEPInterrupt>
 80087d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d057      	beq.n	8008892 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	2201      	movs	r2, #1
 80087ea:	fa02 f303 	lsl.w	r3, r2, r3
 80087ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	43db      	mvns	r3, r3
 80087fc:	69f9      	ldr	r1, [r7, #28]
 80087fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008802:	4013      	ands	r3, r2
 8008804:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008812:	461a      	mov	r2, r3
 8008814:	2301      	movs	r3, #1
 8008816:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	799b      	ldrb	r3, [r3, #6]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d132      	bne.n	8008886 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008824:	4613      	mov	r3, r2
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	3320      	adds	r3, #32
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008836:	4613      	mov	r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4403      	add	r3, r0
 8008840:	331c      	adds	r3, #28
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4419      	add	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800884a:	4613      	mov	r3, r2
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4403      	add	r3, r0
 8008854:	3320      	adds	r3, #32
 8008856:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d113      	bne.n	8008886 <HAL_PCD_IRQHandler+0x3a2>
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008862:	4613      	mov	r3, r2
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	3324      	adds	r3, #36	@ 0x24
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d108      	bne.n	8008886 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800887e:	461a      	mov	r2, r3
 8008880:	2101      	movs	r1, #1
 8008882:	f003 fa75 	bl	800bd70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	b2db      	uxtb	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f005 fdb6 	bl	800e3fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a8:	461a      	mov	r2, r3
 80088aa:	2308      	movs	r3, #8
 80088ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c4:	461a      	mov	r2, r3
 80088c6:	2310      	movs	r3, #16
 80088c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d008      	beq.n	80088e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80088d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e0:	461a      	mov	r2, r3
 80088e2:	2340      	movs	r3, #64	@ 0x40
 80088e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d023      	beq.n	8008938 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80088f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088f2:	6a38      	ldr	r0, [r7, #32]
 80088f4:	f002 fa5c 	bl	800adb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80088f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088fa:	4613      	mov	r3, r2
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	3310      	adds	r3, #16
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	4413      	add	r3, r2
 8008908:	3304      	adds	r3, #4
 800890a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	78db      	ldrb	r3, [r3, #3]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d108      	bne.n	8008926 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2200      	movs	r2, #0
 8008918:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	b2db      	uxtb	r3, r3
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f005 fdf9 	bl	800e518 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008932:	461a      	mov	r2, r3
 8008934:	2302      	movs	r3, #2
 8008936:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008942:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fcbd 	bl	80092c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	3301      	adds	r3, #1
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	2b00      	cmp	r3, #0
 800895a:	f47f af2e 	bne.w	80087ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f003 f940 	bl	800bbe8 <USB_ReadInterrupts>
 8008968:	4603      	mov	r3, r0
 800896a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800896e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008972:	d122      	bne.n	80089ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800898e:	2b01      	cmp	r3, #1
 8008990:	d108      	bne.n	80089a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fea3 	bl	80096e8 <HAL_PCDEx_LPM_Callback>
 80089a2:	e002      	b.n	80089aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f005 fd97 	bl	800e4d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	695a      	ldr	r2, [r3, #20]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80089b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f003 f912 	bl	800bbe8 <USB_ReadInterrupts>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089ce:	d112      	bne.n	80089f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d102      	bne.n	80089e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f005 fd53 	bl	800e48c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695a      	ldr	r2, [r3, #20]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80089f4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f003 f8f4 	bl	800bbe8 <USB_ReadInterrupts>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0a:	f040 80b7 	bne.w	8008b7c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a1c:	f023 0301 	bic.w	r3, r3, #1
 8008a20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2110      	movs	r1, #16
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f002 f9c1 	bl	800adb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a2e:	2300      	movs	r3, #0
 8008a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a32:	e046      	b.n	8008ac2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a40:	461a      	mov	r2, r3
 8008a42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a74:	461a      	mov	r2, r3
 8008a76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a8c:	0151      	lsls	r1, r2, #5
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	440a      	add	r2, r1
 8008a92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ab6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008aba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abe:	3301      	adds	r3, #1
 8008ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	791b      	ldrb	r3, [r3, #4]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d3b2      	bcc.n	8008a34 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008adc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008ae0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7bdb      	ldrb	r3, [r3, #15]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d016      	beq.n	8008b18 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008afa:	f043 030b 	orr.w	r3, r3, #11
 8008afe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b10:	f043 030b 	orr.w	r3, r3, #11
 8008b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b16:	e015      	b.n	8008b44 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008b2a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008b2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b3e:	f043 030b 	orr.w	r3, r3, #11
 8008b42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b66:	461a      	mov	r2, r3
 8008b68:	f003 f902 	bl	800bd70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695a      	ldr	r2, [r3, #20]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f003 f831 	bl	800bbe8 <USB_ReadInterrupts>
 8008b86:	4603      	mov	r3, r0
 8008b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b90:	d123      	bne.n	8008bda <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f003 f8c7 	bl	800bd2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f002 f97e 	bl	800aea2 <USB_GetDevSpeed>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	461a      	mov	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681c      	ldr	r4, [r3, #0]
 8008bb2:	f001 f9c9 	bl	8009f48 <HAL_RCC_GetHCLKFreq>
 8008bb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f001 fe82 	bl	800a8c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f005 fc42 	bl	800e44e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	695a      	ldr	r2, [r3, #20]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f003 f802 	bl	800bbe8 <USB_ReadInterrupts>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b08      	cmp	r3, #8
 8008bec:	d10a      	bne.n	8008c04 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f005 fc1f 	bl	800e432 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695a      	ldr	r2, [r3, #20]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f002 0208 	and.w	r2, r2, #8
 8008c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f002 ffed 	bl	800bbe8 <USB_ReadInterrupts>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c14:	2b80      	cmp	r3, #128	@ 0x80
 8008c16:	d123      	bne.n	8008c60 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c24:	2301      	movs	r3, #1
 8008c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c28:	e014      	b.n	8008c54 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c2e:	4613      	mov	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d105      	bne.n	8008c4e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fb0a 	bl	8009262 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	3301      	adds	r3, #1
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	791b      	ldrb	r3, [r3, #4]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d3e4      	bcc.n	8008c2a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 ffbf 	bl	800bbe8 <USB_ReadInterrupts>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c74:	d13c      	bne.n	8008cf0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c76:	2301      	movs	r3, #1
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c7a:	e02b      	b.n	8008cd4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	4413      	add	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	3318      	adds	r3, #24
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d115      	bne.n	8008cce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008ca2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da12      	bge.n	8008cce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cac:	4613      	mov	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	3317      	adds	r3, #23
 8008cb8:	2201      	movs	r2, #1
 8008cba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 faca 	bl	8009262 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	791b      	ldrb	r3, [r3, #4]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d3cd      	bcc.n	8008c7c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695a      	ldr	r2, [r3, #20]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f002 ff77 	bl	800bbe8 <USB_ReadInterrupts>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d04:	d156      	bne.n	8008db4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d06:	2301      	movs	r3, #1
 8008d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d0a:	e045      	b.n	8008d98 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d20:	4613      	mov	r3, r2
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	4413      	add	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	440b      	add	r3, r1
 8008d2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d12e      	bne.n	8008d92 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	da2b      	bge.n	8008d92 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008d46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d121      	bne.n	8008d92 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d52:	4613      	mov	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008d60:	2201      	movs	r2, #1
 8008d62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d8e:	6053      	str	r3, [r2, #4]
            break;
 8008d90:	e008      	b.n	8008da4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	3301      	adds	r3, #1
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	791b      	ldrb	r3, [r3, #4]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d3b3      	bcc.n	8008d0c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	695a      	ldr	r2, [r3, #20]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f002 ff15 	bl	800bbe8 <USB_ReadInterrupts>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc8:	d10a      	bne.n	8008de0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f005 fbb6 	bl	800e53c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695a      	ldr	r2, [r3, #20]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f002 feff 	bl	800bbe8 <USB_ReadInterrupts>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	d115      	bne.n	8008e20 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	f003 0304 	and.w	r3, r3, #4
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f005 fba6 	bl	800e558 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6859      	ldr	r1, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	e000      	b.n	8008e20 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008e1e:	bf00      	nop
    }
  }
}
 8008e20:	3734      	adds	r7, #52	@ 0x34
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd90      	pop	{r4, r7, pc}

08008e26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_PCD_SetAddress+0x1a>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e012      	b.n	8008e66 <HAL_PCD_SetAddress+0x40>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f002 fe5e 	bl	800bb18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	4608      	mov	r0, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	70fb      	strb	r3, [r7, #3]
 8008e80:	460b      	mov	r3, r1
 8008e82:	803b      	strh	r3, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da0f      	bge.n	8008eb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 020f 	and.w	r2, r3, #15
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	3310      	adds	r3, #16
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	705a      	strb	r2, [r3, #1]
 8008eb2:	e00f      	b.n	8008ed4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	f003 020f 	and.w	r2, r3, #15
 8008eba:	4613      	mov	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	4413      	add	r3, r2
 8008eca:	3304      	adds	r3, #4
 8008ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	f003 030f 	and.w	r3, r3, #15
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008ee0:	883b      	ldrh	r3, [r7, #0]
 8008ee2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	78ba      	ldrb	r2, [r7, #2]
 8008eee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008f02:	78bb      	ldrb	r3, [r7, #2]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d102      	bne.n	8008f0e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_PCD_EP_Open+0xae>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e00e      	b.n	8008f3a <HAL_PCD_EP_Open+0xcc>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 ffde 	bl	800aeec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008f38:	7afb      	ldrb	r3, [r7, #11]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da0f      	bge.n	8008f76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	f003 020f 	and.w	r2, r3, #15
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	3310      	adds	r3, #16
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4413      	add	r3, r2
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	705a      	strb	r2, [r3, #1]
 8008f74:	e00f      	b.n	8008f96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	f003 020f 	and.w	r2, r3, #15
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_PCD_EP_Close+0x6e>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e00e      	b.n	8008fce <HAL_PCD_EP_Close+0x8c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68f9      	ldr	r1, [r7, #12]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f002 f81c 	bl	800affc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	f003 020f 	and.w	r2, r3, #15
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2200      	movs	r2, #0
 8009010:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2200      	movs	r2, #0
 8009016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009018:	7afb      	ldrb	r3, [r7, #11]
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	b2da      	uxtb	r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	799b      	ldrb	r3, [r3, #6]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d102      	bne.n	8009032 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	799b      	ldrb	r3, [r3, #6]
 800903a:	461a      	mov	r2, r3
 800903c:	6979      	ldr	r1, [r7, #20]
 800903e:	f002 f8b9 	bl	800b1b4 <USB_EPStartXfer>

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	f003 020f 	and.w	r2, r3, #15
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4613      	mov	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800906e:	681b      	ldr	r3, [r3, #0]
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	607a      	str	r2, [r7, #4]
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	460b      	mov	r3, r1
 800908a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	f003 020f 	and.w	r2, r3, #15
 8009092:	4613      	mov	r3, r2
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	3310      	adds	r3, #16
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	3304      	adds	r3, #4
 80090a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2200      	movs	r2, #0
 80090b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2201      	movs	r2, #1
 80090ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	799b      	ldrb	r3, [r3, #6]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d102      	bne.n	80090d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	799b      	ldrb	r3, [r3, #6]
 80090de:	461a      	mov	r2, r3
 80090e0:	6979      	ldr	r1, [r7, #20]
 80090e2:	f002 f867 	bl	800b1b4 <USB_EPStartXfer>

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	7912      	ldrb	r2, [r2, #4]
 8009106:	4293      	cmp	r3, r2
 8009108:	d901      	bls.n	800910e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e04f      	b.n	80091ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800910e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009112:	2b00      	cmp	r3, #0
 8009114:	da0f      	bge.n	8009136 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	4613      	mov	r3, r2
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	3310      	adds	r3, #16
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	3304      	adds	r3, #4
 800912c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	705a      	strb	r2, [r3, #1]
 8009134:	e00d      	b.n	8009152 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	4613      	mov	r3, r2
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4413      	add	r3, r2
 8009148:	3304      	adds	r3, #4
 800914a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	b2da      	uxtb	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_PCD_EP_SetStall+0x82>
 800916e:	2302      	movs	r3, #2
 8009170:	e01d      	b.n	80091ae <HAL_PCD_EP_SetStall+0xbe>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	4618      	mov	r0, r3
 8009182:	f002 fbf5 	bl	800b970 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	2b00      	cmp	r3, #0
 800918e:	d109      	bne.n	80091a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7999      	ldrb	r1, [r3, #6]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800919e:	461a      	mov	r2, r3
 80091a0:	f002 fde6 	bl	800bd70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	7912      	ldrb	r2, [r2, #4]
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d901      	bls.n	80091d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e042      	b.n	800925a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	da0f      	bge.n	80091fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	f003 020f 	and.w	r2, r3, #15
 80091e2:	4613      	mov	r3, r2
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	3310      	adds	r3, #16
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4413      	add	r3, r2
 80091f0:	3304      	adds	r3, #4
 80091f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	705a      	strb	r2, [r3, #1]
 80091fa:	e00f      	b.n	800921c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	f003 020f 	and.w	r2, r3, #15
 8009202:	4613      	mov	r3, r2
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4413      	add	r3, r2
 8009212:	3304      	adds	r3, #4
 8009214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	b2da      	uxtb	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009234:	2b01      	cmp	r3, #1
 8009236:	d101      	bne.n	800923c <HAL_PCD_EP_ClrStall+0x86>
 8009238:	2302      	movs	r3, #2
 800923a:	e00e      	b.n	800925a <HAL_PCD_EP_ClrStall+0xa4>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68f9      	ldr	r1, [r7, #12]
 800924a:	4618      	mov	r0, r3
 800924c:	f002 fbfe 	bl	800ba4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800926e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009272:	2b00      	cmp	r3, #0
 8009274:	da0c      	bge.n	8009290 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	f003 020f 	and.w	r2, r3, #15
 800927c:	4613      	mov	r3, r2
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	3310      	adds	r3, #16
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	3304      	adds	r3, #4
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	e00c      	b.n	80092aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	f003 020f 	and.w	r2, r3, #15
 8009296:	4613      	mov	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	4413      	add	r3, r2
 80092a6:	3304      	adds	r3, #4
 80092a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f002 fa1d 	bl	800b6f0 <USB_EPStopXfer>
 80092b6:	4603      	mov	r3, r0
 80092b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80092ba:	7afb      	ldrb	r3, [r7, #11]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	@ 0x28
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	4613      	mov	r3, r2
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	3310      	adds	r3, #16
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	4413      	add	r3, r2
 80092e8:	3304      	adds	r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	695a      	ldr	r2, [r3, #20]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d901      	bls.n	80092fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e06b      	b.n	80093d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	429a      	cmp	r2, r3
 8009310:	d902      	bls.n	8009318 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3303      	adds	r3, #3
 800931c:	089b      	lsrs	r3, r3, #2
 800931e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009320:	e02a      	b.n	8009378 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	69fa      	ldr	r2, [r7, #28]
 8009334:	429a      	cmp	r2, r3
 8009336:	d902      	bls.n	800933e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3303      	adds	r3, #3
 8009342:	089b      	lsrs	r3, r3, #2
 8009344:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	68d9      	ldr	r1, [r3, #12]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	b2da      	uxtb	r2, r3
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4603      	mov	r3, r0
 800935a:	6978      	ldr	r0, [r7, #20]
 800935c:	f002 fa72 	bl	800b844 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	441a      	add	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	695a      	ldr	r2, [r3, #20]
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	441a      	add	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	429a      	cmp	r2, r3
 800938c:	d809      	bhi.n	80093a2 <PCD_WriteEmptyTxFifo+0xde>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	695a      	ldr	r2, [r3, #20]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009396:	429a      	cmp	r2, r3
 8009398:	d203      	bcs.n	80093a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1bf      	bne.n	8009322 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	691a      	ldr	r2, [r3, #16]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d811      	bhi.n	80093d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	2201      	movs	r2, #1
 80093b6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	43db      	mvns	r3, r3
 80093c8:	6939      	ldr	r1, [r7, #16]
 80093ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093ce:	4013      	ands	r3, r2
 80093d0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3720      	adds	r7, #32
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	333c      	adds	r3, #60	@ 0x3c
 80093f4:	3304      	adds	r3, #4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	799b      	ldrb	r3, [r3, #6]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d17b      	bne.n	800950a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f003 0308 	and.w	r3, r3, #8
 8009418:	2b00      	cmp	r3, #0
 800941a:	d015      	beq.n	8009448 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	4a61      	ldr	r2, [pc, #388]	@ (80095a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009420:	4293      	cmp	r3, r2
 8009422:	f240 80b9 	bls.w	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80b3 	beq.w	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800943e:	461a      	mov	r2, r3
 8009440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009444:	6093      	str	r3, [r2, #8]
 8009446:	e0a7      	b.n	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945e:	461a      	mov	r2, r3
 8009460:	2320      	movs	r3, #32
 8009462:	6093      	str	r3, [r2, #8]
 8009464:	e098      	b.n	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 8093 	bne.w	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	4a4b      	ldr	r2, [pc, #300]	@ (80095a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d90f      	bls.n	800949a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009490:	461a      	mov	r2, r3
 8009492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009496:	6093      	str	r3, [r2, #8]
 8009498:	e07e      	b.n	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	4613      	mov	r3, r2
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	4413      	add	r3, r2
 80094ac:	3304      	adds	r3, #4
 80094ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a1a      	ldr	r2, [r3, #32]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	0159      	lsls	r1, r3, #5
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	440b      	add	r3, r1
 80094bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094c6:	1ad2      	subs	r2, r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d114      	bne.n	80094fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80094e4:	461a      	mov	r2, r3
 80094e6:	2101      	movs	r1, #1
 80094e8:	f002 fc42 	bl	800bd70 <USB_EP0_OutStart>
 80094ec:	e006      	b.n	80094fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	441a      	add	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f004 ff60 	bl	800e3c8 <HAL_PCD_DataOutStageCallback>
 8009508:	e046      	b.n	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	4a26      	ldr	r2, [pc, #152]	@ (80095a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d124      	bne.n	800955c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009528:	461a      	mov	r2, r3
 800952a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800952e:	6093      	str	r3, [r2, #8]
 8009530:	e032      	b.n	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d008      	beq.n	800954e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009548:	461a      	mov	r2, r3
 800954a:	2320      	movs	r3, #32
 800954c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f004 ff37 	bl	800e3c8 <HAL_PCD_DataOutStageCallback>
 800955a:	e01d      	b.n	8009598 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d114      	bne.n	800958c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	4613      	mov	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d108      	bne.n	800958c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009584:	461a      	mov	r2, r3
 8009586:	2100      	movs	r1, #0
 8009588:	f002 fbf2 	bl	800bd70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f004 ff18 	bl	800e3c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3720      	adds	r7, #32
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	4f54300a 	.word	0x4f54300a
 80095a8:	4f54310a 	.word	0x4f54310a

080095ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	333c      	adds	r3, #60	@ 0x3c
 80095c4:	3304      	adds	r3, #4
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4a15      	ldr	r2, [pc, #84]	@ (8009634 <PCD_EP_OutSetupPacket_int+0x88>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d90e      	bls.n	8009600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d009      	beq.n	8009600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f8:	461a      	mov	r2, r3
 80095fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f004 fecf 	bl	800e3a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4a0a      	ldr	r2, [pc, #40]	@ (8009634 <PCD_EP_OutSetupPacket_int+0x88>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d90c      	bls.n	8009628 <PCD_EP_OutSetupPacket_int+0x7c>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	799b      	ldrb	r3, [r3, #6]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d108      	bne.n	8009628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009620:	461a      	mov	r2, r3
 8009622:	2101      	movs	r1, #1
 8009624:	f002 fba4 	bl	800bd70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	4f54300a 	.word	0x4f54300a

08009638 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
 8009644:	4613      	mov	r3, r2
 8009646:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d107      	bne.n	8009666 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009656:	883b      	ldrh	r3, [r7, #0]
 8009658:	0419      	lsls	r1, r3, #16
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	430a      	orrs	r2, r1
 8009662:	629a      	str	r2, [r3, #40]	@ 0x28
 8009664:	e028      	b.n	80096b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	4413      	add	r3, r2
 8009672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
 8009678:	e00d      	b.n	8009696 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	3340      	adds	r3, #64	@ 0x40
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	0c1b      	lsrs	r3, r3, #16
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	4413      	add	r3, r2
 800968e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	3301      	adds	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
 8009696:	7bfa      	ldrb	r2, [r7, #15]
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	3b01      	subs	r3, #1
 800969c:	429a      	cmp	r2, r3
 800969e:	d3ec      	bcc.n	800967a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80096a0:	883b      	ldrh	r3, [r7, #0]
 80096a2:	0418      	lsls	r0, r3, #16
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6819      	ldr	r1, [r3, #0]
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	4302      	orrs	r2, r0
 80096b0:	3340      	adds	r3, #64	@ 0x40
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	440b      	add	r3, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	460b      	mov	r3, r1
 80096d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	887a      	ldrh	r2, [r7, #2]
 80096d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e267      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d075      	beq.n	800980a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800971e:	4b88      	ldr	r3, [pc, #544]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 030c 	and.w	r3, r3, #12
 8009726:	2b04      	cmp	r3, #4
 8009728:	d00c      	beq.n	8009744 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800972a:	4b85      	ldr	r3, [pc, #532]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009732:	2b08      	cmp	r3, #8
 8009734:	d112      	bne.n	800975c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009736:	4b82      	ldr	r3, [pc, #520]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800973e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009742:	d10b      	bne.n	800975c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009744:	4b7e      	ldr	r3, [pc, #504]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d05b      	beq.n	8009808 <HAL_RCC_OscConfig+0x108>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d157      	bne.n	8009808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e242      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009764:	d106      	bne.n	8009774 <HAL_RCC_OscConfig+0x74>
 8009766:	4b76      	ldr	r3, [pc, #472]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a75      	ldr	r2, [pc, #468]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800976c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	e01d      	b.n	80097b0 <HAL_RCC_OscConfig+0xb0>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800977c:	d10c      	bne.n	8009798 <HAL_RCC_OscConfig+0x98>
 800977e:	4b70      	ldr	r3, [pc, #448]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a6f      	ldr	r2, [pc, #444]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	4b6d      	ldr	r3, [pc, #436]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a6c      	ldr	r2, [pc, #432]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	e00b      	b.n	80097b0 <HAL_RCC_OscConfig+0xb0>
 8009798:	4b69      	ldr	r3, [pc, #420]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a68      	ldr	r2, [pc, #416]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800979e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	4b66      	ldr	r3, [pc, #408]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a65      	ldr	r2, [pc, #404]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d013      	beq.n	80097e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097b8:	f7fb ff0c 	bl	80055d4 <HAL_GetTick>
 80097bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097be:	e008      	b.n	80097d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097c0:	f7fb ff08 	bl	80055d4 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b64      	cmp	r3, #100	@ 0x64
 80097cc:	d901      	bls.n	80097d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e207      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097d2:	4b5b      	ldr	r3, [pc, #364]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0f0      	beq.n	80097c0 <HAL_RCC_OscConfig+0xc0>
 80097de:	e014      	b.n	800980a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097e0:	f7fb fef8 	bl	80055d4 <HAL_GetTick>
 80097e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097e6:	e008      	b.n	80097fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097e8:	f7fb fef4 	bl	80055d4 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b64      	cmp	r3, #100	@ 0x64
 80097f4:	d901      	bls.n	80097fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e1f3      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097fa:	4b51      	ldr	r3, [pc, #324]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1f0      	bne.n	80097e8 <HAL_RCC_OscConfig+0xe8>
 8009806:	e000      	b.n	800980a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d063      	beq.n	80098de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009816:	4b4a      	ldr	r3, [pc, #296]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f003 030c 	and.w	r3, r3, #12
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009822:	4b47      	ldr	r3, [pc, #284]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800982a:	2b08      	cmp	r3, #8
 800982c:	d11c      	bne.n	8009868 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800982e:	4b44      	ldr	r3, [pc, #272]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d116      	bne.n	8009868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800983a:	4b41      	ldr	r3, [pc, #260]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d005      	beq.n	8009852 <HAL_RCC_OscConfig+0x152>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d001      	beq.n	8009852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e1c7      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009852:	4b3b      	ldr	r3, [pc, #236]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	4937      	ldr	r1, [pc, #220]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009862:	4313      	orrs	r3, r2
 8009864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009866:	e03a      	b.n	80098de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d020      	beq.n	80098b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009870:	4b34      	ldr	r3, [pc, #208]	@ (8009944 <HAL_RCC_OscConfig+0x244>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009876:	f7fb fead 	bl	80055d4 <HAL_GetTick>
 800987a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800987c:	e008      	b.n	8009890 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800987e:	f7fb fea9 	bl	80055d4 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e1a8      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009890:	4b2b      	ldr	r3, [pc, #172]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0f0      	beq.n	800987e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800989c:	4b28      	ldr	r3, [pc, #160]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	4925      	ldr	r1, [pc, #148]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	600b      	str	r3, [r1, #0]
 80098b0:	e015      	b.n	80098de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098b2:	4b24      	ldr	r3, [pc, #144]	@ (8009944 <HAL_RCC_OscConfig+0x244>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b8:	f7fb fe8c 	bl	80055d4 <HAL_GetTick>
 80098bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098be:	e008      	b.n	80098d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098c0:	f7fb fe88 	bl	80055d4 <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d901      	bls.n	80098d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e187      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1f0      	bne.n	80098c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d036      	beq.n	8009958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d016      	beq.n	8009920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098f2:	4b15      	ldr	r3, [pc, #84]	@ (8009948 <HAL_RCC_OscConfig+0x248>)
 80098f4:	2201      	movs	r2, #1
 80098f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f8:	f7fb fe6c 	bl	80055d4 <HAL_GetTick>
 80098fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098fe:	e008      	b.n	8009912 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009900:	f7fb fe68 	bl	80055d4 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b02      	cmp	r3, #2
 800990c:	d901      	bls.n	8009912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e167      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009912:	4b0b      	ldr	r3, [pc, #44]	@ (8009940 <HAL_RCC_OscConfig+0x240>)
 8009914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0f0      	beq.n	8009900 <HAL_RCC_OscConfig+0x200>
 800991e:	e01b      	b.n	8009958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009920:	4b09      	ldr	r3, [pc, #36]	@ (8009948 <HAL_RCC_OscConfig+0x248>)
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009926:	f7fb fe55 	bl	80055d4 <HAL_GetTick>
 800992a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800992c:	e00e      	b.n	800994c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800992e:	f7fb fe51 	bl	80055d4 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d907      	bls.n	800994c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e150      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
 8009940:	40023800 	.word	0x40023800
 8009944:	42470000 	.word	0x42470000
 8009948:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800994c:	4b88      	ldr	r3, [pc, #544]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 800994e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1ea      	bne.n	800992e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 8097 	beq.w	8009a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800996a:	4b81      	ldr	r3, [pc, #516]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10f      	bne.n	8009996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
 800997a:	4b7d      	ldr	r3, [pc, #500]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 800997c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997e:	4a7c      	ldr	r2, [pc, #496]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009984:	6413      	str	r3, [r2, #64]	@ 0x40
 8009986:	4b7a      	ldr	r3, [pc, #488]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800998a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009992:	2301      	movs	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009996:	4b77      	ldr	r3, [pc, #476]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d118      	bne.n	80099d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099a2:	4b74      	ldr	r3, [pc, #464]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a73      	ldr	r2, [pc, #460]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 80099a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099ae:	f7fb fe11 	bl	80055d4 <HAL_GetTick>
 80099b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099b4:	e008      	b.n	80099c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099b6:	f7fb fe0d 	bl	80055d4 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e10c      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009b74 <HAL_RCC_OscConfig+0x474>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0f0      	beq.n	80099b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d106      	bne.n	80099ea <HAL_RCC_OscConfig+0x2ea>
 80099dc:	4b64      	ldr	r3, [pc, #400]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099e0:	4a63      	ldr	r2, [pc, #396]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099e2:	f043 0301 	orr.w	r3, r3, #1
 80099e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099e8:	e01c      	b.n	8009a24 <HAL_RCC_OscConfig+0x324>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	2b05      	cmp	r3, #5
 80099f0:	d10c      	bne.n	8009a0c <HAL_RCC_OscConfig+0x30c>
 80099f2:	4b5f      	ldr	r3, [pc, #380]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f6:	4a5e      	ldr	r2, [pc, #376]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 80099f8:	f043 0304 	orr.w	r3, r3, #4
 80099fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80099fe:	4b5c      	ldr	r3, [pc, #368]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a02:	4a5b      	ldr	r2, [pc, #364]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a04:	f043 0301 	orr.w	r3, r3, #1
 8009a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a0a:	e00b      	b.n	8009a24 <HAL_RCC_OscConfig+0x324>
 8009a0c:	4b58      	ldr	r3, [pc, #352]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a10:	4a57      	ldr	r2, [pc, #348]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a12:	f023 0301 	bic.w	r3, r3, #1
 8009a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a18:	4b55      	ldr	r3, [pc, #340]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a1c:	4a54      	ldr	r2, [pc, #336]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a1e:	f023 0304 	bic.w	r3, r3, #4
 8009a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d015      	beq.n	8009a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2c:	f7fb fdd2 	bl	80055d4 <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a32:	e00a      	b.n	8009a4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a34:	f7fb fdce 	bl	80055d4 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e0cb      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a4a:	4b49      	ldr	r3, [pc, #292]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0ee      	beq.n	8009a34 <HAL_RCC_OscConfig+0x334>
 8009a56:	e014      	b.n	8009a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a58:	f7fb fdbc 	bl	80055d4 <HAL_GetTick>
 8009a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a5e:	e00a      	b.n	8009a76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a60:	f7fb fdb8 	bl	80055d4 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e0b5      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a76:	4b3e      	ldr	r3, [pc, #248]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ee      	bne.n	8009a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d105      	bne.n	8009a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a88:	4b39      	ldr	r3, [pc, #228]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8c:	4a38      	ldr	r2, [pc, #224]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80a1 	beq.w	8009be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a9e:	4b34      	ldr	r3, [pc, #208]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 030c 	and.w	r3, r3, #12
 8009aa6:	2b08      	cmp	r3, #8
 8009aa8:	d05c      	beq.n	8009b64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d141      	bne.n	8009b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ab2:	4b31      	ldr	r3, [pc, #196]	@ (8009b78 <HAL_RCC_OscConfig+0x478>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ab8:	f7fb fd8c 	bl	80055d4 <HAL_GetTick>
 8009abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ac0:	f7fb fd88 	bl	80055d4 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e087      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ad2:	4b27      	ldr	r3, [pc, #156]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1f0      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	69da      	ldr	r2, [r3, #28]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aec:	019b      	lsls	r3, r3, #6
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	3b01      	subs	r3, #1
 8009af8:	041b      	lsls	r3, r3, #16
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b00:	061b      	lsls	r3, r3, #24
 8009b02:	491b      	ldr	r1, [pc, #108]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b08:	4b1b      	ldr	r3, [pc, #108]	@ (8009b78 <HAL_RCC_OscConfig+0x478>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b0e:	f7fb fd61 	bl	80055d4 <HAL_GetTick>
 8009b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b14:	e008      	b.n	8009b28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b16:	f7fb fd5d 	bl	80055d4 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d901      	bls.n	8009b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e05c      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b28:	4b11      	ldr	r3, [pc, #68]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0f0      	beq.n	8009b16 <HAL_RCC_OscConfig+0x416>
 8009b34:	e054      	b.n	8009be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b36:	4b10      	ldr	r3, [pc, #64]	@ (8009b78 <HAL_RCC_OscConfig+0x478>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b3c:	f7fb fd4a 	bl	80055d4 <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b44:	f7fb fd46 	bl	80055d4 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e045      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b56:	4b06      	ldr	r3, [pc, #24]	@ (8009b70 <HAL_RCC_OscConfig+0x470>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x444>
 8009b62:	e03d      	b.n	8009be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d107      	bne.n	8009b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e038      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
 8009b70:	40023800 	.word	0x40023800
 8009b74:	40007000 	.word	0x40007000
 8009b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009bec <HAL_RCC_OscConfig+0x4ec>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d028      	beq.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d121      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d11a      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009bac:	4013      	ands	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d111      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d107      	bne.n	8009bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d001      	beq.n	8009be0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e000      	b.n	8009be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	40023800 	.word	0x40023800

08009bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e0cc      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c04:	4b68      	ldr	r3, [pc, #416]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0307 	and.w	r3, r3, #7
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d90c      	bls.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c12:	4b65      	ldr	r3, [pc, #404]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c1a:	4b63      	ldr	r3, [pc, #396]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d001      	beq.n	8009c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0b8      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d020      	beq.n	8009c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c44:	4b59      	ldr	r3, [pc, #356]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	4a58      	ldr	r2, [pc, #352]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009c4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0308 	and.w	r3, r3, #8
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c5c:	4b53      	ldr	r3, [pc, #332]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	4a52      	ldr	r2, [pc, #328]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c68:	4b50      	ldr	r3, [pc, #320]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	494d      	ldr	r1, [pc, #308]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d044      	beq.n	8009d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d107      	bne.n	8009c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c8e:	4b47      	ldr	r3, [pc, #284]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d119      	bne.n	8009cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e07f      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d003      	beq.n	8009cae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d107      	bne.n	8009cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cae:	4b3f      	ldr	r3, [pc, #252]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e06f      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e067      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009cce:	4b37      	ldr	r3, [pc, #220]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f023 0203 	bic.w	r2, r3, #3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	4934      	ldr	r1, [pc, #208]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ce0:	f7fb fc78 	bl	80055d4 <HAL_GetTick>
 8009ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ce6:	e00a      	b.n	8009cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ce8:	f7fb fc74 	bl	80055d4 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d901      	bls.n	8009cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e04f      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 020c 	and.w	r2, r3, #12
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d1eb      	bne.n	8009ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d10:	4b25      	ldr	r3, [pc, #148]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d20c      	bcs.n	8009d38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d1e:	4b22      	ldr	r3, [pc, #136]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d26:	4b20      	ldr	r3, [pc, #128]	@ (8009da8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0307 	and.w	r3, r3, #7
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d001      	beq.n	8009d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e032      	b.n	8009d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d008      	beq.n	8009d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d44:	4b19      	ldr	r3, [pc, #100]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	4916      	ldr	r1, [pc, #88]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0308 	and.w	r3, r3, #8
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d62:	4b12      	ldr	r3, [pc, #72]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	490e      	ldr	r1, [pc, #56]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009d76:	f000 f821 	bl	8009dbc <HAL_RCC_GetSysClockFreq>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dac <HAL_RCC_ClockConfig+0x1bc>)
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	091b      	lsrs	r3, r3, #4
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	490a      	ldr	r1, [pc, #40]	@ (8009db0 <HAL_RCC_ClockConfig+0x1c0>)
 8009d88:	5ccb      	ldrb	r3, [r1, r3]
 8009d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d8e:	4a09      	ldr	r2, [pc, #36]	@ (8009db4 <HAL_RCC_ClockConfig+0x1c4>)
 8009d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009d92:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <HAL_RCC_ClockConfig+0x1c8>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fb fbd8 	bl	800554c <HAL_InitTick>

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40023c00 	.word	0x40023c00
 8009dac:	40023800 	.word	0x40023800
 8009db0:	08014564 	.word	0x08014564
 8009db4:	20000000 	.word	0x20000000
 8009db8:	20000004 	.word	0x20000004

08009dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dc0:	b090      	sub	sp, #64	@ 0x40
 8009dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009dd4:	4b59      	ldr	r3, [pc, #356]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f003 030c 	and.w	r3, r3, #12
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d00d      	beq.n	8009dfc <HAL_RCC_GetSysClockFreq+0x40>
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	f200 80a1 	bhi.w	8009f28 <HAL_RCC_GetSysClockFreq+0x16c>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <HAL_RCC_GetSysClockFreq+0x34>
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d003      	beq.n	8009df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8009dee:	e09b      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009df0:	4b53      	ldr	r3, [pc, #332]	@ (8009f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8009df2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009df4:	e09b      	b.n	8009f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009df6:	4b53      	ldr	r3, [pc, #332]	@ (8009f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8009df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009dfa:	e098      	b.n	8009f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e06:	4b4d      	ldr	r3, [pc, #308]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d028      	beq.n	8009e64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e12:	4b4a      	ldr	r3, [pc, #296]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	099b      	lsrs	r3, r3, #6
 8009e18:	2200      	movs	r2, #0
 8009e1a:	623b      	str	r3, [r7, #32]
 8009e1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009e24:	2100      	movs	r1, #0
 8009e26:	4b47      	ldr	r3, [pc, #284]	@ (8009f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e28:	fb03 f201 	mul.w	r2, r3, r1
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	fb00 f303 	mul.w	r3, r0, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	4a43      	ldr	r2, [pc, #268]	@ (8009f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e36:	fba0 1202 	umull	r1, r2, r0, r2
 8009e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e3c:	460a      	mov	r2, r1
 8009e3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e42:	4413      	add	r3, r2
 8009e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e48:	2200      	movs	r2, #0
 8009e4a:	61bb      	str	r3, [r7, #24]
 8009e4c:	61fa      	str	r2, [r7, #28]
 8009e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009e56:	f7f6 ff4f 	bl	8000cf8 <__aeabi_uldivmod>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4613      	mov	r3, r2
 8009e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e62:	e053      	b.n	8009f0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e64:	4b35      	ldr	r3, [pc, #212]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	099b      	lsrs	r3, r3, #6
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	617a      	str	r2, [r7, #20]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009e76:	f04f 0b00 	mov.w	fp, #0
 8009e7a:	4652      	mov	r2, sl
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	f04f 0000 	mov.w	r0, #0
 8009e82:	f04f 0100 	mov.w	r1, #0
 8009e86:	0159      	lsls	r1, r3, #5
 8009e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e8c:	0150      	lsls	r0, r2, #5
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	ebb2 080a 	subs.w	r8, r2, sl
 8009e96:	eb63 090b 	sbc.w	r9, r3, fp
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	f04f 0300 	mov.w	r3, #0
 8009ea2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009ea6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009eaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009eae:	ebb2 0408 	subs.w	r4, r2, r8
 8009eb2:	eb63 0509 	sbc.w	r5, r3, r9
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	f04f 0300 	mov.w	r3, #0
 8009ebe:	00eb      	lsls	r3, r5, #3
 8009ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ec4:	00e2      	lsls	r2, r4, #3
 8009ec6:	4614      	mov	r4, r2
 8009ec8:	461d      	mov	r5, r3
 8009eca:	eb14 030a 	adds.w	r3, r4, sl
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	eb45 030b 	adc.w	r3, r5, fp
 8009ed4:	607b      	str	r3, [r7, #4]
 8009ed6:	f04f 0200 	mov.w	r2, #0
 8009eda:	f04f 0300 	mov.w	r3, #0
 8009ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	028b      	lsls	r3, r1, #10
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009eec:	4621      	mov	r1, r4
 8009eee:	028a      	lsls	r2, r1, #10
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	60bb      	str	r3, [r7, #8]
 8009efa:	60fa      	str	r2, [r7, #12]
 8009efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f00:	f7f6 fefa 	bl	8000cf8 <__aeabi_uldivmod>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4613      	mov	r3, r2
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	0c1b      	lsrs	r3, r3, #16
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	3301      	adds	r3, #1
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009f1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f26:	e002      	b.n	8009f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f28:	4b05      	ldr	r3, [pc, #20]	@ (8009f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8009f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3740      	adds	r7, #64	@ 0x40
 8009f34:	46bd      	mov	sp, r7
 8009f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f3a:	bf00      	nop
 8009f3c:	40023800 	.word	0x40023800
 8009f40:	00f42400 	.word	0x00f42400
 8009f44:	017d7840 	.word	0x017d7840

08009f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f4c:	4b03      	ldr	r3, [pc, #12]	@ (8009f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000000 	.word	0x20000000

08009f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009f64:	f7ff fff0 	bl	8009f48 <HAL_RCC_GetHCLKFreq>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	0a9b      	lsrs	r3, r3, #10
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	4903      	ldr	r1, [pc, #12]	@ (8009f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f76:	5ccb      	ldrb	r3, [r1, r3]
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40023800 	.word	0x40023800
 8009f84:	08014574 	.word	0x08014574

08009f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e041      	b.n	800a01e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d106      	bne.n	8009fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7fb fa58 	bl	8005464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f000 fae6 	bl	800a598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d001      	beq.n	800a040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e044      	b.n	800a0ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f042 0201 	orr.w	r2, r2, #1
 800a056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a1e      	ldr	r2, [pc, #120]	@ (800a0d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d018      	beq.n	800a094 <HAL_TIM_Base_Start_IT+0x6c>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a06a:	d013      	beq.n	800a094 <HAL_TIM_Base_Start_IT+0x6c>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a1a      	ldr	r2, [pc, #104]	@ (800a0dc <HAL_TIM_Base_Start_IT+0xb4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00e      	beq.n	800a094 <HAL_TIM_Base_Start_IT+0x6c>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a19      	ldr	r2, [pc, #100]	@ (800a0e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d009      	beq.n	800a094 <HAL_TIM_Base_Start_IT+0x6c>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a17      	ldr	r2, [pc, #92]	@ (800a0e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d004      	beq.n	800a094 <HAL_TIM_Base_Start_IT+0x6c>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a16      	ldr	r2, [pc, #88]	@ (800a0e8 <HAL_TIM_Base_Start_IT+0xc0>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d111      	bne.n	800a0b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b06      	cmp	r3, #6
 800a0a4:	d010      	beq.n	800a0c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f042 0201 	orr.w	r2, r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0b6:	e007      	b.n	800a0c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f042 0201 	orr.w	r2, r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40000400 	.word	0x40000400
 800a0e0:	40000800 	.word	0x40000800
 800a0e4:	40000c00 	.word	0x40000c00
 800a0e8:	40014000 	.word	0x40014000

0800a0ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e097      	b.n	800a230 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d106      	bne.n	800a11a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7fb f955 	bl	80053c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2202      	movs	r2, #2
 800a11e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a130:	f023 0307 	bic.w	r3, r3, #7
 800a134:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f000 fa29 	bl	800a598 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	4313      	orrs	r3, r2
 800a166:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a16e:	f023 0303 	bic.w	r3, r3, #3
 800a172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	4313      	orrs	r3, r2
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4313      	orrs	r3, r2
 800a184:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a18c:	f023 030c 	bic.w	r3, r3, #12
 800a190:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a198:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a19c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68da      	ldr	r2, [r3, #12]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	011a      	lsls	r2, r3, #4
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	031b      	lsls	r3, r3, #12
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a1ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a1d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a248:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a250:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a258:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a260:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d110      	bne.n	800a28a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d102      	bne.n	800a274 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a26e:	7b7b      	ldrb	r3, [r7, #13]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d001      	beq.n	800a278 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e069      	b.n	800a34c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2202      	movs	r2, #2
 800a27c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a288:	e031      	b.n	800a2ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d110      	bne.n	800a2b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d102      	bne.n	800a29c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a296:	7b3b      	ldrb	r3, [r7, #12]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d001      	beq.n	800a2a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e055      	b.n	800a34c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2b0:	e01d      	b.n	800a2ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d108      	bne.n	800a2ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d105      	bne.n	800a2ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2be:	7b7b      	ldrb	r3, [r7, #13]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d102      	bne.n	800a2ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2c4:	7b3b      	ldrb	r3, [r7, #12]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d001      	beq.n	800a2ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e03e      	b.n	800a34c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_TIM_Encoder_Start+0xc4>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d008      	beq.n	800a30c <HAL_TIM_Encoder_Start+0xd4>
 800a2fa:	e00f      	b.n	800a31c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2201      	movs	r2, #1
 800a302:	2100      	movs	r1, #0
 800a304:	4618      	mov	r0, r3
 800a306:	f000 f9d3 	bl	800a6b0 <TIM_CCxChannelCmd>
      break;
 800a30a:	e016      	b.n	800a33a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2201      	movs	r2, #1
 800a312:	2104      	movs	r1, #4
 800a314:	4618      	mov	r0, r3
 800a316:	f000 f9cb 	bl	800a6b0 <TIM_CCxChannelCmd>
      break;
 800a31a:	e00e      	b.n	800a33a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2201      	movs	r2, #1
 800a322:	2100      	movs	r1, #0
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f9c3 	bl	800a6b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2201      	movs	r2, #1
 800a330:	2104      	movs	r1, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f9bc 	bl	800a6b0 <TIM_CCxChannelCmd>
      break;
 800a338:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f042 0201 	orr.w	r2, r2, #1
 800a348:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d020      	beq.n	800a3b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d01b      	beq.n	800a3b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f06f 0202 	mvn.w	r2, #2
 800a388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	f003 0303 	and.w	r3, r3, #3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f8dc 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
 800a3a4:	e005      	b.n	800a3b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f8ce 	bl	800a548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f8df 	bl	800a570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f003 0304 	and.w	r3, r3, #4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d020      	beq.n	800a404 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01b      	beq.n	800a404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0204 	mvn.w	r2, #4
 800a3d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2202      	movs	r2, #2
 800a3da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f8b6 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
 800a3f0:	e005      	b.n	800a3fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f8a8 	bl	800a548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f8b9 	bl	800a570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	f003 0308 	and.w	r3, r3, #8
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d020      	beq.n	800a450 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01b      	beq.n	800a450 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f06f 0208 	mvn.w	r2, #8
 800a420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2204      	movs	r2, #4
 800a426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f890 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
 800a43c:	e005      	b.n	800a44a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f882 	bl	800a548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f893 	bl	800a570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f003 0310 	and.w	r3, r3, #16
 800a456:	2b00      	cmp	r3, #0
 800a458:	d020      	beq.n	800a49c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01b      	beq.n	800a49c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0210 	mvn.w	r2, #16
 800a46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2208      	movs	r2, #8
 800a472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f86a 	bl	800a55c <HAL_TIM_IC_CaptureCallback>
 800a488:	e005      	b.n	800a496 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f85c 	bl	800a548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f86d 	bl	800a570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00c      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d007      	beq.n	800a4c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0201 	mvn.w	r2, #1
 800a4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f83a 	bl	800a534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00c      	beq.n	800a4e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d007      	beq.n	800a4e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f984 	bl	800a7ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00c      	beq.n	800a508 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d007      	beq.n	800a508 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f83e 	bl	800a584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f003 0320 	and.w	r3, r3, #32
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00c      	beq.n	800a52c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d007      	beq.n	800a52c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0220 	mvn.w	r2, #32
 800a524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f956 	bl	800a7d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a52c:	bf00      	nop
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a3a      	ldr	r2, [pc, #232]	@ (800a694 <TIM_Base_SetConfig+0xfc>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d00f      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5b6:	d00b      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a37      	ldr	r2, [pc, #220]	@ (800a698 <TIM_Base_SetConfig+0x100>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d007      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a36      	ldr	r2, [pc, #216]	@ (800a69c <TIM_Base_SetConfig+0x104>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d003      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a35      	ldr	r2, [pc, #212]	@ (800a6a0 <TIM_Base_SetConfig+0x108>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d108      	bne.n	800a5e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a2b      	ldr	r2, [pc, #172]	@ (800a694 <TIM_Base_SetConfig+0xfc>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d01b      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5f0:	d017      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a28      	ldr	r2, [pc, #160]	@ (800a698 <TIM_Base_SetConfig+0x100>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d013      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a27      	ldr	r2, [pc, #156]	@ (800a69c <TIM_Base_SetConfig+0x104>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d00f      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a26      	ldr	r2, [pc, #152]	@ (800a6a0 <TIM_Base_SetConfig+0x108>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d00b      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a25      	ldr	r2, [pc, #148]	@ (800a6a4 <TIM_Base_SetConfig+0x10c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d007      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a24      	ldr	r2, [pc, #144]	@ (800a6a8 <TIM_Base_SetConfig+0x110>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d003      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a23      	ldr	r2, [pc, #140]	@ (800a6ac <TIM_Base_SetConfig+0x114>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d108      	bne.n	800a634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	4313      	orrs	r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a0e      	ldr	r2, [pc, #56]	@ (800a694 <TIM_Base_SetConfig+0xfc>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d103      	bne.n	800a668 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b01      	cmp	r3, #1
 800a678:	d105      	bne.n	800a686 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f023 0201 	bic.w	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	611a      	str	r2, [r3, #16]
  }
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	40010000 	.word	0x40010000
 800a698:	40000400 	.word	0x40000400
 800a69c:	40000800 	.word	0x40000800
 800a6a0:	40000c00 	.word	0x40000c00
 800a6a4:	40014000 	.word	0x40014000
 800a6a8:	40014400 	.word	0x40014400
 800a6ac:	40014800 	.word	0x40014800

0800a6b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f003 031f 	and.w	r3, r3, #31
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	401a      	ands	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6a1a      	ldr	r2, [r3, #32]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	621a      	str	r2, [r3, #32]
}
 800a6ee:	bf00      	nop
 800a6f0:	371c      	adds	r7, #28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
	...

0800a6fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d101      	bne.n	800a714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a710:	2302      	movs	r3, #2
 800a712:	e050      	b.n	800a7b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a73a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d018      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a760:	d013      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a18      	ldr	r2, [pc, #96]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d00e      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a16      	ldr	r2, [pc, #88]	@ (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d009      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a15      	ldr	r2, [pc, #84]	@ (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d004      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a13      	ldr	r2, [pc, #76]	@ (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d10c      	bne.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	40010000 	.word	0x40010000
 800a7c8:	40000400 	.word	0x40000400
 800a7cc:	40000800 	.word	0x40000800
 800a7d0:	40000c00 	.word	0x40000c00
 800a7d4:	40014000 	.word	0x40014000

0800a7d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a800:	b084      	sub	sp, #16
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	f107 001c 	add.w	r0, r7, #28
 800a80e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a812:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a816:	2b01      	cmp	r3, #1
 800a818:	d123      	bne.n	800a862 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a82e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a842:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a846:	2b01      	cmp	r3, #1
 800a848:	d105      	bne.n	800a856 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f001 fae8 	bl	800be2c <USB_CoreReset>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73fb      	strb	r3, [r7, #15]
 800a860:	e01b      	b.n	800a89a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 fadc 	bl	800be2c <USB_CoreReset>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a878:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d106      	bne.n	800a88e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a884:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a88c:	e005      	b.n	800a89a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a892:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a89a:	7fbb      	ldrb	r3, [r7, #30]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d10b      	bne.n	800a8b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f043 0206 	orr.w	r2, r3, #6
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f043 0220 	orr.w	r2, r3, #32
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8c4:	b004      	add	sp, #16
 800a8c6:	4770      	bx	lr

0800a8c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d165      	bne.n	800a9a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	4a41      	ldr	r2, [pc, #260]	@ (800a9e4 <USB_SetTurnaroundTime+0x11c>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d906      	bls.n	800a8f2 <USB_SetTurnaroundTime+0x2a>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4a40      	ldr	r2, [pc, #256]	@ (800a9e8 <USB_SetTurnaroundTime+0x120>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d202      	bcs.n	800a8f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a8ec:	230f      	movs	r3, #15
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	e062      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	4a3c      	ldr	r2, [pc, #240]	@ (800a9e8 <USB_SetTurnaroundTime+0x120>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d306      	bcc.n	800a908 <USB_SetTurnaroundTime+0x40>
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4a3b      	ldr	r2, [pc, #236]	@ (800a9ec <USB_SetTurnaroundTime+0x124>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d202      	bcs.n	800a908 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a902:	230e      	movs	r3, #14
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	e057      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	4a38      	ldr	r2, [pc, #224]	@ (800a9ec <USB_SetTurnaroundTime+0x124>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d306      	bcc.n	800a91e <USB_SetTurnaroundTime+0x56>
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	4a37      	ldr	r2, [pc, #220]	@ (800a9f0 <USB_SetTurnaroundTime+0x128>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d202      	bcs.n	800a91e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a918:	230d      	movs	r3, #13
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e04c      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	4a33      	ldr	r2, [pc, #204]	@ (800a9f0 <USB_SetTurnaroundTime+0x128>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d306      	bcc.n	800a934 <USB_SetTurnaroundTime+0x6c>
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	4a32      	ldr	r2, [pc, #200]	@ (800a9f4 <USB_SetTurnaroundTime+0x12c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d802      	bhi.n	800a934 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a92e:	230c      	movs	r3, #12
 800a930:	617b      	str	r3, [r7, #20]
 800a932:	e041      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	4a2f      	ldr	r2, [pc, #188]	@ (800a9f4 <USB_SetTurnaroundTime+0x12c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d906      	bls.n	800a94a <USB_SetTurnaroundTime+0x82>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	4a2e      	ldr	r2, [pc, #184]	@ (800a9f8 <USB_SetTurnaroundTime+0x130>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d802      	bhi.n	800a94a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a944:	230b      	movs	r3, #11
 800a946:	617b      	str	r3, [r7, #20]
 800a948:	e036      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	4a2a      	ldr	r2, [pc, #168]	@ (800a9f8 <USB_SetTurnaroundTime+0x130>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d906      	bls.n	800a960 <USB_SetTurnaroundTime+0x98>
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	4a29      	ldr	r2, [pc, #164]	@ (800a9fc <USB_SetTurnaroundTime+0x134>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d802      	bhi.n	800a960 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a95a:	230a      	movs	r3, #10
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	e02b      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	4a26      	ldr	r2, [pc, #152]	@ (800a9fc <USB_SetTurnaroundTime+0x134>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d906      	bls.n	800a976 <USB_SetTurnaroundTime+0xae>
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	4a25      	ldr	r2, [pc, #148]	@ (800aa00 <USB_SetTurnaroundTime+0x138>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d202      	bcs.n	800a976 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a970:	2309      	movs	r3, #9
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e020      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	4a21      	ldr	r2, [pc, #132]	@ (800aa00 <USB_SetTurnaroundTime+0x138>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d306      	bcc.n	800a98c <USB_SetTurnaroundTime+0xc4>
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	4a20      	ldr	r2, [pc, #128]	@ (800aa04 <USB_SetTurnaroundTime+0x13c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d802      	bhi.n	800a98c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a986:	2308      	movs	r3, #8
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	e015      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	4a1d      	ldr	r2, [pc, #116]	@ (800aa04 <USB_SetTurnaroundTime+0x13c>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d906      	bls.n	800a9a2 <USB_SetTurnaroundTime+0xda>
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	4a1c      	ldr	r2, [pc, #112]	@ (800aa08 <USB_SetTurnaroundTime+0x140>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d202      	bcs.n	800a9a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a99c:	2307      	movs	r3, #7
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	e00a      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a9a2:	2306      	movs	r3, #6
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	e007      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d102      	bne.n	800a9b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a9ae:	2309      	movs	r3, #9
 800a9b0:	617b      	str	r3, [r7, #20]
 800a9b2:	e001      	b.n	800a9b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a9b4:	2309      	movs	r3, #9
 800a9b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	029b      	lsls	r3, r3, #10
 800a9cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	00d8acbf 	.word	0x00d8acbf
 800a9e8:	00e4e1c0 	.word	0x00e4e1c0
 800a9ec:	00f42400 	.word	0x00f42400
 800a9f0:	01067380 	.word	0x01067380
 800a9f4:	011a499f 	.word	0x011a499f
 800a9f8:	01312cff 	.word	0x01312cff
 800a9fc:	014ca43f 	.word	0x014ca43f
 800aa00:	016e3600 	.word	0x016e3600
 800aa04:	01a6ab1f 	.word	0x01a6ab1f
 800aa08:	01e84800 	.word	0x01e84800

0800aa0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f043 0201 	orr.w	r2, r3, #1
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f023 0201 	bic.w	r2, r3, #1
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa6c:	78fb      	ldrb	r3, [r7, #3]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d115      	bne.n	800aa9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa7e:	200a      	movs	r0, #10
 800aa80:	f7fa fdb4 	bl	80055ec <HAL_Delay>
      ms += 10U;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	330a      	adds	r3, #10
 800aa88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 f93f 	bl	800bd0e <USB_GetMode>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d01e      	beq.n	800aad4 <USB_SetCurrentMode+0x84>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa9a:	d9f0      	bls.n	800aa7e <USB_SetCurrentMode+0x2e>
 800aa9c:	e01a      	b.n	800aad4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa9e:	78fb      	ldrb	r3, [r7, #3]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d115      	bne.n	800aad0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aab0:	200a      	movs	r0, #10
 800aab2:	f7fa fd9b 	bl	80055ec <HAL_Delay>
      ms += 10U;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	330a      	adds	r3, #10
 800aaba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 f926 	bl	800bd0e <USB_GetMode>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d005      	beq.n	800aad4 <USB_SetCurrentMode+0x84>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2bc7      	cmp	r3, #199	@ 0xc7
 800aacc:	d9f0      	bls.n	800aab0 <USB_SetCurrentMode+0x60>
 800aace:	e001      	b.n	800aad4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e005      	b.n	800aae0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2bc8      	cmp	r3, #200	@ 0xc8
 800aad8:	d101      	bne.n	800aade <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aae8:	b084      	sub	sp, #16
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b086      	sub	sp, #24
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aaf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ab02:	2300      	movs	r3, #0
 800ab04:	613b      	str	r3, [r7, #16]
 800ab06:	e009      	b.n	800ab1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	3340      	adds	r3, #64	@ 0x40
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	2b0e      	cmp	r3, #14
 800ab20:	d9f2      	bls.n	800ab08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ab22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d11c      	bne.n	800ab64 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab38:	f043 0302 	orr.w	r3, r3, #2
 800ab3c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab62:	e00b      	b.n	800ab7c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab68:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab74:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab82:	461a      	mov	r2, r3
 800ab84:	2300      	movs	r3, #0
 800ab86:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab88:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d10d      	bne.n	800abac <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab98:	2100      	movs	r1, #0
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f968 	bl	800ae70 <USB_SetDevSpeed>
 800aba0:	e008      	b.n	800abb4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aba2:	2101      	movs	r1, #1
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f963 	bl	800ae70 <USB_SetDevSpeed>
 800abaa:	e003      	b.n	800abb4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800abac:	2103      	movs	r1, #3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f95e 	bl	800ae70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800abb4:	2110      	movs	r1, #16
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f8fa 	bl	800adb0 <USB_FlushTxFifo>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f924 	bl	800ae14 <USB_FlushRxFifo>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abdc:	461a      	mov	r2, r3
 800abde:	2300      	movs	r3, #0
 800abe0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abe8:	461a      	mov	r2, r3
 800abea:	2300      	movs	r3, #0
 800abec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abf4:	461a      	mov	r2, r3
 800abf6:	2300      	movs	r3, #0
 800abf8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abfa:	2300      	movs	r3, #0
 800abfc:	613b      	str	r3, [r7, #16]
 800abfe:	e043      	b.n	800ac88 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac16:	d118      	bne.n	800ac4a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10a      	bne.n	800ac34 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	e013      	b.n	800ac5c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac40:	461a      	mov	r2, r3
 800ac42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	e008      	b.n	800ac5c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac56:	461a      	mov	r2, r3
 800ac58:	2300      	movs	r3, #0
 800ac5a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	015a      	lsls	r2, r3, #5
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac68:	461a      	mov	r2, r3
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ac80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	3301      	adds	r3, #1
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d3b5      	bcc.n	800ac00 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac94:	2300      	movs	r3, #0
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	e043      	b.n	800ad22 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acb0:	d118      	bne.n	800ace4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10a      	bne.n	800acce <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc4:	461a      	mov	r2, r3
 800acc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	e013      	b.n	800acf6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acda:	461a      	mov	r2, r3
 800acdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	e008      	b.n	800acf6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acf0:	461a      	mov	r2, r3
 800acf2:	2300      	movs	r3, #0
 800acf4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad02:	461a      	mov	r2, r3
 800ad04:	2300      	movs	r3, #0
 800ad06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad14:	461a      	mov	r2, r3
 800ad16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	613b      	str	r3, [r7, #16]
 800ad22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad26:	461a      	mov	r2, r3
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d3b5      	bcc.n	800ac9a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ad4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d105      	bne.n	800ad64 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	f043 0210 	orr.w	r2, r3, #16
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	699a      	ldr	r2, [r3, #24]
 800ad68:	4b10      	ldr	r3, [pc, #64]	@ (800adac <USB_DevInit+0x2c4>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	f043 0208 	orr.w	r2, r3, #8
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d107      	bne.n	800ad9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad94:	f043 0304 	orr.w	r3, r3, #4
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ada8:	b004      	add	sp, #16
 800adaa:	4770      	bx	lr
 800adac:	803c3800 	.word	0x803c3800

0800adb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adca:	d901      	bls.n	800add0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800adcc:	2303      	movs	r3, #3
 800adce:	e01b      	b.n	800ae08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	daf2      	bge.n	800adbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	019b      	lsls	r3, r3, #6
 800ade0:	f043 0220 	orr.w	r2, r3, #32
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3301      	adds	r3, #1
 800adec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adf4:	d901      	bls.n	800adfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e006      	b.n	800ae08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b20      	cmp	r3, #32
 800ae04:	d0f0      	beq.n	800ade8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3301      	adds	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae2c:	d901      	bls.n	800ae32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e018      	b.n	800ae64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	daf2      	bge.n	800ae20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2210      	movs	r2, #16
 800ae42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae50:	d901      	bls.n	800ae56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e006      	b.n	800ae64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	f003 0310 	and.w	r3, r3, #16
 800ae5e:	2b10      	cmp	r3, #16
 800ae60:	d0f0      	beq.n	800ae44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae90:	4313      	orrs	r3, r2
 800ae92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b087      	sub	sp, #28
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f003 0306 	and.w	r3, r3, #6
 800aeba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aec2:	2300      	movs	r3, #0
 800aec4:	75fb      	strb	r3, [r7, #23]
 800aec6:	e00a      	b.n	800aede <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d002      	beq.n	800aed4 <USB_GetDevSpeed+0x32>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b06      	cmp	r3, #6
 800aed2:	d102      	bne.n	800aeda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aed4:	2302      	movs	r3, #2
 800aed6:	75fb      	strb	r3, [r7, #23]
 800aed8:	e001      	b.n	800aede <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aeda:	230f      	movs	r3, #15
 800aedc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aede:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	371c      	adds	r7, #28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	785b      	ldrb	r3, [r3, #1]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d13a      	bne.n	800af7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af0e:	69da      	ldr	r2, [r3, #28]
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 030f 	and.w	r3, r3, #15
 800af18:	2101      	movs	r1, #1
 800af1a:	fa01 f303 	lsl.w	r3, r1, r3
 800af1e:	b29b      	uxth	r3, r3
 800af20:	68f9      	ldr	r1, [r7, #12]
 800af22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af26:	4313      	orrs	r3, r2
 800af28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	4413      	add	r3, r2
 800af32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d155      	bne.n	800afec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	015a      	lsls	r2, r3, #5
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	4413      	add	r3, r2
 800af48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	791b      	ldrb	r3, [r3, #4]
 800af5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	059b      	lsls	r3, r3, #22
 800af62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af64:	4313      	orrs	r3, r2
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	0151      	lsls	r1, r2, #5
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	440a      	add	r2, r1
 800af6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	e036      	b.n	800afec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af84:	69da      	ldr	r2, [r3, #28]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	2101      	movs	r1, #1
 800af90:	fa01 f303 	lsl.w	r3, r1, r3
 800af94:	041b      	lsls	r3, r3, #16
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af9c:	4313      	orrs	r3, r2
 800af9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d11a      	bne.n	800afec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	015a      	lsls	r2, r3, #5
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	4413      	add	r3, r2
 800afbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	791b      	ldrb	r3, [r3, #4]
 800afd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800afd2:	430b      	orrs	r3, r1
 800afd4:	4313      	orrs	r3, r2
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	0151      	lsls	r1, r2, #5
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	440a      	add	r2, r1
 800afde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
	...

0800affc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d161      	bne.n	800b0dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b02a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b02e:	d11f      	bne.n	800b070 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4413      	add	r3, r2
 800b038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	0151      	lsls	r1, r2, #5
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	440a      	add	r2, r1
 800b046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b04a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b04e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	0151      	lsls	r1, r2, #5
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	440a      	add	r2, r1
 800b066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b06a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b06e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	f003 030f 	and.w	r3, r3, #15
 800b080:	2101      	movs	r1, #1
 800b082:	fa01 f303 	lsl.w	r3, r1, r3
 800b086:	b29b      	uxth	r3, r3
 800b088:	43db      	mvns	r3, r3
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b090:	4013      	ands	r3, r2
 800b092:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b09a:	69da      	ldr	r2, [r3, #28]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	f003 030f 	and.w	r3, r3, #15
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	43db      	mvns	r3, r3
 800b0ae:	68f9      	ldr	r1, [r7, #12]
 800b0b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	0159      	lsls	r1, r3, #5
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	440b      	add	r3, r1
 800b0ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4b35      	ldr	r3, [pc, #212]	@ (800b1ac <USB_DeactivateEndpoint+0x1b0>)
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	600b      	str	r3, [r1, #0]
 800b0da:	e060      	b.n	800b19e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0f2:	d11f      	bne.n	800b134 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b10e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b112:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	0151      	lsls	r1, r2, #5
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	440a      	add	r2, r1
 800b12a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b12e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b132:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b13a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	f003 030f 	and.w	r3, r3, #15
 800b144:	2101      	movs	r1, #1
 800b146:	fa01 f303 	lsl.w	r3, r1, r3
 800b14a:	041b      	lsls	r3, r3, #16
 800b14c:	43db      	mvns	r3, r3
 800b14e:	68f9      	ldr	r1, [r7, #12]
 800b150:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b154:	4013      	ands	r3, r2
 800b156:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b15e:	69da      	ldr	r2, [r3, #28]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	f003 030f 	and.w	r3, r3, #15
 800b168:	2101      	movs	r1, #1
 800b16a:	fa01 f303 	lsl.w	r3, r1, r3
 800b16e:	041b      	lsls	r3, r3, #16
 800b170:	43db      	mvns	r3, r3
 800b172:	68f9      	ldr	r1, [r7, #12]
 800b174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b178:	4013      	ands	r3, r2
 800b17a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	0159      	lsls	r1, r3, #5
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	440b      	add	r3, r1
 800b192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b196:	4619      	mov	r1, r3
 800b198:	4b05      	ldr	r3, [pc, #20]	@ (800b1b0 <USB_DeactivateEndpoint+0x1b4>)
 800b19a:	4013      	ands	r3, r2
 800b19c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	ec337800 	.word	0xec337800
 800b1b0:	eff37800 	.word	0xeff37800

0800b1b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08a      	sub	sp, #40	@ 0x28
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	785b      	ldrb	r3, [r3, #1]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	f040 817f 	bne.w	800b4d4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d132      	bne.n	800b244 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	69fa      	ldr	r2, [r7, #28]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1f8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b1fc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	0151      	lsls	r1, r2, #5
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	440a      	add	r2, r1
 800b218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b21c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	0151      	lsls	r1, r2, #5
 800b234:	69fa      	ldr	r2, [r7, #28]
 800b236:	440a      	add	r2, r1
 800b238:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b23c:	0cdb      	lsrs	r3, r3, #19
 800b23e:	04db      	lsls	r3, r3, #19
 800b240:	6113      	str	r3, [r2, #16]
 800b242:	e097      	b.n	800b374 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	69ba      	ldr	r2, [r7, #24]
 800b254:	0151      	lsls	r1, r2, #5
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	440a      	add	r2, r1
 800b25a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b25e:	0cdb      	lsrs	r3, r3, #19
 800b260:	04db      	lsls	r3, r3, #19
 800b262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	0151      	lsls	r1, r2, #5
 800b276:	69fa      	ldr	r2, [r7, #28]
 800b278:	440a      	add	r2, r1
 800b27a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b27e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b282:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b286:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d11a      	bne.n	800b2c4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	691a      	ldr	r2, [r3, #16]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	429a      	cmp	r2, r3
 800b298:	d903      	bls.n	800b2a2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	689a      	ldr	r2, [r3, #8]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	0151      	lsls	r1, r2, #5
 800b2b4:	69fa      	ldr	r2, [r7, #28]
 800b2b6:	440a      	add	r2, r1
 800b2b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2c0:	6113      	str	r3, [r2, #16]
 800b2c2:	e044      	b.n	800b34e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	691a      	ldr	r2, [r3, #16]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	1e5a      	subs	r2, r3, #1
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2e6:	691a      	ldr	r2, [r3, #16]
 800b2e8:	8afb      	ldrh	r3, [r7, #22]
 800b2ea:	04d9      	lsls	r1, r3, #19
 800b2ec:	4ba4      	ldr	r3, [pc, #656]	@ (800b580 <USB_EPStartXfer+0x3cc>)
 800b2ee:	400b      	ands	r3, r1
 800b2f0:	69b9      	ldr	r1, [r7, #24]
 800b2f2:	0148      	lsls	r0, r1, #5
 800b2f4:	69f9      	ldr	r1, [r7, #28]
 800b2f6:	4401      	add	r1, r0
 800b2f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	791b      	ldrb	r3, [r3, #4]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d122      	bne.n	800b34e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	0151      	lsls	r1, r2, #5
 800b31a:	69fa      	ldr	r2, [r7, #28]
 800b31c:	440a      	add	r2, r1
 800b31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b322:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b326:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b334:	691a      	ldr	r2, [r3, #16]
 800b336:	8afb      	ldrh	r3, [r7, #22]
 800b338:	075b      	lsls	r3, r3, #29
 800b33a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b33e:	69b9      	ldr	r1, [r7, #24]
 800b340:	0148      	lsls	r0, r1, #5
 800b342:	69f9      	ldr	r1, [r7, #28]
 800b344:	4401      	add	r1, r0
 800b346:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b34a:	4313      	orrs	r3, r2
 800b34c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	015a      	lsls	r2, r3, #5
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	4413      	add	r3, r2
 800b356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b35a:	691a      	ldr	r2, [r3, #16]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b364:	69b9      	ldr	r1, [r7, #24]
 800b366:	0148      	lsls	r0, r1, #5
 800b368:	69f9      	ldr	r1, [r7, #28]
 800b36a:	4401      	add	r1, r0
 800b36c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b370:	4313      	orrs	r3, r2
 800b372:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d14b      	bne.n	800b412 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d009      	beq.n	800b396 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b38e:	461a      	mov	r2, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	69db      	ldr	r3, [r3, #28]
 800b394:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	791b      	ldrb	r3, [r3, #4]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d128      	bne.n	800b3f0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d110      	bne.n	800b3d0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	69ba      	ldr	r2, [r7, #24]
 800b3be:	0151      	lsls	r1, r2, #5
 800b3c0:	69fa      	ldr	r2, [r7, #28]
 800b3c2:	440a      	add	r2, r1
 800b3c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b3cc:	6013      	str	r3, [r2, #0]
 800b3ce:	e00f      	b.n	800b3f0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	69ba      	ldr	r2, [r7, #24]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	69fa      	ldr	r2, [r7, #28]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3ee:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	69fa      	ldr	r2, [r7, #28]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b40a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	e166      	b.n	800b6e0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	69fa      	ldr	r2, [r7, #28]
 800b426:	440a      	add	r2, r1
 800b428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b42c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b430:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d015      	beq.n	800b466 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 814e 	beq.w	800b6e0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b44a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	f003 030f 	and.w	r3, r3, #15
 800b454:	2101      	movs	r1, #1
 800b456:	fa01 f303 	lsl.w	r3, r1, r3
 800b45a:	69f9      	ldr	r1, [r7, #28]
 800b45c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b460:	4313      	orrs	r3, r2
 800b462:	634b      	str	r3, [r1, #52]	@ 0x34
 800b464:	e13c      	b.n	800b6e0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b472:	2b00      	cmp	r3, #0
 800b474:	d110      	bne.n	800b498 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	015a      	lsls	r2, r3, #5
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	0151      	lsls	r1, r2, #5
 800b488:	69fa      	ldr	r2, [r7, #28]
 800b48a:	440a      	add	r2, r1
 800b48c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b490:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	e00f      	b.n	800b4b8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69ba      	ldr	r2, [r7, #24]
 800b4a8:	0151      	lsls	r1, r2, #5
 800b4aa:	69fa      	ldr	r2, [r7, #28]
 800b4ac:	440a      	add	r2, r1
 800b4ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	68d9      	ldr	r1, [r3, #12]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	781a      	ldrb	r2, [r3, #0]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	b298      	uxth	r0, r3
 800b4c6:	79fb      	ldrb	r3, [r7, #7]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 f9b9 	bl	800b844 <USB_WritePacket>
 800b4d2:	e105      	b.n	800b6e0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	0151      	lsls	r1, r2, #5
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	440a      	add	r2, r1
 800b4ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4ee:	0cdb      	lsrs	r3, r3, #19
 800b4f0:	04db      	lsls	r3, r3, #19
 800b4f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	015a      	lsls	r2, r3, #5
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	69ba      	ldr	r2, [r7, #24]
 800b504:	0151      	lsls	r1, r2, #5
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	440a      	add	r2, r1
 800b50a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b50e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b512:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b516:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d132      	bne.n	800b584 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	689a      	ldr	r2, [r3, #8]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	689a      	ldr	r2, [r3, #8]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b542:	691a      	ldr	r2, [r3, #16]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	6a1b      	ldr	r3, [r3, #32]
 800b548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b54c:	69b9      	ldr	r1, [r7, #24]
 800b54e:	0148      	lsls	r0, r1, #5
 800b550:	69f9      	ldr	r1, [r7, #28]
 800b552:	4401      	add	r1, r0
 800b554:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b558:	4313      	orrs	r3, r2
 800b55a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	0151      	lsls	r1, r2, #5
 800b56e:	69fa      	ldr	r2, [r7, #28]
 800b570:	440a      	add	r2, r1
 800b572:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b576:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b57a:	6113      	str	r3, [r2, #16]
 800b57c:	e062      	b.n	800b644 <USB_EPStartXfer+0x490>
 800b57e:	bf00      	nop
 800b580:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d123      	bne.n	800b5d4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b598:	691a      	ldr	r2, [r3, #16]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5a2:	69b9      	ldr	r1, [r7, #24]
 800b5a4:	0148      	lsls	r0, r1, #5
 800b5a6:	69f9      	ldr	r1, [r7, #28]
 800b5a8:	4401      	add	r1, r0
 800b5aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	69ba      	ldr	r2, [r7, #24]
 800b5c2:	0151      	lsls	r1, r2, #5
 800b5c4:	69fa      	ldr	r2, [r7, #28]
 800b5c6:	440a      	add	r2, r1
 800b5c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5d0:	6113      	str	r3, [r2, #16]
 800b5d2:	e037      	b.n	800b644 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	691a      	ldr	r2, [r3, #16]
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	4413      	add	r3, r2
 800b5de:	1e5a      	subs	r2, r3, #1
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	8afa      	ldrh	r2, [r7, #22]
 800b5f0:	fb03 f202 	mul.w	r2, r3, r2
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b604:	691a      	ldr	r2, [r3, #16]
 800b606:	8afb      	ldrh	r3, [r7, #22]
 800b608:	04d9      	lsls	r1, r3, #19
 800b60a:	4b38      	ldr	r3, [pc, #224]	@ (800b6ec <USB_EPStartXfer+0x538>)
 800b60c:	400b      	ands	r3, r1
 800b60e:	69b9      	ldr	r1, [r7, #24]
 800b610:	0148      	lsls	r0, r1, #5
 800b612:	69f9      	ldr	r1, [r7, #28]
 800b614:	4401      	add	r1, r0
 800b616:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b61a:	4313      	orrs	r3, r2
 800b61c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	015a      	lsls	r2, r3, #5
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	4413      	add	r3, r2
 800b626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b634:	69b9      	ldr	r1, [r7, #24]
 800b636:	0148      	lsls	r0, r1, #5
 800b638:	69f9      	ldr	r1, [r7, #28]
 800b63a:	4401      	add	r1, r0
 800b63c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b640:	4313      	orrs	r3, r2
 800b642:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b644:	79fb      	ldrb	r3, [r7, #7]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d10d      	bne.n	800b666 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d009      	beq.n	800b666 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	68d9      	ldr	r1, [r3, #12]
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b662:	460a      	mov	r2, r1
 800b664:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	791b      	ldrb	r3, [r3, #4]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d128      	bne.n	800b6c0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d110      	bne.n	800b6a0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	015a      	lsls	r2, r3, #5
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	4413      	add	r3, r2
 800b686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	69ba      	ldr	r2, [r7, #24]
 800b68e:	0151      	lsls	r1, r2, #5
 800b690:	69fa      	ldr	r2, [r7, #28]
 800b692:	440a      	add	r2, r1
 800b694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b698:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	e00f      	b.n	800b6c0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69ba      	ldr	r2, [r7, #24]
 800b6b0:	0151      	lsls	r1, r2, #5
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	440a      	add	r2, r1
 800b6b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	0151      	lsls	r1, r2, #5
 800b6d2:	69fa      	ldr	r2, [r7, #28]
 800b6d4:	440a      	add	r2, r1
 800b6d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b6de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	1ff80000 	.word	0x1ff80000

0800b6f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	785b      	ldrb	r3, [r3, #1]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d14a      	bne.n	800b7a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b726:	f040 8086 	bne.w	800b836 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	7812      	ldrb	r2, [r2, #0]
 800b73e:	0151      	lsls	r1, r2, #5
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	440a      	add	r2, r1
 800b744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b748:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b74c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	7812      	ldrb	r2, [r2, #0]
 800b762:	0151      	lsls	r1, r2, #5
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	440a      	add	r2, r1
 800b768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b76c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b770:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3301      	adds	r3, #1
 800b776:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b77e:	4293      	cmp	r3, r2
 800b780:	d902      	bls.n	800b788 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	75fb      	strb	r3, [r7, #23]
          break;
 800b786:	e056      	b.n	800b836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	015a      	lsls	r2, r3, #5
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	4413      	add	r3, r2
 800b792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b79c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7a0:	d0e7      	beq.n	800b772 <USB_EPStopXfer+0x82>
 800b7a2:	e048      	b.n	800b836 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7bc:	d13b      	bne.n	800b836 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	015a      	lsls	r2, r3, #5
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	7812      	ldrb	r2, [r2, #0]
 800b7d2:	0151      	lsls	r1, r2, #5
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	440a      	add	r2, r1
 800b7d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b7e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	7812      	ldrb	r2, [r2, #0]
 800b7f6:	0151      	lsls	r1, r2, #5
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	440a      	add	r2, r1
 800b7fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b800:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b804:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3301      	adds	r3, #1
 800b80a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b812:	4293      	cmp	r3, r2
 800b814:	d902      	bls.n	800b81c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	75fb      	strb	r3, [r7, #23]
          break;
 800b81a:	e00c      	b.n	800b836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	015a      	lsls	r2, r3, #5
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	4413      	add	r3, r2
 800b826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b834:	d0e7      	beq.n	800b806 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b836:	7dfb      	ldrb	r3, [r7, #23]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	371c      	adds	r7, #28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b844:	b480      	push	{r7}
 800b846:	b089      	sub	sp, #36	@ 0x24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	4611      	mov	r1, r2
 800b850:	461a      	mov	r2, r3
 800b852:	460b      	mov	r3, r1
 800b854:	71fb      	strb	r3, [r7, #7]
 800b856:	4613      	mov	r3, r2
 800b858:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b862:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b866:	2b00      	cmp	r3, #0
 800b868:	d123      	bne.n	800b8b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b86a:	88bb      	ldrh	r3, [r7, #4]
 800b86c:	3303      	adds	r3, #3
 800b86e:	089b      	lsrs	r3, r3, #2
 800b870:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b872:	2300      	movs	r3, #0
 800b874:	61bb      	str	r3, [r7, #24]
 800b876:	e018      	b.n	800b8aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b878:	79fb      	ldrb	r3, [r7, #7]
 800b87a:	031a      	lsls	r2, r3, #12
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b884:	461a      	mov	r2, r3
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	3301      	adds	r3, #1
 800b890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	3301      	adds	r3, #1
 800b896:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	3301      	adds	r3, #1
 800b89c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	61bb      	str	r3, [r7, #24]
 800b8aa:	69ba      	ldr	r2, [r7, #24]
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d3e2      	bcc.n	800b878 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3724      	adds	r7, #36	@ 0x24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b08b      	sub	sp, #44	@ 0x2c
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8d6:	88fb      	ldrh	r3, [r7, #6]
 800b8d8:	089b      	lsrs	r3, r3, #2
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8de:	88fb      	ldrh	r3, [r7, #6]
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	623b      	str	r3, [r7, #32]
 800b8ea:	e014      	b.n	800b916 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b900:	3301      	adds	r3, #1
 800b902:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b906:	3301      	adds	r3, #1
 800b908:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90c:	3301      	adds	r3, #1
 800b90e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	3301      	adds	r3, #1
 800b914:	623b      	str	r3, [r7, #32]
 800b916:	6a3a      	ldr	r2, [r7, #32]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d3e6      	bcc.n	800b8ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b91e:	8bfb      	ldrh	r3, [r7, #30]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d01e      	beq.n	800b962 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b924:	2300      	movs	r3, #0
 800b926:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b92e:	461a      	mov	r2, r3
 800b930:	f107 0310 	add.w	r3, r7, #16
 800b934:	6812      	ldr	r2, [r2, #0]
 800b936:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	6a3b      	ldr	r3, [r7, #32]
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	fa22 f303 	lsr.w	r3, r2, r3
 800b944:	b2da      	uxtb	r2, r3
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	701a      	strb	r2, [r3, #0]
      i++;
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	3301      	adds	r3, #1
 800b94e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b952:	3301      	adds	r3, #1
 800b954:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b956:	8bfb      	ldrh	r3, [r7, #30]
 800b958:	3b01      	subs	r3, #1
 800b95a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b95c:	8bfb      	ldrh	r3, [r7, #30]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1ea      	bne.n	800b938 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b964:	4618      	mov	r0, r3
 800b966:	372c      	adds	r7, #44	@ 0x2c
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	785b      	ldrb	r3, [r3, #1]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d12c      	bne.n	800b9e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	db12      	blt.n	800b9c4 <USB_EPSetStall+0x54>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00f      	beq.n	800b9c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	015a      	lsls	r2, r3, #5
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	0151      	lsls	r1, r2, #5
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	440a      	add	r2, r1
 800b9ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b9c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	0151      	lsls	r1, r2, #5
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	440a      	add	r2, r1
 800b9da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	e02b      	b.n	800ba3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	db12      	blt.n	800ba1e <USB_EPSetStall+0xae>
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00f      	beq.n	800ba1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	015a      	lsls	r2, r3, #5
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	4413      	add	r3, r2
 800ba06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	0151      	lsls	r1, r2, #5
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	440a      	add	r2, r1
 800ba14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	015a      	lsls	r2, r3, #5
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4413      	add	r3, r2
 800ba26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	0151      	lsls	r1, r2, #5
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	440a      	add	r2, r1
 800ba34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ba3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	785b      	ldrb	r3, [r3, #1]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d128      	bne.n	800baba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	0151      	lsls	r1, r2, #5
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	440a      	add	r2, r1
 800ba7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	791b      	ldrb	r3, [r3, #4]
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d003      	beq.n	800ba98 <USB_EPClearStall+0x4c>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	791b      	ldrb	r3, [r3, #4]
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d138      	bne.n	800bb0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	015a      	lsls	r2, r3, #5
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	4413      	add	r3, r2
 800baa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	0151      	lsls	r1, r2, #5
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	440a      	add	r2, r1
 800baae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	e027      	b.n	800bb0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	015a      	lsls	r2, r3, #5
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4413      	add	r3, r2
 800bac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	0151      	lsls	r1, r2, #5
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	440a      	add	r2, r1
 800bad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bad4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bad8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	791b      	ldrb	r3, [r3, #4]
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d003      	beq.n	800baea <USB_EPClearStall+0x9e>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	791b      	ldrb	r3, [r3, #4]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d10f      	bne.n	800bb0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	0151      	lsls	r1, r2, #5
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	440a      	add	r2, r1
 800bb00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bb3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	78fb      	ldrb	r3, [r7, #3]
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bb4c:	68f9      	ldr	r1, [r7, #12]
 800bb4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb52:	4313      	orrs	r3, r2
 800bb54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb7e:	f023 0303 	bic.w	r3, r3, #3
 800bb82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb92:	f023 0302 	bic.w	r3, r3, #2
 800bb96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b085      	sub	sp, #20
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bbc0:	f023 0303 	bic.w	r3, r3, #3
 800bbc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbd4:	f043 0302 	orr.w	r3, r3, #2
 800bbd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc00:	68fb      	ldr	r3, [r7, #12]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	4013      	ands	r3, r2
 800bc30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	0c1b      	lsrs	r3, r3, #16
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b085      	sub	sp, #20
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc5e:	69db      	ldr	r3, [r3, #28]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	4013      	ands	r3, r2
 800bc64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	b29b      	uxth	r3, r3
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b085      	sub	sp, #20
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc86:	78fb      	ldrb	r3, [r7, #3]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	4013      	ands	r3, r2
 800bca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bca4:	68bb      	ldr	r3, [r7, #8]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b087      	sub	sp, #28
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bcd6:	78fb      	ldrb	r3, [r7, #3]
 800bcd8:	f003 030f 	and.w	r3, r3, #15
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	fa22 f303 	lsr.w	r3, r2, r3
 800bce2:	01db      	lsls	r3, r3, #7
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bcec:	78fb      	ldrb	r3, [r7, #3]
 800bcee:	015a      	lsls	r2, r3, #5
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd00:	68bb      	ldr	r3, [r7, #8]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	f003 0301 	and.w	r3, r3, #1
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b085      	sub	sp, #20
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bd48:	f023 0307 	bic.w	r3, r3, #7
 800bd4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	333c      	adds	r3, #60	@ 0x3c
 800bd86:	3304      	adds	r3, #4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	4a26      	ldr	r2, [pc, #152]	@ (800be28 <USB_EP0_OutStart+0xb8>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d90a      	bls.n	800bdaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bda0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bda4:	d101      	bne.n	800bdaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	e037      	b.n	800be1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bdc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdd8:	f043 0318 	orr.w	r3, r3, #24
 800bddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bdf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bdf2:	7afb      	ldrb	r3, [r7, #11]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d10f      	bne.n	800be18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdfe:	461a      	mov	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be12:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800be16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	4f54300a 	.word	0x4f54300a

0800be2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	3301      	adds	r3, #1
 800be3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be44:	d901      	bls.n	800be4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e01b      	b.n	800be82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	daf2      	bge.n	800be38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	f043 0201 	orr.w	r2, r3, #1
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	3301      	adds	r3, #1
 800be66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be6e:	d901      	bls.n	800be74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e006      	b.n	800be82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d0f0      	beq.n	800be62 <USB_CoreReset+0x36>

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
	...

0800be90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bea0:	f002 fcf2 	bl	800e888 <USBD_static_malloc>
 800bea4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d109      	bne.n	800bec0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	32b0      	adds	r2, #176	@ 0xb0
 800beb6:	2100      	movs	r1, #0
 800beb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bebc:	2302      	movs	r3, #2
 800bebe:	e0d4      	b.n	800c06a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bec0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bec4:	2100      	movs	r1, #0
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f004 f911 	bl	80100ee <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	32b0      	adds	r2, #176	@ 0xb0
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	32b0      	adds	r2, #176	@ 0xb0
 800bee6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	7c1b      	ldrb	r3, [r3, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d138      	bne.n	800bf6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bef8:	4b5e      	ldr	r3, [pc, #376]	@ (800c074 <USBD_CDC_Init+0x1e4>)
 800befa:	7819      	ldrb	r1, [r3, #0]
 800befc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf00:	2202      	movs	r2, #2
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f002 fb9d 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf08:	4b5a      	ldr	r3, [pc, #360]	@ (800c074 <USBD_CDC_Init+0x1e4>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	f003 020f 	and.w	r2, r3, #15
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	440b      	add	r3, r1
 800bf1c:	3324      	adds	r3, #36	@ 0x24
 800bf1e:	2201      	movs	r2, #1
 800bf20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf22:	4b55      	ldr	r3, [pc, #340]	@ (800c078 <USBD_CDC_Init+0x1e8>)
 800bf24:	7819      	ldrb	r1, [r3, #0]
 800bf26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f002 fb88 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf32:	4b51      	ldr	r3, [pc, #324]	@ (800c078 <USBD_CDC_Init+0x1e8>)
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	f003 020f 	and.w	r2, r3, #15
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf4e:	4b4b      	ldr	r3, [pc, #300]	@ (800c07c <USBD_CDC_Init+0x1ec>)
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	f003 020f 	and.w	r2, r3, #15
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	440b      	add	r3, r1
 800bf62:	3326      	adds	r3, #38	@ 0x26
 800bf64:	2210      	movs	r2, #16
 800bf66:	801a      	strh	r2, [r3, #0]
 800bf68:	e035      	b.n	800bfd6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf6a:	4b42      	ldr	r3, [pc, #264]	@ (800c074 <USBD_CDC_Init+0x1e4>)
 800bf6c:	7819      	ldrb	r1, [r3, #0]
 800bf6e:	2340      	movs	r3, #64	@ 0x40
 800bf70:	2202      	movs	r2, #2
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f002 fb65 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf78:	4b3e      	ldr	r3, [pc, #248]	@ (800c074 <USBD_CDC_Init+0x1e4>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	f003 020f 	and.w	r2, r3, #15
 800bf80:	6879      	ldr	r1, [r7, #4]
 800bf82:	4613      	mov	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3324      	adds	r3, #36	@ 0x24
 800bf8e:	2201      	movs	r2, #1
 800bf90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf92:	4b39      	ldr	r3, [pc, #228]	@ (800c078 <USBD_CDC_Init+0x1e8>)
 800bf94:	7819      	ldrb	r1, [r3, #0]
 800bf96:	2340      	movs	r3, #64	@ 0x40
 800bf98:	2202      	movs	r2, #2
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f002 fb51 	bl	800e642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bfa0:	4b35      	ldr	r3, [pc, #212]	@ (800c078 <USBD_CDC_Init+0x1e8>)
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	f003 020f 	and.w	r2, r3, #15
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bfb8:	2201      	movs	r2, #1
 800bfba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfbc:	4b2f      	ldr	r3, [pc, #188]	@ (800c07c <USBD_CDC_Init+0x1ec>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f003 020f 	and.w	r2, r3, #15
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	3326      	adds	r3, #38	@ 0x26
 800bfd2:	2210      	movs	r2, #16
 800bfd4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfd6:	4b29      	ldr	r3, [pc, #164]	@ (800c07c <USBD_CDC_Init+0x1ec>)
 800bfd8:	7819      	ldrb	r1, [r3, #0]
 800bfda:	2308      	movs	r3, #8
 800bfdc:	2203      	movs	r2, #3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f002 fb2f 	bl	800e642 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bfe4:	4b25      	ldr	r3, [pc, #148]	@ (800c07c <USBD_CDC_Init+0x1ec>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	f003 020f 	and.w	r2, r3, #15
 800bfec:	6879      	ldr	r1, [r7, #4]
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	440b      	add	r3, r1
 800bff8:	3324      	adds	r3, #36	@ 0x24
 800bffa:	2201      	movs	r2, #1
 800bffc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	33b0      	adds	r3, #176	@ 0xb0
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c034:	2302      	movs	r3, #2
 800c036:	e018      	b.n	800c06a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	7c1b      	ldrb	r3, [r3, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10a      	bne.n	800c056 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c040:	4b0d      	ldr	r3, [pc, #52]	@ (800c078 <USBD_CDC_Init+0x1e8>)
 800c042:	7819      	ldrb	r1, [r3, #0]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c04a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f002 fbe6 	bl	800e820 <USBD_LL_PrepareReceive>
 800c054:	e008      	b.n	800c068 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c056:	4b08      	ldr	r3, [pc, #32]	@ (800c078 <USBD_CDC_Init+0x1e8>)
 800c058:	7819      	ldrb	r1, [r3, #0]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c060:	2340      	movs	r3, #64	@ 0x40
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f002 fbdc 	bl	800e820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20000093 	.word	0x20000093
 800c078:	20000094 	.word	0x20000094
 800c07c:	20000095 	.word	0x20000095

0800c080 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c08c:	4b3a      	ldr	r3, [pc, #232]	@ (800c178 <USBD_CDC_DeInit+0xf8>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f002 fafb 	bl	800e68e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c098:	4b37      	ldr	r3, [pc, #220]	@ (800c178 <USBD_CDC_DeInit+0xf8>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	f003 020f 	and.w	r2, r3, #15
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	3324      	adds	r3, #36	@ 0x24
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c0b2:	4b32      	ldr	r3, [pc, #200]	@ (800c17c <USBD_CDC_DeInit+0xfc>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f002 fae8 	bl	800e68e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c0be:	4b2f      	ldr	r3, [pc, #188]	@ (800c17c <USBD_CDC_DeInit+0xfc>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	f003 020f 	and.w	r2, r3, #15
 800c0c6:	6879      	ldr	r1, [r7, #4]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	440b      	add	r3, r1
 800c0d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c0da:	4b29      	ldr	r3, [pc, #164]	@ (800c180 <USBD_CDC_DeInit+0x100>)
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f002 fad4 	bl	800e68e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c0e6:	4b26      	ldr	r3, [pc, #152]	@ (800c180 <USBD_CDC_DeInit+0x100>)
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	f003 020f 	and.w	r2, r3, #15
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	440b      	add	r3, r1
 800c0fa:	3324      	adds	r3, #36	@ 0x24
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c100:	4b1f      	ldr	r3, [pc, #124]	@ (800c180 <USBD_CDC_DeInit+0x100>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	f003 020f 	and.w	r2, r3, #15
 800c108:	6879      	ldr	r1, [r7, #4]
 800c10a:	4613      	mov	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	440b      	add	r3, r1
 800c114:	3326      	adds	r3, #38	@ 0x26
 800c116:	2200      	movs	r2, #0
 800c118:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	32b0      	adds	r2, #176	@ 0xb0
 800c124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d01f      	beq.n	800c16c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	33b0      	adds	r3, #176	@ 0xb0
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	32b0      	adds	r2, #176	@ 0xb0
 800c14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14e:	4618      	mov	r0, r3
 800c150:	f002 fba8 	bl	800e8a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	32b0      	adds	r2, #176	@ 0xb0
 800c15e:	2100      	movs	r1, #0
 800c160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	20000093 	.word	0x20000093
 800c17c:	20000094 	.word	0x20000094
 800c180:	20000095 	.word	0x20000095

0800c184 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	32b0      	adds	r2, #176	@ 0xb0
 800c198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	e0bf      	b.n	800c334 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d050      	beq.n	800c262 <USBD_CDC_Setup+0xde>
 800c1c0:	2b20      	cmp	r3, #32
 800c1c2:	f040 80af 	bne.w	800c324 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	88db      	ldrh	r3, [r3, #6]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d03a      	beq.n	800c244 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	b25b      	sxtb	r3, r3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	da1b      	bge.n	800c210 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	33b0      	adds	r3, #176	@ 0xb0
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c1ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	88d2      	ldrh	r2, [r2, #6]
 800c1f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	88db      	ldrh	r3, [r3, #6]
 800c1fa:	2b07      	cmp	r3, #7
 800c1fc:	bf28      	it	cs
 800c1fe:	2307      	movcs	r3, #7
 800c200:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	89fa      	ldrh	r2, [r7, #14]
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f001 fd93 	bl	800dd34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c20e:	e090      	b.n	800c332 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	785a      	ldrb	r2, [r3, #1]
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	88db      	ldrh	r3, [r3, #6]
 800c21e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c220:	d803      	bhi.n	800c22a <USBD_CDC_Setup+0xa6>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	88db      	ldrh	r3, [r3, #6]
 800c226:	b2da      	uxtb	r2, r3
 800c228:	e000      	b.n	800c22c <USBD_CDC_Setup+0xa8>
 800c22a:	2240      	movs	r2, #64	@ 0x40
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c232:	6939      	ldr	r1, [r7, #16]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c23a:	461a      	mov	r2, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 fda5 	bl	800dd8c <USBD_CtlPrepareRx>
      break;
 800c242:	e076      	b.n	800c332 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	33b0      	adds	r3, #176	@ 0xb0
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	7850      	ldrb	r0, [r2, #1]
 800c25a:	2200      	movs	r2, #0
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	4798      	blx	r3
      break;
 800c260:	e067      	b.n	800c332 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	785b      	ldrb	r3, [r3, #1]
 800c266:	2b0b      	cmp	r3, #11
 800c268:	d851      	bhi.n	800c30e <USBD_CDC_Setup+0x18a>
 800c26a:	a201      	add	r2, pc, #4	@ (adr r2, 800c270 <USBD_CDC_Setup+0xec>)
 800c26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c270:	0800c2a1 	.word	0x0800c2a1
 800c274:	0800c31d 	.word	0x0800c31d
 800c278:	0800c30f 	.word	0x0800c30f
 800c27c:	0800c30f 	.word	0x0800c30f
 800c280:	0800c30f 	.word	0x0800c30f
 800c284:	0800c30f 	.word	0x0800c30f
 800c288:	0800c30f 	.word	0x0800c30f
 800c28c:	0800c30f 	.word	0x0800c30f
 800c290:	0800c30f 	.word	0x0800c30f
 800c294:	0800c30f 	.word	0x0800c30f
 800c298:	0800c2cb 	.word	0x0800c2cb
 800c29c:	0800c2f5 	.word	0x0800c2f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d107      	bne.n	800c2bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c2ac:	f107 030a 	add.w	r3, r7, #10
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f001 fd3d 	bl	800dd34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2ba:	e032      	b.n	800c322 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f001 fcbb 	bl	800dc3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	75fb      	strb	r3, [r7, #23]
          break;
 800c2c8:	e02b      	b.n	800c322 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d107      	bne.n	800c2e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2d6:	f107 030d 	add.w	r3, r7, #13
 800c2da:	2201      	movs	r2, #1
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f001 fd28 	bl	800dd34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2e4:	e01d      	b.n	800c322 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f001 fca6 	bl	800dc3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	75fb      	strb	r3, [r7, #23]
          break;
 800c2f2:	e016      	b.n	800c322 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d00f      	beq.n	800c320 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f001 fc99 	bl	800dc3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c308:	2303      	movs	r3, #3
 800c30a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c30c:	e008      	b.n	800c320 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f001 fc92 	bl	800dc3a <USBD_CtlError>
          ret = USBD_FAIL;
 800c316:	2303      	movs	r3, #3
 800c318:	75fb      	strb	r3, [r7, #23]
          break;
 800c31a:	e002      	b.n	800c322 <USBD_CDC_Setup+0x19e>
          break;
 800c31c:	bf00      	nop
 800c31e:	e008      	b.n	800c332 <USBD_CDC_Setup+0x1ae>
          break;
 800c320:	bf00      	nop
      }
      break;
 800c322:	e006      	b.n	800c332 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f001 fc87 	bl	800dc3a <USBD_CtlError>
      ret = USBD_FAIL;
 800c32c:	2303      	movs	r3, #3
 800c32e:	75fb      	strb	r3, [r7, #23]
      break;
 800c330:	bf00      	nop
  }

  return (uint8_t)ret;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c34e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	32b0      	adds	r2, #176	@ 0xb0
 800c35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c362:	2303      	movs	r3, #3
 800c364:	e065      	b.n	800c432 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	32b0      	adds	r2, #176	@ 0xb0
 800c370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c374:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c376:	78fb      	ldrb	r3, [r7, #3]
 800c378:	f003 020f 	and.w	r2, r3, #15
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	4613      	mov	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	440b      	add	r3, r1
 800c388:	3318      	adds	r3, #24
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d02f      	beq.n	800c3f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c390:	78fb      	ldrb	r3, [r7, #3]
 800c392:	f003 020f 	and.w	r2, r3, #15
 800c396:	6879      	ldr	r1, [r7, #4]
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	440b      	add	r3, r1
 800c3a2:	3318      	adds	r3, #24
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	78fb      	ldrb	r3, [r7, #3]
 800c3a8:	f003 010f 	and.w	r1, r3, #15
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	440b      	add	r3, r1
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4403      	add	r3, r0
 800c3b8:	331c      	adds	r3, #28
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3c0:	fb01 f303 	mul.w	r3, r1, r3
 800c3c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d112      	bne.n	800c3f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c3ca:	78fb      	ldrb	r3, [r7, #3]
 800c3cc:	f003 020f 	and.w	r2, r3, #15
 800c3d0:	6879      	ldr	r1, [r7, #4]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	440b      	add	r3, r1
 800c3dc:	3318      	adds	r3, #24
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3e2:	78f9      	ldrb	r1, [r7, #3]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f002 f9f8 	bl	800e7de <USBD_LL_Transmit>
 800c3ee:	e01f      	b.n	800c430 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	33b0      	adds	r3, #176	@ 0xb0
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d010      	beq.n	800c430 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	33b0      	adds	r3, #176	@ 0xb0
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	691b      	ldr	r3, [r3, #16]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c42c:	78fa      	ldrb	r2, [r7, #3]
 800c42e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	460b      	mov	r3, r1
 800c444:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	32b0      	adds	r2, #176	@ 0xb0
 800c450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c454:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	32b0      	adds	r2, #176	@ 0xb0
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d101      	bne.n	800c46c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c468:	2303      	movs	r3, #3
 800c46a:	e01a      	b.n	800c4a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c46c:	78fb      	ldrb	r3, [r7, #3]
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f002 f9f6 	bl	800e862 <USBD_LL_GetRxDataSize>
 800c476:	4602      	mov	r2, r0
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	33b0      	adds	r3, #176	@ 0xb0
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c49c:	4611      	mov	r1, r2
 800c49e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	32b0      	adds	r2, #176	@ 0xb0
 800c4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e024      	b.n	800c516 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	33b0      	adds	r3, #176	@ 0xb0
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4413      	add	r3, r2
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d019      	beq.n	800c514 <USBD_CDC_EP0_RxReady+0x6a>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c4e6:	2bff      	cmp	r3, #255	@ 0xff
 800c4e8:	d014      	beq.n	800c514 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	33b0      	adds	r3, #176	@ 0xb0
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	4413      	add	r3, r2
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c502:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c50a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	22ff      	movs	r2, #255	@ 0xff
 800c510:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c528:	2182      	movs	r1, #130	@ 0x82
 800c52a:	4818      	ldr	r0, [pc, #96]	@ (800c58c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c52c:	f000 fd4f 	bl	800cfce <USBD_GetEpDesc>
 800c530:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c532:	2101      	movs	r1, #1
 800c534:	4815      	ldr	r0, [pc, #84]	@ (800c58c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c536:	f000 fd4a 	bl	800cfce <USBD_GetEpDesc>
 800c53a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c53c:	2181      	movs	r1, #129	@ 0x81
 800c53e:	4813      	ldr	r0, [pc, #76]	@ (800c58c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c540:	f000 fd45 	bl	800cfce <USBD_GetEpDesc>
 800c544:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	2210      	movs	r2, #16
 800c550:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d006      	beq.n	800c566 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c560:	711a      	strb	r2, [r3, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c574:	711a      	strb	r2, [r3, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2243      	movs	r2, #67	@ 0x43
 800c57e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c580:	4b02      	ldr	r3, [pc, #8]	@ (800c58c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20000050 	.word	0x20000050

0800c590 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c598:	2182      	movs	r1, #130	@ 0x82
 800c59a:	4818      	ldr	r0, [pc, #96]	@ (800c5fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c59c:	f000 fd17 	bl	800cfce <USBD_GetEpDesc>
 800c5a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	4815      	ldr	r0, [pc, #84]	@ (800c5fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5a6:	f000 fd12 	bl	800cfce <USBD_GetEpDesc>
 800c5aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5ac:	2181      	movs	r1, #129	@ 0x81
 800c5ae:	4813      	ldr	r0, [pc, #76]	@ (800c5fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5b0:	f000 fd0d 	bl	800cfce <USBD_GetEpDesc>
 800c5b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	2210      	movs	r2, #16
 800c5c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d006      	beq.n	800c5d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	711a      	strb	r2, [r3, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f042 0202 	orr.w	r2, r2, #2
 800c5d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d006      	beq.n	800c5ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	711a      	strb	r2, [r3, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f042 0202 	orr.w	r2, r2, #2
 800c5e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2243      	movs	r2, #67	@ 0x43
 800c5ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5f0:	4b02      	ldr	r3, [pc, #8]	@ (800c5fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20000050 	.word	0x20000050

0800c600 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c608:	2182      	movs	r1, #130	@ 0x82
 800c60a:	4818      	ldr	r0, [pc, #96]	@ (800c66c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c60c:	f000 fcdf 	bl	800cfce <USBD_GetEpDesc>
 800c610:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c612:	2101      	movs	r1, #1
 800c614:	4815      	ldr	r0, [pc, #84]	@ (800c66c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c616:	f000 fcda 	bl	800cfce <USBD_GetEpDesc>
 800c61a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c61c:	2181      	movs	r1, #129	@ 0x81
 800c61e:	4813      	ldr	r0, [pc, #76]	@ (800c66c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c620:	f000 fcd5 	bl	800cfce <USBD_GetEpDesc>
 800c624:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2210      	movs	r2, #16
 800c630:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d006      	beq.n	800c646 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c640:	711a      	strb	r2, [r3, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d006      	beq.n	800c65a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c654:	711a      	strb	r2, [r3, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2243      	movs	r2, #67	@ 0x43
 800c65e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c660:	4b02      	ldr	r3, [pc, #8]	@ (800c66c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20000050 	.word	0x20000050

0800c670 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	220a      	movs	r2, #10
 800c67c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c67e:	4b03      	ldr	r3, [pc, #12]	@ (800c68c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	2000000c 	.word	0x2000000c

0800c690 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e009      	b.n	800c6b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	33b0      	adds	r3, #176	@ 0xb0
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4413      	add	r3, r2
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b087      	sub	sp, #28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	32b0      	adds	r2, #176	@ 0xb0
 800c6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e008      	b.n	800c6fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	371c      	adds	r7, #28
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	32b0      	adds	r2, #176	@ 0xb0
 800c71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c720:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d101      	bne.n	800c72c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c728:	2303      	movs	r3, #3
 800c72a:	e004      	b.n	800c736 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
	...

0800c744 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	32b0      	adds	r2, #176	@ 0xb0
 800c756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c766:	2303      	movs	r3, #3
 800c768:	e025      	b.n	800c7b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11f      	bne.n	800c7b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2201      	movs	r2, #1
 800c778:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c77c:	4b10      	ldr	r3, [pc, #64]	@ (800c7c0 <USBD_CDC_TransmitPacket+0x7c>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	f003 020f 	and.w	r2, r3, #15
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	4613      	mov	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4413      	add	r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4403      	add	r3, r0
 800c796:	3318      	adds	r3, #24
 800c798:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c79a:	4b09      	ldr	r3, [pc, #36]	@ (800c7c0 <USBD_CDC_TransmitPacket+0x7c>)
 800c79c:	7819      	ldrb	r1, [r3, #0]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f002 f817 	bl	800e7de <USBD_LL_Transmit>

    ret = USBD_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20000093 	.word	0x20000093

0800c7c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	32b0      	adds	r2, #176	@ 0xb0
 800c7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	32b0      	adds	r2, #176	@ 0xb0
 800c7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e018      	b.n	800c824 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	7c1b      	ldrb	r3, [r3, #16]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c82c <USBD_CDC_ReceivePacket+0x68>)
 800c7fc:	7819      	ldrb	r1, [r3, #0]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f002 f809 	bl	800e820 <USBD_LL_PrepareReceive>
 800c80e:	e008      	b.n	800c822 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c810:	4b06      	ldr	r3, [pc, #24]	@ (800c82c <USBD_CDC_ReceivePacket+0x68>)
 800c812:	7819      	ldrb	r1, [r3, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c81a:	2340      	movs	r3, #64	@ 0x40
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f001 ffff 	bl	800e820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20000094 	.word	0x20000094

0800c830 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	4613      	mov	r3, r2
 800c83c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c844:	2303      	movs	r3, #3
 800c846:	e01f      	b.n	800c888 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d003      	beq.n	800c86e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	79fa      	ldrb	r2, [r7, #7]
 800c87a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f001 fe79 	bl	800e574 <USBD_LL_Init>
 800c882:	4603      	mov	r3, r0
 800c884:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c886:	7dfb      	ldrb	r3, [r7, #23]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c89a:	2300      	movs	r3, #0
 800c89c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	e025      	b.n	800c8f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	32ae      	adds	r2, #174	@ 0xae
 800c8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00f      	beq.n	800c8e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	32ae      	adds	r2, #174	@ 0xae
 800c8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d4:	f107 020e 	add.w	r2, r7, #14
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4798      	blx	r3
 800c8dc:	4602      	mov	r2, r0
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 fe81 	bl	800e60c <USBD_LL_Start>
 800c90a:	4603      	mov	r3, r0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c91c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c91e:	4618      	mov	r0, r3
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c940:	2b00      	cmp	r3, #0
 800c942:	d009      	beq.n	800c958 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	78fa      	ldrb	r2, [r7, #3]
 800c94e:	4611      	mov	r1, r2
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	4798      	blx	r3
 800c954:	4603      	mov	r3, r0
 800c956:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c958:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b084      	sub	sp, #16
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	460b      	mov	r3, r1
 800c96c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	78fa      	ldrb	r2, [r7, #3]
 800c97c:	4611      	mov	r1, r2
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	4798      	blx	r3
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c988:	2303      	movs	r3, #3
 800c98a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b084      	sub	sp, #16
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f001 f90c 	bl	800dbc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c9bc:	461a      	mov	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c9ca:	f003 031f 	and.w	r3, r3, #31
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d01a      	beq.n	800ca08 <USBD_LL_SetupStage+0x72>
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d822      	bhi.n	800ca1c <USBD_LL_SetupStage+0x86>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <USBD_LL_SetupStage+0x4a>
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d00a      	beq.n	800c9f4 <USBD_LL_SetupStage+0x5e>
 800c9de:	e01d      	b.n	800ca1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fb63 	bl	800d0b4 <USBD_StdDevReq>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f2:	e020      	b.n	800ca36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fbcb 	bl	800d198 <USBD_StdItfReq>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
      break;
 800ca06:	e016      	b.n	800ca36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca0e:	4619      	mov	r1, r3
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fc2d 	bl	800d270 <USBD_StdEPReq>
 800ca16:	4603      	mov	r3, r0
 800ca18:	73fb      	strb	r3, [r7, #15]
      break;
 800ca1a:	e00c      	b.n	800ca36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f001 fe4e 	bl	800e6cc <USBD_LL_StallEP>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]
      break;
 800ca34:	bf00      	nop
  }

  return ret;
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca52:	7afb      	ldrb	r3, [r7, #11]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d16e      	bne.n	800cb36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ca5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	f040 8098 	bne.w	800cb9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d913      	bls.n	800caa0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	689a      	ldr	r2, [r3, #8]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	1ad2      	subs	r2, r2, r3
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	68da      	ldr	r2, [r3, #12]
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	bf28      	it	cs
 800ca92:	4613      	movcs	r3, r2
 800ca94:	461a      	mov	r2, r3
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f001 f994 	bl	800ddc6 <USBD_CtlContinueRx>
 800ca9e:	e07d      	b.n	800cb9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800caa6:	f003 031f 	and.w	r3, r3, #31
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d014      	beq.n	800cad8 <USBD_LL_DataOutStage+0x98>
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d81d      	bhi.n	800caee <USBD_LL_DataOutStage+0xae>
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <USBD_LL_DataOutStage+0x7c>
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d003      	beq.n	800cac2 <USBD_LL_DataOutStage+0x82>
 800caba:	e018      	b.n	800caee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cabc:	2300      	movs	r3, #0
 800cabe:	75bb      	strb	r3, [r7, #22]
            break;
 800cac0:	e018      	b.n	800caf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	4619      	mov	r1, r3
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f000 fa64 	bl	800cf9a <USBD_CoreFindIF>
 800cad2:	4603      	mov	r3, r0
 800cad4:	75bb      	strb	r3, [r7, #22]
            break;
 800cad6:	e00d      	b.n	800caf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	4619      	mov	r1, r3
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f000 fa66 	bl	800cfb4 <USBD_CoreFindEP>
 800cae8:	4603      	mov	r3, r0
 800caea:	75bb      	strb	r3, [r7, #22]
            break;
 800caec:	e002      	b.n	800caf4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800caee:	2300      	movs	r3, #0
 800caf0:	75bb      	strb	r3, [r7, #22]
            break;
 800caf2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800caf4:	7dbb      	ldrb	r3, [r7, #22]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d119      	bne.n	800cb2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d113      	bne.n	800cb2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cb06:	7dba      	ldrb	r2, [r7, #22]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	32ae      	adds	r2, #174	@ 0xae
 800cb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00b      	beq.n	800cb2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cb16:	7dba      	ldrb	r2, [r7, #22]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cb1e:	7dba      	ldrb	r2, [r7, #22]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	32ae      	adds	r2, #174	@ 0xae
 800cb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f001 f95a 	bl	800dde8 <USBD_CtlSendStatus>
 800cb34:	e032      	b.n	800cb9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb36:	7afb      	ldrb	r3, [r7, #11]
 800cb38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	4619      	mov	r1, r3
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f000 fa37 	bl	800cfb4 <USBD_CoreFindEP>
 800cb46:	4603      	mov	r3, r0
 800cb48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb4a:	7dbb      	ldrb	r3, [r7, #22]
 800cb4c:	2bff      	cmp	r3, #255	@ 0xff
 800cb4e:	d025      	beq.n	800cb9c <USBD_LL_DataOutStage+0x15c>
 800cb50:	7dbb      	ldrb	r3, [r7, #22]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d122      	bne.n	800cb9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d117      	bne.n	800cb92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb62:	7dba      	ldrb	r2, [r7, #22]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	32ae      	adds	r2, #174	@ 0xae
 800cb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00f      	beq.n	800cb92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cb72:	7dba      	ldrb	r2, [r7, #22]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb7a:	7dba      	ldrb	r2, [r7, #22]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	32ae      	adds	r2, #174	@ 0xae
 800cb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	7afa      	ldrb	r2, [r7, #11]
 800cb88:	4611      	mov	r1, r2
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	4798      	blx	r3
 800cb8e:	4603      	mov	r3, r0
 800cb90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
 800cb9a:	e000      	b.n	800cb9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3718      	adds	r7, #24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b086      	sub	sp, #24
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	60f8      	str	r0, [r7, #12]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	607a      	str	r2, [r7, #4]
 800cbb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cbb4:	7afb      	ldrb	r3, [r7, #11]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d16f      	bne.n	800cc9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	3314      	adds	r3, #20
 800cbbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d15a      	bne.n	800cc80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	689a      	ldr	r2, [r3, #8]
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d914      	bls.n	800cc00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	689a      	ldr	r2, [r3, #8]
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	1ad2      	subs	r2, r2, r3
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f001 f8bc 	bl	800dd6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f001 fe11 	bl	800e820 <USBD_LL_PrepareReceive>
 800cbfe:	e03f      	b.n	800cc80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	68da      	ldr	r2, [r3, #12]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d11c      	bne.n	800cc46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d316      	bcc.n	800cc46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d20f      	bcs.n	800cc46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc26:	2200      	movs	r2, #0
 800cc28:	2100      	movs	r1, #0
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f001 f89d 	bl	800dd6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc38:	2300      	movs	r3, #0
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f001 fdee 	bl	800e820 <USBD_LL_PrepareReceive>
 800cc44:	e01c      	b.n	800cc80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	2b03      	cmp	r3, #3
 800cc50:	d10f      	bne.n	800cc72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d009      	beq.n	800cc72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc72:	2180      	movs	r1, #128	@ 0x80
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f001 fd29 	bl	800e6cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f001 f8c7 	bl	800de0e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d03a      	beq.n	800cd00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff fe42 	bl	800c914 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cc98:	e032      	b.n	800cd00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	4619      	mov	r1, r3
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f000 f985 	bl	800cfb4 <USBD_CoreFindEP>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	2bff      	cmp	r3, #255	@ 0xff
 800ccb2:	d025      	beq.n	800cd00 <USBD_LL_DataInStage+0x15a>
 800ccb4:	7dfb      	ldrb	r3, [r7, #23]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d122      	bne.n	800cd00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d11c      	bne.n	800cd00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ccc6:	7dfa      	ldrb	r2, [r7, #23]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	32ae      	adds	r2, #174	@ 0xae
 800cccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd0:	695b      	ldr	r3, [r3, #20]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d014      	beq.n	800cd00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ccd6:	7dfa      	ldrb	r2, [r7, #23]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ccde:	7dfa      	ldrb	r2, [r7, #23]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	32ae      	adds	r2, #174	@ 0xae
 800cce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	7afa      	ldrb	r2, [r7, #11]
 800ccec:	4611      	mov	r1, r2
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	4798      	blx	r3
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ccf6:	7dbb      	ldrb	r3, [r7, #22]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ccfc:	7dbb      	ldrb	r3, [r7, #22]
 800ccfe:	e000      	b.n	800cd02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3718      	adds	r7, #24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d014      	beq.n	800cd70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00e      	beq.n	800cd70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	6852      	ldr	r2, [r2, #4]
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	4611      	mov	r1, r2
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	4798      	blx	r3
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd70:	2340      	movs	r3, #64	@ 0x40
 800cd72:	2200      	movs	r2, #0
 800cd74:	2100      	movs	r1, #0
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f001 fc63 	bl	800e642 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2240      	movs	r2, #64	@ 0x40
 800cd88:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd8c:	2340      	movs	r3, #64	@ 0x40
 800cd8e:	2200      	movs	r2, #0
 800cd90:	2180      	movs	r1, #128	@ 0x80
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f001 fc55 	bl	800e642 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2240      	movs	r2, #64	@ 0x40
 800cda2:	621a      	str	r2, [r3, #32]

  return ret;
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	78fa      	ldrb	r2, [r7, #3]
 800cdbe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	370c      	adds	r7, #12
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr

0800cdce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b083      	sub	sp, #12
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	2b04      	cmp	r3, #4
 800cde0:	d006      	beq.n	800cdf0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2204      	movs	r2, #4
 800cdf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	370c      	adds	r7, #12
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b04      	cmp	r3, #4
 800ce18:	d106      	bne.n	800ce28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b082      	sub	sp, #8
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d110      	bne.n	800ce6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce5a:	69db      	ldr	r3, [r3, #28]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d005      	beq.n	800ce6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce66:	69db      	ldr	r3, [r3, #28]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	32ae      	adds	r2, #174	@ 0xae
 800ce8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce94:	2303      	movs	r3, #3
 800ce96:	e01c      	b.n	800ced2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b03      	cmp	r3, #3
 800cea2:	d115      	bne.n	800ced0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	32ae      	adds	r2, #174	@ 0xae
 800ceae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb2:	6a1b      	ldr	r3, [r3, #32]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00b      	beq.n	800ced0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	32ae      	adds	r2, #174	@ 0xae
 800cec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec6:	6a1b      	ldr	r3, [r3, #32]
 800cec8:	78fa      	ldrb	r2, [r7, #3]
 800ceca:	4611      	mov	r1, r2
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b082      	sub	sp, #8
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
 800cee2:	460b      	mov	r3, r1
 800cee4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	32ae      	adds	r2, #174	@ 0xae
 800cef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e01c      	b.n	800cf36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d115      	bne.n	800cf34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	32ae      	adds	r2, #174	@ 0xae
 800cf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00b      	beq.n	800cf34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	32ae      	adds	r2, #174	@ 0xae
 800cf26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf2c:	78fa      	ldrb	r2, [r7, #3]
 800cf2e:	4611      	mov	r1, r2
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b083      	sub	sp, #12
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00e      	beq.n	800cf90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	6852      	ldr	r2, [r2, #4]
 800cf7e:	b2d2      	uxtb	r2, r2
 800cf80:	4611      	mov	r1, r2
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	4798      	blx	r3
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfa6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	370c      	adds	r7, #12
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b086      	sub	sp, #24
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	885b      	ldrh	r3, [r3, #2]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	7812      	ldrb	r2, [r2, #0]
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d91f      	bls.n	800d034 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cffa:	e013      	b.n	800d024 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cffc:	f107 030a 	add.w	r3, r7, #10
 800d000:	4619      	mov	r1, r3
 800d002:	6978      	ldr	r0, [r7, #20]
 800d004:	f000 f81b 	bl	800d03e <USBD_GetNextDesc>
 800d008:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	785b      	ldrb	r3, [r3, #1]
 800d00e:	2b05      	cmp	r3, #5
 800d010:	d108      	bne.n	800d024 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	789b      	ldrb	r3, [r3, #2]
 800d01a:	78fa      	ldrb	r2, [r7, #3]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d008      	beq.n	800d032 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d020:	2300      	movs	r3, #0
 800d022:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	885b      	ldrh	r3, [r3, #2]
 800d028:	b29a      	uxth	r2, r3
 800d02a:	897b      	ldrh	r3, [r7, #10]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d8e5      	bhi.n	800cffc <USBD_GetEpDesc+0x2e>
 800d030:	e000      	b.n	800d034 <USBD_GetEpDesc+0x66>
          break;
 800d032:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d034:	693b      	ldr	r3, [r7, #16]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3718      	adds	r7, #24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d03e:	b480      	push	{r7}
 800d040:	b085      	sub	sp, #20
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	7812      	ldrb	r2, [r2, #0]
 800d054:	4413      	add	r3, r2
 800d056:	b29a      	uxth	r2, r3
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	461a      	mov	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4413      	add	r3, r2
 800d066:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d068:	68fb      	ldr	r3, [r7, #12]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3714      	adds	r7, #20
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr

0800d076 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d076:	b480      	push	{r7}
 800d078:	b087      	sub	sp, #28
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	3301      	adds	r3, #1
 800d08c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d094:	8a3b      	ldrh	r3, [r7, #16]
 800d096:	021b      	lsls	r3, r3, #8
 800d098:	b21a      	sxth	r2, r3
 800d09a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	b21b      	sxth	r3, r3
 800d0a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d0a4:	89fb      	ldrh	r3, [r7, #14]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	371c      	adds	r7, #28
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
	...

0800d0b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0ca:	2b40      	cmp	r3, #64	@ 0x40
 800d0cc:	d005      	beq.n	800d0da <USBD_StdDevReq+0x26>
 800d0ce:	2b40      	cmp	r3, #64	@ 0x40
 800d0d0:	d857      	bhi.n	800d182 <USBD_StdDevReq+0xce>
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00f      	beq.n	800d0f6 <USBD_StdDevReq+0x42>
 800d0d6:	2b20      	cmp	r3, #32
 800d0d8:	d153      	bne.n	800d182 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	32ae      	adds	r2, #174	@ 0xae
 800d0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	4798      	blx	r3
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0f4:	e04a      	b.n	800d18c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	785b      	ldrb	r3, [r3, #1]
 800d0fa:	2b09      	cmp	r3, #9
 800d0fc:	d83b      	bhi.n	800d176 <USBD_StdDevReq+0xc2>
 800d0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d104 <USBD_StdDevReq+0x50>)
 800d100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d104:	0800d159 	.word	0x0800d159
 800d108:	0800d16d 	.word	0x0800d16d
 800d10c:	0800d177 	.word	0x0800d177
 800d110:	0800d163 	.word	0x0800d163
 800d114:	0800d177 	.word	0x0800d177
 800d118:	0800d137 	.word	0x0800d137
 800d11c:	0800d12d 	.word	0x0800d12d
 800d120:	0800d177 	.word	0x0800d177
 800d124:	0800d14f 	.word	0x0800d14f
 800d128:	0800d141 	.word	0x0800d141
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fa3c 	bl	800d5ac <USBD_GetDescriptor>
          break;
 800d134:	e024      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 fba1 	bl	800d880 <USBD_SetAddress>
          break;
 800d13e:	e01f      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fbe0 	bl	800d908 <USBD_SetConfig>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
          break;
 800d14c:	e018      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fc83 	bl	800da5c <USBD_GetConfig>
          break;
 800d156:	e013      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fcb4 	bl	800dac8 <USBD_GetStatus>
          break;
 800d160:	e00e      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fce3 	bl	800db30 <USBD_SetFeature>
          break;
 800d16a:	e009      	b.n	800d180 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fd07 	bl	800db82 <USBD_ClrFeature>
          break;
 800d174:	e004      	b.n	800d180 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fd5e 	bl	800dc3a <USBD_CtlError>
          break;
 800d17e:	bf00      	nop
      }
      break;
 800d180:	e004      	b.n	800d18c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fd58 	bl	800dc3a <USBD_CtlError>
      break;
 800d18a:	bf00      	nop
  }

  return ret;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop

0800d198 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1ae:	2b40      	cmp	r3, #64	@ 0x40
 800d1b0:	d005      	beq.n	800d1be <USBD_StdItfReq+0x26>
 800d1b2:	2b40      	cmp	r3, #64	@ 0x40
 800d1b4:	d852      	bhi.n	800d25c <USBD_StdItfReq+0xc4>
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <USBD_StdItfReq+0x26>
 800d1ba:	2b20      	cmp	r3, #32
 800d1bc:	d14e      	bne.n	800d25c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d840      	bhi.n	800d24e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	889b      	ldrh	r3, [r3, #4]
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d836      	bhi.n	800d244 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	889b      	ldrh	r3, [r3, #4]
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff fedb 	bl	800cf9a <USBD_CoreFindIF>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ea:	2bff      	cmp	r3, #255	@ 0xff
 800d1ec:	d01d      	beq.n	800d22a <USBD_StdItfReq+0x92>
 800d1ee:	7bbb      	ldrb	r3, [r7, #14]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d11a      	bne.n	800d22a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d1f4:	7bba      	ldrb	r2, [r7, #14]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	32ae      	adds	r2, #174	@ 0xae
 800d1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00f      	beq.n	800d224 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d204:	7bba      	ldrb	r2, [r7, #14]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d20c:	7bba      	ldrb	r2, [r7, #14]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	32ae      	adds	r2, #174	@ 0xae
 800d212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	4798      	blx	r3
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d222:	e004      	b.n	800d22e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d224:	2303      	movs	r3, #3
 800d226:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d228:	e001      	b.n	800d22e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d22a:	2303      	movs	r3, #3
 800d22c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	88db      	ldrh	r3, [r3, #6]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d110      	bne.n	800d258 <USBD_StdItfReq+0xc0>
 800d236:	7bfb      	ldrb	r3, [r7, #15]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10d      	bne.n	800d258 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fdd3 	bl	800dde8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d242:	e009      	b.n	800d258 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fcf7 	bl	800dc3a <USBD_CtlError>
          break;
 800d24c:	e004      	b.n	800d258 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d24e:	6839      	ldr	r1, [r7, #0]
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fcf2 	bl	800dc3a <USBD_CtlError>
          break;
 800d256:	e000      	b.n	800d25a <USBD_StdItfReq+0xc2>
          break;
 800d258:	bf00      	nop
      }
      break;
 800d25a:	e004      	b.n	800d266 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fceb 	bl	800dc3a <USBD_CtlError>
      break;
 800d264:	bf00      	nop
  }

  return ret;
 800d266:	7bfb      	ldrb	r3, [r7, #15]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	889b      	ldrh	r3, [r3, #4]
 800d282:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d28c:	2b40      	cmp	r3, #64	@ 0x40
 800d28e:	d007      	beq.n	800d2a0 <USBD_StdEPReq+0x30>
 800d290:	2b40      	cmp	r3, #64	@ 0x40
 800d292:	f200 817f 	bhi.w	800d594 <USBD_StdEPReq+0x324>
 800d296:	2b00      	cmp	r3, #0
 800d298:	d02a      	beq.n	800d2f0 <USBD_StdEPReq+0x80>
 800d29a:	2b20      	cmp	r3, #32
 800d29c:	f040 817a 	bne.w	800d594 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff fe85 	bl	800cfb4 <USBD_CoreFindEP>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2ae:	7b7b      	ldrb	r3, [r7, #13]
 800d2b0:	2bff      	cmp	r3, #255	@ 0xff
 800d2b2:	f000 8174 	beq.w	800d59e <USBD_StdEPReq+0x32e>
 800d2b6:	7b7b      	ldrb	r3, [r7, #13]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f040 8170 	bne.w	800d59e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d2be:	7b7a      	ldrb	r2, [r7, #13]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d2c6:	7b7a      	ldrb	r2, [r7, #13]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	32ae      	adds	r2, #174	@ 0xae
 800d2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f000 8163 	beq.w	800d59e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d2d8:	7b7a      	ldrb	r2, [r7, #13]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	32ae      	adds	r2, #174	@ 0xae
 800d2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	4798      	blx	r3
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d2ee:	e156      	b.n	800d59e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	785b      	ldrb	r3, [r3, #1]
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d008      	beq.n	800d30a <USBD_StdEPReq+0x9a>
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	f300 8145 	bgt.w	800d588 <USBD_StdEPReq+0x318>
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f000 809b 	beq.w	800d43a <USBD_StdEPReq+0x1ca>
 800d304:	2b01      	cmp	r3, #1
 800d306:	d03c      	beq.n	800d382 <USBD_StdEPReq+0x112>
 800d308:	e13e      	b.n	800d588 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d310:	b2db      	uxtb	r3, r3
 800d312:	2b02      	cmp	r3, #2
 800d314:	d002      	beq.n	800d31c <USBD_StdEPReq+0xac>
 800d316:	2b03      	cmp	r3, #3
 800d318:	d016      	beq.n	800d348 <USBD_StdEPReq+0xd8>
 800d31a:	e02c      	b.n	800d376 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d31c:	7bbb      	ldrb	r3, [r7, #14]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00d      	beq.n	800d33e <USBD_StdEPReq+0xce>
 800d322:	7bbb      	ldrb	r3, [r7, #14]
 800d324:	2b80      	cmp	r3, #128	@ 0x80
 800d326:	d00a      	beq.n	800d33e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d328:	7bbb      	ldrb	r3, [r7, #14]
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f001 f9cd 	bl	800e6cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d332:	2180      	movs	r1, #128	@ 0x80
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f001 f9c9 	bl	800e6cc <USBD_LL_StallEP>
 800d33a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d33c:	e020      	b.n	800d380 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fc7a 	bl	800dc3a <USBD_CtlError>
              break;
 800d346:	e01b      	b.n	800d380 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	885b      	ldrh	r3, [r3, #2]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10e      	bne.n	800d36e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00b      	beq.n	800d36e <USBD_StdEPReq+0xfe>
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	2b80      	cmp	r3, #128	@ 0x80
 800d35a:	d008      	beq.n	800d36e <USBD_StdEPReq+0xfe>
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	88db      	ldrh	r3, [r3, #6]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d104      	bne.n	800d36e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f001 f9af 	bl	800e6cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fd3a 	bl	800dde8 <USBD_CtlSendStatus>

              break;
 800d374:	e004      	b.n	800d380 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 fc5e 	bl	800dc3a <USBD_CtlError>
              break;
 800d37e:	bf00      	nop
          }
          break;
 800d380:	e107      	b.n	800d592 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d002      	beq.n	800d394 <USBD_StdEPReq+0x124>
 800d38e:	2b03      	cmp	r3, #3
 800d390:	d016      	beq.n	800d3c0 <USBD_StdEPReq+0x150>
 800d392:	e04b      	b.n	800d42c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d394:	7bbb      	ldrb	r3, [r7, #14]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00d      	beq.n	800d3b6 <USBD_StdEPReq+0x146>
 800d39a:	7bbb      	ldrb	r3, [r7, #14]
 800d39c:	2b80      	cmp	r3, #128	@ 0x80
 800d39e:	d00a      	beq.n	800d3b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3a0:	7bbb      	ldrb	r3, [r7, #14]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f001 f991 	bl	800e6cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3aa:	2180      	movs	r1, #128	@ 0x80
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f001 f98d 	bl	800e6cc <USBD_LL_StallEP>
 800d3b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3b4:	e040      	b.n	800d438 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fc3e 	bl	800dc3a <USBD_CtlError>
              break;
 800d3be:	e03b      	b.n	800d438 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	885b      	ldrh	r3, [r3, #2]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d136      	bne.n	800d436 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d3c8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d004      	beq.n	800d3dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f001 f997 	bl	800e70a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fd03 	bl	800dde8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3e2:	7bbb      	ldrb	r3, [r7, #14]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff fde4 	bl	800cfb4 <USBD_CoreFindEP>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3f0:	7b7b      	ldrb	r3, [r7, #13]
 800d3f2:	2bff      	cmp	r3, #255	@ 0xff
 800d3f4:	d01f      	beq.n	800d436 <USBD_StdEPReq+0x1c6>
 800d3f6:	7b7b      	ldrb	r3, [r7, #13]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d11c      	bne.n	800d436 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d3fc:	7b7a      	ldrb	r2, [r7, #13]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d404:	7b7a      	ldrb	r2, [r7, #13]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	32ae      	adds	r2, #174	@ 0xae
 800d40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d010      	beq.n	800d436 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d414:	7b7a      	ldrb	r2, [r7, #13]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	32ae      	adds	r2, #174	@ 0xae
 800d41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	4798      	blx	r3
 800d426:	4603      	mov	r3, r0
 800d428:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d42a:	e004      	b.n	800d436 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fc03 	bl	800dc3a <USBD_CtlError>
              break;
 800d434:	e000      	b.n	800d438 <USBD_StdEPReq+0x1c8>
              break;
 800d436:	bf00      	nop
          }
          break;
 800d438:	e0ab      	b.n	800d592 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b02      	cmp	r3, #2
 800d444:	d002      	beq.n	800d44c <USBD_StdEPReq+0x1dc>
 800d446:	2b03      	cmp	r3, #3
 800d448:	d032      	beq.n	800d4b0 <USBD_StdEPReq+0x240>
 800d44a:	e097      	b.n	800d57c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d007      	beq.n	800d462 <USBD_StdEPReq+0x1f2>
 800d452:	7bbb      	ldrb	r3, [r7, #14]
 800d454:	2b80      	cmp	r3, #128	@ 0x80
 800d456:	d004      	beq.n	800d462 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fbed 	bl	800dc3a <USBD_CtlError>
                break;
 800d460:	e091      	b.n	800d586 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d466:	2b00      	cmp	r3, #0
 800d468:	da0b      	bge.n	800d482 <USBD_StdEPReq+0x212>
 800d46a:	7bbb      	ldrb	r3, [r7, #14]
 800d46c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d470:	4613      	mov	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	3310      	adds	r3, #16
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	4413      	add	r3, r2
 800d47e:	3304      	adds	r3, #4
 800d480:	e00b      	b.n	800d49a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d482:	7bbb      	ldrb	r3, [r7, #14]
 800d484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d488:	4613      	mov	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	4413      	add	r3, r2
 800d498:	3304      	adds	r3, #4
 800d49a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2202      	movs	r2, #2
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fc43 	bl	800dd34 <USBD_CtlSendData>
              break;
 800d4ae:	e06a      	b.n	800d586 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d4b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	da11      	bge.n	800d4dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4b8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ba:	f003 020f 	and.w	r2, r3, #15
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	4413      	add	r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	440b      	add	r3, r1
 800d4ca:	3324      	adds	r3, #36	@ 0x24
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d117      	bne.n	800d502 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fbb0 	bl	800dc3a <USBD_CtlError>
                  break;
 800d4da:	e054      	b.n	800d586 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d4dc:	7bbb      	ldrb	r3, [r7, #14]
 800d4de:	f003 020f 	and.w	r2, r3, #15
 800d4e2:	6879      	ldr	r1, [r7, #4]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4413      	add	r3, r2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	440b      	add	r3, r1
 800d4ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fb9d 	bl	800dc3a <USBD_CtlError>
                  break;
 800d500:	e041      	b.n	800d586 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d506:	2b00      	cmp	r3, #0
 800d508:	da0b      	bge.n	800d522 <USBD_StdEPReq+0x2b2>
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d510:	4613      	mov	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	3310      	adds	r3, #16
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	3304      	adds	r3, #4
 800d520:	e00b      	b.n	800d53a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	4413      	add	r3, r2
 800d538:	3304      	adds	r3, #4
 800d53a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <USBD_StdEPReq+0x2d8>
 800d542:	7bbb      	ldrb	r3, [r7, #14]
 800d544:	2b80      	cmp	r3, #128	@ 0x80
 800d546:	d103      	bne.n	800d550 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2200      	movs	r2, #0
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e00e      	b.n	800d56e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d550:	7bbb      	ldrb	r3, [r7, #14]
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f001 f8f7 	bl	800e748 <USBD_LL_IsStallEP>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d003      	beq.n	800d568 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2201      	movs	r2, #1
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	e002      	b.n	800d56e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2200      	movs	r2, #0
 800d56c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2202      	movs	r2, #2
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fbdd 	bl	800dd34 <USBD_CtlSendData>
              break;
 800d57a:	e004      	b.n	800d586 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fb5b 	bl	800dc3a <USBD_CtlError>
              break;
 800d584:	bf00      	nop
          }
          break;
 800d586:	e004      	b.n	800d592 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fb55 	bl	800dc3a <USBD_CtlError>
          break;
 800d590:	bf00      	nop
      }
      break;
 800d592:	e005      	b.n	800d5a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fb4f 	bl	800dc3a <USBD_CtlError>
      break;
 800d59c:	e000      	b.n	800d5a0 <USBD_StdEPReq+0x330>
      break;
 800d59e:	bf00      	nop
  }

  return ret;
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
	...

0800d5ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	885b      	ldrh	r3, [r3, #2]
 800d5c6:	0a1b      	lsrs	r3, r3, #8
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	2b06      	cmp	r3, #6
 800d5ce:	f200 8128 	bhi.w	800d822 <USBD_GetDescriptor+0x276>
 800d5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d5d8 <USBD_GetDescriptor+0x2c>)
 800d5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d8:	0800d5f5 	.word	0x0800d5f5
 800d5dc:	0800d60d 	.word	0x0800d60d
 800d5e0:	0800d64d 	.word	0x0800d64d
 800d5e4:	0800d823 	.word	0x0800d823
 800d5e8:	0800d823 	.word	0x0800d823
 800d5ec:	0800d7c3 	.word	0x0800d7c3
 800d5f0:	0800d7ef 	.word	0x0800d7ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	7c12      	ldrb	r2, [r2, #16]
 800d600:	f107 0108 	add.w	r1, r7, #8
 800d604:	4610      	mov	r0, r2
 800d606:	4798      	blx	r3
 800d608:	60f8      	str	r0, [r7, #12]
      break;
 800d60a:	e112      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	7c1b      	ldrb	r3, [r3, #16]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10d      	bne.n	800d630 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61c:	f107 0208 	add.w	r2, r7, #8
 800d620:	4610      	mov	r0, r2
 800d622:	4798      	blx	r3
 800d624:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	2202      	movs	r2, #2
 800d62c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d62e:	e100      	b.n	800d832 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d638:	f107 0208 	add.w	r2, r7, #8
 800d63c:	4610      	mov	r0, r2
 800d63e:	4798      	blx	r3
 800d640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	2202      	movs	r2, #2
 800d648:	701a      	strb	r2, [r3, #0]
      break;
 800d64a:	e0f2      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	885b      	ldrh	r3, [r3, #2]
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b05      	cmp	r3, #5
 800d654:	f200 80ac 	bhi.w	800d7b0 <USBD_GetDescriptor+0x204>
 800d658:	a201      	add	r2, pc, #4	@ (adr r2, 800d660 <USBD_GetDescriptor+0xb4>)
 800d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65e:	bf00      	nop
 800d660:	0800d679 	.word	0x0800d679
 800d664:	0800d6ad 	.word	0x0800d6ad
 800d668:	0800d6e1 	.word	0x0800d6e1
 800d66c:	0800d715 	.word	0x0800d715
 800d670:	0800d749 	.word	0x0800d749
 800d674:	0800d77d 	.word	0x0800d77d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	7c12      	ldrb	r2, [r2, #16]
 800d690:	f107 0108 	add.w	r1, r7, #8
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
 800d698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d69a:	e091      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 facb 	bl	800dc3a <USBD_CtlError>
            err++;
 800d6a4:	7afb      	ldrb	r3, [r7, #11]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6aa:	e089      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	7c12      	ldrb	r2, [r2, #16]
 800d6c4:	f107 0108 	add.w	r1, r7, #8
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ce:	e077      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fab1 	bl	800dc3a <USBD_CtlError>
            err++;
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6de:	e06f      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00b      	beq.n	800d704 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	7c12      	ldrb	r2, [r2, #16]
 800d6f8:	f107 0108 	add.w	r1, r7, #8
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	4798      	blx	r3
 800d700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d702:	e05d      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fa97 	bl	800dc3a <USBD_CtlError>
            err++;
 800d70c:	7afb      	ldrb	r3, [r7, #11]
 800d70e:	3301      	adds	r3, #1
 800d710:	72fb      	strb	r3, [r7, #11]
          break;
 800d712:	e055      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	7c12      	ldrb	r2, [r2, #16]
 800d72c:	f107 0108 	add.w	r1, r7, #8
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d736:	e043      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fa7d 	bl	800dc3a <USBD_CtlError>
            err++;
 800d740:	7afb      	ldrb	r3, [r7, #11]
 800d742:	3301      	adds	r3, #1
 800d744:	72fb      	strb	r3, [r7, #11]
          break;
 800d746:	e03b      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	7c12      	ldrb	r2, [r2, #16]
 800d760:	f107 0108 	add.w	r1, r7, #8
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
 800d768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d76a:	e029      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa63 	bl	800dc3a <USBD_CtlError>
            err++;
 800d774:	7afb      	ldrb	r3, [r7, #11]
 800d776:	3301      	adds	r3, #1
 800d778:	72fb      	strb	r3, [r7, #11]
          break;
 800d77a:	e021      	b.n	800d7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00b      	beq.n	800d7a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	7c12      	ldrb	r2, [r2, #16]
 800d794:	f107 0108 	add.w	r1, r7, #8
 800d798:	4610      	mov	r0, r2
 800d79a:	4798      	blx	r3
 800d79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d79e:	e00f      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fa49 	bl	800dc3a <USBD_CtlError>
            err++;
 800d7a8:	7afb      	ldrb	r3, [r7, #11]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ae:	e007      	b.n	800d7c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fa41 	bl	800dc3a <USBD_CtlError>
          err++;
 800d7b8:	7afb      	ldrb	r3, [r7, #11]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d7be:	bf00      	nop
      }
      break;
 800d7c0:	e037      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	7c1b      	ldrb	r3, [r3, #16]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7d2:	f107 0208 	add.w	r2, r7, #8
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	4798      	blx	r3
 800d7da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7dc:	e029      	b.n	800d832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fa2a 	bl	800dc3a <USBD_CtlError>
        err++;
 800d7e6:	7afb      	ldrb	r3, [r7, #11]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	72fb      	strb	r3, [r7, #11]
      break;
 800d7ec:	e021      	b.n	800d832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7c1b      	ldrb	r3, [r3, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10d      	bne.n	800d812 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7fe:	f107 0208 	add.w	r2, r7, #8
 800d802:	4610      	mov	r0, r2
 800d804:	4798      	blx	r3
 800d806:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	3301      	adds	r3, #1
 800d80c:	2207      	movs	r2, #7
 800d80e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d810:	e00f      	b.n	800d832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d812:	6839      	ldr	r1, [r7, #0]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fa10 	bl	800dc3a <USBD_CtlError>
        err++;
 800d81a:	7afb      	ldrb	r3, [r7, #11]
 800d81c:	3301      	adds	r3, #1
 800d81e:	72fb      	strb	r3, [r7, #11]
      break;
 800d820:	e007      	b.n	800d832 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fa08 	bl	800dc3a <USBD_CtlError>
      err++;
 800d82a:	7afb      	ldrb	r3, [r7, #11]
 800d82c:	3301      	adds	r3, #1
 800d82e:	72fb      	strb	r3, [r7, #11]
      break;
 800d830:	bf00      	nop
  }

  if (err != 0U)
 800d832:	7afb      	ldrb	r3, [r7, #11]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11e      	bne.n	800d876 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	88db      	ldrh	r3, [r3, #6]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d016      	beq.n	800d86e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d840:	893b      	ldrh	r3, [r7, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00e      	beq.n	800d864 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	88da      	ldrh	r2, [r3, #6]
 800d84a:	893b      	ldrh	r3, [r7, #8]
 800d84c:	4293      	cmp	r3, r2
 800d84e:	bf28      	it	cs
 800d850:	4613      	movcs	r3, r2
 800d852:	b29b      	uxth	r3, r3
 800d854:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d856:	893b      	ldrh	r3, [r7, #8]
 800d858:	461a      	mov	r2, r3
 800d85a:	68f9      	ldr	r1, [r7, #12]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fa69 	bl	800dd34 <USBD_CtlSendData>
 800d862:	e009      	b.n	800d878 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 f9e7 	bl	800dc3a <USBD_CtlError>
 800d86c:	e004      	b.n	800d878 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 faba 	bl	800dde8 <USBD_CtlSendStatus>
 800d874:	e000      	b.n	800d878 <USBD_GetDescriptor+0x2cc>
    return;
 800d876:	bf00      	nop
  }
}
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop

0800d880 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	889b      	ldrh	r3, [r3, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d131      	bne.n	800d8f6 <USBD_SetAddress+0x76>
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	88db      	ldrh	r3, [r3, #6]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d12d      	bne.n	800d8f6 <USBD_SetAddress+0x76>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	885b      	ldrh	r3, [r3, #2]
 800d89e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8a0:	d829      	bhi.n	800d8f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	885b      	ldrh	r3, [r3, #2]
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d104      	bne.n	800d8c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f9bc 	bl	800dc3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8c2:	e01d      	b.n	800d900 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7bfa      	ldrb	r2, [r7, #15]
 800d8c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 ff65 	bl	800e7a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa86 	bl	800dde8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d004      	beq.n	800d8ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2202      	movs	r2, #2
 800d8e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ea:	e009      	b.n	800d900 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8f4:	e004      	b.n	800d900 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f99e 	bl	800dc3a <USBD_CtlError>
  }
}
 800d8fe:	bf00      	nop
 800d900:	bf00      	nop
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d912:	2300      	movs	r3, #0
 800d914:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	885b      	ldrh	r3, [r3, #2]
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	4b4e      	ldr	r3, [pc, #312]	@ (800da58 <USBD_SetConfig+0x150>)
 800d91e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d920:	4b4d      	ldr	r3, [pc, #308]	@ (800da58 <USBD_SetConfig+0x150>)
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d905      	bls.n	800d934 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f985 	bl	800dc3a <USBD_CtlError>
    return USBD_FAIL;
 800d930:	2303      	movs	r3, #3
 800d932:	e08c      	b.n	800da4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	d002      	beq.n	800d946 <USBD_SetConfig+0x3e>
 800d940:	2b03      	cmp	r3, #3
 800d942:	d029      	beq.n	800d998 <USBD_SetConfig+0x90>
 800d944:	e075      	b.n	800da32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d946:	4b44      	ldr	r3, [pc, #272]	@ (800da58 <USBD_SetConfig+0x150>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d020      	beq.n	800d990 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d94e:	4b42      	ldr	r3, [pc, #264]	@ (800da58 <USBD_SetConfig+0x150>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	461a      	mov	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d958:	4b3f      	ldr	r3, [pc, #252]	@ (800da58 <USBD_SetConfig+0x150>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7fe ffe3 	bl	800c92a <USBD_SetClassConfig>
 800d964:	4603      	mov	r3, r0
 800d966:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d968:	7bfb      	ldrb	r3, [r7, #15]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d008      	beq.n	800d980 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f962 	bl	800dc3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2202      	movs	r2, #2
 800d97a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d97e:	e065      	b.n	800da4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 fa31 	bl	800dde8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2203      	movs	r2, #3
 800d98a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d98e:	e05d      	b.n	800da4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fa29 	bl	800dde8 <USBD_CtlSendStatus>
      break;
 800d996:	e059      	b.n	800da4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d998:	4b2f      	ldr	r3, [pc, #188]	@ (800da58 <USBD_SetConfig+0x150>)
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d112      	bne.n	800d9c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d9a8:	4b2b      	ldr	r3, [pc, #172]	@ (800da58 <USBD_SetConfig+0x150>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9b2:	4b29      	ldr	r3, [pc, #164]	@ (800da58 <USBD_SetConfig+0x150>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fe ffd2 	bl	800c962 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fa12 	bl	800dde8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d9c4:	e042      	b.n	800da4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d9c6:	4b24      	ldr	r3, [pc, #144]	@ (800da58 <USBD_SetConfig+0x150>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d02a      	beq.n	800da2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7fe ffc0 	bl	800c962 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9e2:	4b1d      	ldr	r3, [pc, #116]	@ (800da58 <USBD_SetConfig+0x150>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9ec:	4b1a      	ldr	r3, [pc, #104]	@ (800da58 <USBD_SetConfig+0x150>)
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7fe ff99 	bl	800c92a <USBD_SetClassConfig>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00f      	beq.n	800da22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f918 	bl	800dc3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	4619      	mov	r1, r3
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7fe ffa5 	bl	800c962 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2202      	movs	r2, #2
 800da1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800da20:	e014      	b.n	800da4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f9e0 	bl	800dde8 <USBD_CtlSendStatus>
      break;
 800da28:	e010      	b.n	800da4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f9dc 	bl	800dde8 <USBD_CtlSendStatus>
      break;
 800da30:	e00c      	b.n	800da4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f900 	bl	800dc3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da3a:	4b07      	ldr	r3, [pc, #28]	@ (800da58 <USBD_SetConfig+0x150>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7fe ff8e 	bl	800c962 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da46:	2303      	movs	r3, #3
 800da48:	73fb      	strb	r3, [r7, #15]
      break;
 800da4a:	bf00      	nop
  }

  return ret;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	20000b34 	.word	0x20000b34

0800da5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	88db      	ldrh	r3, [r3, #6]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d004      	beq.n	800da78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f8e2 	bl	800dc3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da76:	e023      	b.n	800dac0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b02      	cmp	r3, #2
 800da82:	dc02      	bgt.n	800da8a <USBD_GetConfig+0x2e>
 800da84:	2b00      	cmp	r3, #0
 800da86:	dc03      	bgt.n	800da90 <USBD_GetConfig+0x34>
 800da88:	e015      	b.n	800dab6 <USBD_GetConfig+0x5a>
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d00b      	beq.n	800daa6 <USBD_GetConfig+0x4a>
 800da8e:	e012      	b.n	800dab6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3308      	adds	r3, #8
 800da9a:	2201      	movs	r2, #1
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f948 	bl	800dd34 <USBD_CtlSendData>
        break;
 800daa4:	e00c      	b.n	800dac0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3304      	adds	r3, #4
 800daaa:	2201      	movs	r2, #1
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f940 	bl	800dd34 <USBD_CtlSendData>
        break;
 800dab4:	e004      	b.n	800dac0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f8be 	bl	800dc3a <USBD_CtlError>
        break;
 800dabe:	bf00      	nop
}
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	3b01      	subs	r3, #1
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d81e      	bhi.n	800db1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	88db      	ldrh	r3, [r3, #6]
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d004      	beq.n	800daf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dae8:	6839      	ldr	r1, [r7, #0]
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f8a5 	bl	800dc3a <USBD_CtlError>
        break;
 800daf0:	e01a      	b.n	800db28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d005      	beq.n	800db0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	f043 0202 	orr.w	r2, r3, #2
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	330c      	adds	r3, #12
 800db12:	2202      	movs	r2, #2
 800db14:	4619      	mov	r1, r3
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f90c 	bl	800dd34 <USBD_CtlSendData>
      break;
 800db1c:	e004      	b.n	800db28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f88a 	bl	800dc3a <USBD_CtlError>
      break;
 800db26:	bf00      	nop
  }
}
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	885b      	ldrh	r3, [r3, #2]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d107      	bne.n	800db52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f94c 	bl	800dde8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800db50:	e013      	b.n	800db7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	885b      	ldrh	r3, [r3, #2]
 800db56:	2b02      	cmp	r3, #2
 800db58:	d10b      	bne.n	800db72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	889b      	ldrh	r3, [r3, #4]
 800db5e:	0a1b      	lsrs	r3, r3, #8
 800db60:	b29b      	uxth	r3, r3
 800db62:	b2da      	uxtb	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f93c 	bl	800dde8 <USBD_CtlSendStatus>
}
 800db70:	e003      	b.n	800db7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db72:	6839      	ldr	r1, [r7, #0]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 f860 	bl	800dc3a <USBD_CtlError>
}
 800db7a:	bf00      	nop
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db92:	b2db      	uxtb	r3, r3
 800db94:	3b01      	subs	r3, #1
 800db96:	2b02      	cmp	r3, #2
 800db98:	d80b      	bhi.n	800dbb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	885b      	ldrh	r3, [r3, #2]
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d10c      	bne.n	800dbbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 f91c 	bl	800dde8 <USBD_CtlSendStatus>
      }
      break;
 800dbb0:	e004      	b.n	800dbbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f840 	bl	800dc3a <USBD_CtlError>
      break;
 800dbba:	e000      	b.n	800dbbe <USBD_ClrFeature+0x3c>
      break;
 800dbbc:	bf00      	nop
  }
}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b084      	sub	sp, #16
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	781a      	ldrb	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	781a      	ldrb	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3301      	adds	r3, #1
 800dbee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff fa40 	bl	800d076 <SWAPBYTE>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3301      	adds	r3, #1
 800dc02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3301      	adds	r3, #1
 800dc08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f7ff fa33 	bl	800d076 <SWAPBYTE>
 800dc10:	4603      	mov	r3, r0
 800dc12:	461a      	mov	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3301      	adds	r3, #1
 800dc22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7ff fa26 	bl	800d076 <SWAPBYTE>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	80da      	strh	r2, [r3, #6]
}
 800dc32:	bf00      	nop
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b082      	sub	sp, #8
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc44:	2180      	movs	r1, #128	@ 0x80
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fd40 	bl	800e6cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fd3c 	bl	800e6cc <USBD_LL_StallEP>
}
 800dc54:	bf00      	nop
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d042      	beq.n	800dcf8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dc76:	6938      	ldr	r0, [r7, #16]
 800dc78:	f000 f842 	bl	800dd00 <USBD_GetLen>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	3301      	adds	r3, #1
 800dc80:	005b      	lsls	r3, r3, #1
 800dc82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc86:	d808      	bhi.n	800dc9a <USBD_GetString+0x3e>
 800dc88:	6938      	ldr	r0, [r7, #16]
 800dc8a:	f000 f839 	bl	800dd00 <USBD_GetLen>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	3301      	adds	r3, #1
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	005b      	lsls	r3, r3, #1
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	e001      	b.n	800dc9e <USBD_GetString+0x42>
 800dc9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dca2:	7dfb      	ldrb	r3, [r7, #23]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	4413      	add	r3, r2
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	7812      	ldrb	r2, [r2, #0]
 800dcac:	701a      	strb	r2, [r3, #0]
  idx++;
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	68ba      	ldr	r2, [r7, #8]
 800dcb8:	4413      	add	r3, r2
 800dcba:	2203      	movs	r2, #3
 800dcbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dcc4:	e013      	b.n	800dcee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800dcc6:	7dfb      	ldrb	r3, [r7, #23]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	4413      	add	r3, r2
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	7812      	ldrb	r2, [r2, #0]
 800dcd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	613b      	str	r3, [r7, #16]
    idx++;
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	4413      	add	r3, r2
 800dce4:	2200      	movs	r2, #0
 800dce6:	701a      	strb	r2, [r3, #0]
    idx++;
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
 800dcea:	3301      	adds	r3, #1
 800dcec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1e7      	bne.n	800dcc6 <USBD_GetString+0x6a>
 800dcf6:	e000      	b.n	800dcfa <USBD_GetString+0x9e>
    return;
 800dcf8:	bf00      	nop
  }
}
 800dcfa:	3718      	adds	r7, #24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dd10:	e005      	b.n	800dd1e <USBD_GetLen+0x1e>
  {
    len++;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	3301      	adds	r3, #1
 800dd16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1f5      	bne.n	800dd12 <USBD_GetLen+0x12>
  }

  return len;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2202      	movs	r2, #2
 800dd44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	2100      	movs	r1, #0
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 fd3f 	bl	800e7de <USBD_LL_Transmit>

  return USBD_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b084      	sub	sp, #16
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	60f8      	str	r0, [r7, #12]
 800dd72:	60b9      	str	r1, [r7, #8]
 800dd74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f000 fd2e 	bl	800e7de <USBD_LL_Transmit>

  return USBD_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f000 fd32 	bl	800e820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b084      	sub	sp, #16
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	60f8      	str	r0, [r7, #12]
 800ddce:	60b9      	str	r1, [r7, #8]
 800ddd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 fd21 	bl	800e820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2204      	movs	r2, #4
 800ddf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fced 	bl	800e7de <USBD_LL_Transmit>

  return USBD_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b082      	sub	sp, #8
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2205      	movs	r2, #5
 800de1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de1e:	2300      	movs	r3, #0
 800de20:	2200      	movs	r2, #0
 800de22:	2100      	movs	r1, #0
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fcfb 	bl	800e820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de2a:	2300      	movs	r3, #0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800de38:	2200      	movs	r2, #0
 800de3a:	4912      	ldr	r1, [pc, #72]	@ (800de84 <MX_USB_DEVICE_Init+0x50>)
 800de3c:	4812      	ldr	r0, [pc, #72]	@ (800de88 <MX_USB_DEVICE_Init+0x54>)
 800de3e:	f7fe fcf7 	bl	800c830 <USBD_Init>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800de48:	f7f4 f94a 	bl	80020e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800de4c:	490f      	ldr	r1, [pc, #60]	@ (800de8c <MX_USB_DEVICE_Init+0x58>)
 800de4e:	480e      	ldr	r0, [pc, #56]	@ (800de88 <MX_USB_DEVICE_Init+0x54>)
 800de50:	f7fe fd1e 	bl	800c890 <USBD_RegisterClass>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800de5a:	f7f4 f941 	bl	80020e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800de5e:	490c      	ldr	r1, [pc, #48]	@ (800de90 <MX_USB_DEVICE_Init+0x5c>)
 800de60:	4809      	ldr	r0, [pc, #36]	@ (800de88 <MX_USB_DEVICE_Init+0x54>)
 800de62:	f7fe fc15 	bl	800c690 <USBD_CDC_RegisterInterface>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de6c:	f7f4 f938 	bl	80020e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de70:	4805      	ldr	r0, [pc, #20]	@ (800de88 <MX_USB_DEVICE_Init+0x54>)
 800de72:	f7fe fd43 	bl	800c8fc <USBD_Start>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de7c:	f7f4 f930 	bl	80020e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de80:	bf00      	nop
 800de82:	bd80      	pop	{r7, pc}
 800de84:	200000ac 	.word	0x200000ac
 800de88:	20000b38 	.word	0x20000b38
 800de8c:	20000018 	.word	0x20000018
 800de90:	20000098 	.word	0x20000098

0800de94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de98:	2200      	movs	r2, #0
 800de9a:	4905      	ldr	r1, [pc, #20]	@ (800deb0 <CDC_Init_FS+0x1c>)
 800de9c:	4805      	ldr	r0, [pc, #20]	@ (800deb4 <CDC_Init_FS+0x20>)
 800de9e:	f7fe fc11 	bl	800c6c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dea2:	4905      	ldr	r1, [pc, #20]	@ (800deb8 <CDC_Init_FS+0x24>)
 800dea4:	4803      	ldr	r0, [pc, #12]	@ (800deb4 <CDC_Init_FS+0x20>)
 800dea6:	f7fe fc2f 	bl	800c708 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800deaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800deac:	4618      	mov	r0, r3
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	20001214 	.word	0x20001214
 800deb4:	20000b38 	.word	0x20000b38
 800deb8:	20000e14 	.word	0x20000e14

0800debc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800debc:	b480      	push	{r7}
 800debe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	6039      	str	r1, [r7, #0]
 800ded6:	71fb      	strb	r3, [r7, #7]
 800ded8:	4613      	mov	r3, r2
 800deda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	2b23      	cmp	r3, #35	@ 0x23
 800dee0:	d84a      	bhi.n	800df78 <CDC_Control_FS+0xac>
 800dee2:	a201      	add	r2, pc, #4	@ (adr r2, 800dee8 <CDC_Control_FS+0x1c>)
 800dee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee8:	0800df79 	.word	0x0800df79
 800deec:	0800df79 	.word	0x0800df79
 800def0:	0800df79 	.word	0x0800df79
 800def4:	0800df79 	.word	0x0800df79
 800def8:	0800df79 	.word	0x0800df79
 800defc:	0800df79 	.word	0x0800df79
 800df00:	0800df79 	.word	0x0800df79
 800df04:	0800df79 	.word	0x0800df79
 800df08:	0800df79 	.word	0x0800df79
 800df0c:	0800df79 	.word	0x0800df79
 800df10:	0800df79 	.word	0x0800df79
 800df14:	0800df79 	.word	0x0800df79
 800df18:	0800df79 	.word	0x0800df79
 800df1c:	0800df79 	.word	0x0800df79
 800df20:	0800df79 	.word	0x0800df79
 800df24:	0800df79 	.word	0x0800df79
 800df28:	0800df79 	.word	0x0800df79
 800df2c:	0800df79 	.word	0x0800df79
 800df30:	0800df79 	.word	0x0800df79
 800df34:	0800df79 	.word	0x0800df79
 800df38:	0800df79 	.word	0x0800df79
 800df3c:	0800df79 	.word	0x0800df79
 800df40:	0800df79 	.word	0x0800df79
 800df44:	0800df79 	.word	0x0800df79
 800df48:	0800df79 	.word	0x0800df79
 800df4c:	0800df79 	.word	0x0800df79
 800df50:	0800df79 	.word	0x0800df79
 800df54:	0800df79 	.word	0x0800df79
 800df58:	0800df79 	.word	0x0800df79
 800df5c:	0800df79 	.word	0x0800df79
 800df60:	0800df79 	.word	0x0800df79
 800df64:	0800df79 	.word	0x0800df79
 800df68:	0800df79 	.word	0x0800df79
 800df6c:	0800df79 	.word	0x0800df79
 800df70:	0800df79 	.word	0x0800df79
 800df74:	0800df79 	.word	0x0800df79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df78:	bf00      	nop
  }

  return (USBD_OK);
 800df7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b094      	sub	sp, #80	@ 0x50
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    // Ensure buffer is null-terminated for safe parsing
    Buf[*Len] = '\0';
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	4413      	add	r3, r2
 800df9a:	2200      	movs	r2, #0
 800df9c:	701a      	strb	r2, [r3, #0]

    // Parse CSV format
    char *token;
    char *str_ptr = (char *)Buf;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Extract ch1
    token = strtok(str_ptr, ";");
 800dfa2:	492d      	ldr	r1, [pc, #180]	@ (800e058 <CDC_Receive_FS+0xd0>)
 800dfa4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800dfa6:	f002 f8ab 	bl	8010100 <strtok>
 800dfaa:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (token != NULL) {
 800dfac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d009      	beq.n	800dfc6 <CDC_Receive_FS+0x3e>
        channel_freq.ch1 = strtoull(token, NULL, 10);
 800dfb2:	220a      	movs	r2, #10
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800dfb8:	f001 ff1c 	bl	800fdf4 <strtoull>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4926      	ldr	r1, [pc, #152]	@ (800e05c <CDC_Receive_FS+0xd4>)
 800dfc2:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // Extract ch2
    token = strtok(NULL, ";");
 800dfc6:	4924      	ldr	r1, [pc, #144]	@ (800e058 <CDC_Receive_FS+0xd0>)
 800dfc8:	2000      	movs	r0, #0
 800dfca:	f002 f899 	bl	8010100 <strtok>
 800dfce:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (token != NULL) {
 800dfd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d009      	beq.n	800dfea <CDC_Receive_FS+0x62>
        channel_freq.ch2 = strtoull(token, NULL, 10);
 800dfd6:	220a      	movs	r2, #10
 800dfd8:	2100      	movs	r1, #0
 800dfda:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800dfdc:	f001 ff0a 	bl	800fdf4 <strtoull>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	491d      	ldr	r1, [pc, #116]	@ (800e05c <CDC_Receive_FS+0xd4>)
 800dfe6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }

    // Extract ch3
    token = strtok(NULL, ";");
 800dfea:	491b      	ldr	r1, [pc, #108]	@ (800e058 <CDC_Receive_FS+0xd0>)
 800dfec:	2000      	movs	r0, #0
 800dfee:	f002 f887 	bl	8010100 <strtok>
 800dff2:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (token != NULL) {
 800dff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d009      	beq.n	800e00e <CDC_Receive_FS+0x86>
        channel_freq.ch3 = strtoull(token, NULL, 10);
 800dffa:	220a      	movs	r2, #10
 800dffc:	2100      	movs	r1, #0
 800dffe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e000:	f001 fef8 	bl	800fdf4 <strtoull>
 800e004:	4602      	mov	r2, r0
 800e006:	460b      	mov	r3, r1
 800e008:	4914      	ldr	r1, [pc, #80]	@ (800e05c <CDC_Receive_FS+0xd4>)
 800e00a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }

    // Debug print (optional)
    char supply_voltage_buf[64];
    sprintf(supply_voltage_buf, "B:%.2f\n", supply_voltage);
 800e00e:	4b14      	ldr	r3, [pc, #80]	@ (800e060 <CDC_Receive_FS+0xd8>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4618      	mov	r0, r3
 800e014:	f7f2 faa0 	bl	8000558 <__aeabi_f2d>
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	f107 0008 	add.w	r0, r7, #8
 800e020:	4910      	ldr	r1, [pc, #64]	@ (800e064 <CDC_Receive_FS+0xdc>)
 800e022:	f001 ffe7 	bl	800fff4 <sprintf>
    CDC_Transmit_FS((uint8_t *)supply_voltage_buf, strlen(supply_voltage_buf));
 800e026:	f107 0308 	add.w	r3, r7, #8
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7f2 f8d8 	bl	80001e0 <strlen>
 800e030:	4603      	mov	r3, r0
 800e032:	b29a      	uxth	r2, r3
 800e034:	f107 0308 	add.w	r3, r7, #8
 800e038:	4611      	mov	r1, r2
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 f816 	bl	800e06c <CDC_Transmit_FS>

    // Reset the receive buffer for the next packet
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 800e040:	6879      	ldr	r1, [r7, #4]
 800e042:	4809      	ldr	r0, [pc, #36]	@ (800e068 <CDC_Receive_FS+0xe0>)
 800e044:	f7fe fb60 	bl	800c708 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e048:	4807      	ldr	r0, [pc, #28]	@ (800e068 <CDC_Receive_FS+0xe0>)
 800e04a:	f7fe fbbb 	bl	800c7c4 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800e04e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e050:	4618      	mov	r0, r3
 800e052:	3750      	adds	r7, #80	@ 0x50
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	08014510 	.word	0x08014510
 800e05c:	20000a50 	.word	0x20000a50
 800e060:	20000a74 	.word	0x20000a74
 800e064:	08014514 	.word	0x08014514
 800e068:	20000b38 	.word	0x20000b38

0800e06c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	460b      	mov	r3, r1
 800e076:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e078:	2300      	movs	r3, #0
 800e07a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e07c:	4b0d      	ldr	r3, [pc, #52]	@ (800e0b4 <CDC_Transmit_FS+0x48>)
 800e07e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e082:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e08e:	2301      	movs	r3, #1
 800e090:	e00b      	b.n	800e0aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e092:	887b      	ldrh	r3, [r7, #2]
 800e094:	461a      	mov	r2, r3
 800e096:	6879      	ldr	r1, [r7, #4]
 800e098:	4806      	ldr	r0, [pc, #24]	@ (800e0b4 <CDC_Transmit_FS+0x48>)
 800e09a:	f7fe fb13 	bl	800c6c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e09e:	4805      	ldr	r0, [pc, #20]	@ (800e0b4 <CDC_Transmit_FS+0x48>)
 800e0a0:	f7fe fb50 	bl	800c744 <USBD_CDC_TransmitPacket>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20000b38 	.word	0x20000b38

0800e0b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b087      	sub	sp, #28
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	371c      	adds	r7, #28
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
	...

0800e0dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	6039      	str	r1, [r7, #0]
 800e0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2212      	movs	r2, #18
 800e0ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e0ee:	4b03      	ldr	r3, [pc, #12]	@ (800e0fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	200000c8 	.word	0x200000c8

0800e100 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	6039      	str	r1, [r7, #0]
 800e10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2204      	movs	r2, #4
 800e110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e112:	4b03      	ldr	r3, [pc, #12]	@ (800e120 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr
 800e120:	200000dc 	.word	0x200000dc

0800e124 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	6039      	str	r1, [r7, #0]
 800e12e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d105      	bne.n	800e142 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4907      	ldr	r1, [pc, #28]	@ (800e158 <USBD_FS_ProductStrDescriptor+0x34>)
 800e13a:	4808      	ldr	r0, [pc, #32]	@ (800e15c <USBD_FS_ProductStrDescriptor+0x38>)
 800e13c:	f7ff fd8e 	bl	800dc5c <USBD_GetString>
 800e140:	e004      	b.n	800e14c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	4904      	ldr	r1, [pc, #16]	@ (800e158 <USBD_FS_ProductStrDescriptor+0x34>)
 800e146:	4805      	ldr	r0, [pc, #20]	@ (800e15c <USBD_FS_ProductStrDescriptor+0x38>)
 800e148:	f7ff fd88 	bl	800dc5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e14c:	4b02      	ldr	r3, [pc, #8]	@ (800e158 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20001614 	.word	0x20001614
 800e15c:	0801451c 	.word	0x0801451c

0800e160 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	4603      	mov	r3, r0
 800e168:	6039      	str	r1, [r7, #0]
 800e16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	4904      	ldr	r1, [pc, #16]	@ (800e180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e170:	4804      	ldr	r0, [pc, #16]	@ (800e184 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e172:	f7ff fd73 	bl	800dc5c <USBD_GetString>
  return USBD_StrDesc;
 800e176:	4b02      	ldr	r3, [pc, #8]	@ (800e180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	20001614 	.word	0x20001614
 800e184:	08014534 	.word	0x08014534

0800e188 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	6039      	str	r1, [r7, #0]
 800e192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	221a      	movs	r2, #26
 800e198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e19a:	f000 f843 	bl	800e224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e19e:	4b02      	ldr	r3, [pc, #8]	@ (800e1a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	200000e0 	.word	0x200000e0

0800e1ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	6039      	str	r1, [r7, #0]
 800e1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1b8:	79fb      	ldrb	r3, [r7, #7]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d105      	bne.n	800e1ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	4907      	ldr	r1, [pc, #28]	@ (800e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1c2:	4808      	ldr	r0, [pc, #32]	@ (800e1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1c4:	f7ff fd4a 	bl	800dc5c <USBD_GetString>
 800e1c8:	e004      	b.n	800e1d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	4904      	ldr	r1, [pc, #16]	@ (800e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1ce:	4805      	ldr	r0, [pc, #20]	@ (800e1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1d0:	f7ff fd44 	bl	800dc5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1d4:	4b02      	ldr	r3, [pc, #8]	@ (800e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	20001614 	.word	0x20001614
 800e1e4:	08014548 	.word	0x08014548

0800e1e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	6039      	str	r1, [r7, #0]
 800e1f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d105      	bne.n	800e206 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	4907      	ldr	r1, [pc, #28]	@ (800e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1fe:	4808      	ldr	r0, [pc, #32]	@ (800e220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e200:	f7ff fd2c 	bl	800dc5c <USBD_GetString>
 800e204:	e004      	b.n	800e210 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	4904      	ldr	r1, [pc, #16]	@ (800e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e20a:	4805      	ldr	r0, [pc, #20]	@ (800e220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e20c:	f7ff fd26 	bl	800dc5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e210:	4b02      	ldr	r3, [pc, #8]	@ (800e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	20001614 	.word	0x20001614
 800e220:	08014554 	.word	0x08014554

0800e224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e22a:	4b0f      	ldr	r3, [pc, #60]	@ (800e268 <Get_SerialNum+0x44>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e230:	4b0e      	ldr	r3, [pc, #56]	@ (800e26c <Get_SerialNum+0x48>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e236:	4b0e      	ldr	r3, [pc, #56]	@ (800e270 <Get_SerialNum+0x4c>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4413      	add	r3, r2
 800e242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d009      	beq.n	800e25e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e24a:	2208      	movs	r2, #8
 800e24c:	4909      	ldr	r1, [pc, #36]	@ (800e274 <Get_SerialNum+0x50>)
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f000 f814 	bl	800e27c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e254:	2204      	movs	r2, #4
 800e256:	4908      	ldr	r1, [pc, #32]	@ (800e278 <Get_SerialNum+0x54>)
 800e258:	68b8      	ldr	r0, [r7, #8]
 800e25a:	f000 f80f 	bl	800e27c <IntToUnicode>
  }
}
 800e25e:	bf00      	nop
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	1fff7a10 	.word	0x1fff7a10
 800e26c:	1fff7a14 	.word	0x1fff7a14
 800e270:	1fff7a18 	.word	0x1fff7a18
 800e274:	200000e2 	.word	0x200000e2
 800e278:	200000f2 	.word	0x200000f2

0800e27c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b087      	sub	sp, #28
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	4613      	mov	r3, r2
 800e288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e28e:	2300      	movs	r3, #0
 800e290:	75fb      	strb	r3, [r7, #23]
 800e292:	e027      	b.n	800e2e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	0f1b      	lsrs	r3, r3, #28
 800e298:	2b09      	cmp	r3, #9
 800e29a:	d80b      	bhi.n	800e2b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	0f1b      	lsrs	r3, r3, #28
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	7dfb      	ldrb	r3, [r7, #23]
 800e2a4:	005b      	lsls	r3, r3, #1
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	440b      	add	r3, r1
 800e2ac:	3230      	adds	r2, #48	@ 0x30
 800e2ae:	b2d2      	uxtb	r2, r2
 800e2b0:	701a      	strb	r2, [r3, #0]
 800e2b2:	e00a      	b.n	800e2ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	0f1b      	lsrs	r3, r3, #28
 800e2b8:	b2da      	uxtb	r2, r3
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
 800e2bc:	005b      	lsls	r3, r3, #1
 800e2be:	4619      	mov	r1, r3
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	440b      	add	r3, r1
 800e2c4:	3237      	adds	r2, #55	@ 0x37
 800e2c6:	b2d2      	uxtb	r2, r2
 800e2c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	011b      	lsls	r3, r3, #4
 800e2ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	4413      	add	r3, r2
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	75fb      	strb	r3, [r7, #23]
 800e2e4:	7dfa      	ldrb	r2, [r7, #23]
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d3d3      	bcc.n	800e294 <IntToUnicode+0x18>
  }
}
 800e2ec:	bf00      	nop
 800e2ee:	bf00      	nop
 800e2f0:	371c      	adds	r7, #28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr
	...

0800e2fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b08a      	sub	sp, #40	@ 0x28
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e304:	f107 0314 	add.w	r3, r7, #20
 800e308:	2200      	movs	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	605a      	str	r2, [r3, #4]
 800e30e:	609a      	str	r2, [r3, #8]
 800e310:	60da      	str	r2, [r3, #12]
 800e312:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e31c:	d13a      	bne.n	800e394 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e31e:	2300      	movs	r3, #0
 800e320:	613b      	str	r3, [r7, #16]
 800e322:	4b1e      	ldr	r3, [pc, #120]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e326:	4a1d      	ldr	r2, [pc, #116]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e328:	f043 0301 	orr.w	r3, r3, #1
 800e32c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e32e:	4b1b      	ldr	r3, [pc, #108]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e332:	f003 0301 	and.w	r3, r3, #1
 800e336:	613b      	str	r3, [r7, #16]
 800e338:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e33a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e33e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e340:	2302      	movs	r3, #2
 800e342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e344:	2300      	movs	r3, #0
 800e346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e348:	2303      	movs	r3, #3
 800e34a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e34c:	230a      	movs	r3, #10
 800e34e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e350:	f107 0314 	add.w	r3, r7, #20
 800e354:	4619      	mov	r1, r3
 800e356:	4812      	ldr	r0, [pc, #72]	@ (800e3a0 <HAL_PCD_MspInit+0xa4>)
 800e358:	f7f8 fafa 	bl	8006950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e35c:	4b0f      	ldr	r3, [pc, #60]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e360:	4a0e      	ldr	r2, [pc, #56]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e366:	6353      	str	r3, [r2, #52]	@ 0x34
 800e368:	2300      	movs	r3, #0
 800e36a:	60fb      	str	r3, [r7, #12]
 800e36c:	4b0b      	ldr	r3, [pc, #44]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e36e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e370:	4a0a      	ldr	r2, [pc, #40]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e376:	6453      	str	r3, [r2, #68]	@ 0x44
 800e378:	4b08      	ldr	r3, [pc, #32]	@ (800e39c <HAL_PCD_MspInit+0xa0>)
 800e37a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e37c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e380:	60fb      	str	r3, [r7, #12]
 800e382:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e384:	2200      	movs	r2, #0
 800e386:	2100      	movs	r1, #0
 800e388:	2043      	movs	r0, #67	@ 0x43
 800e38a:	f7f7 ff3a 	bl	8006202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e38e:	2043      	movs	r0, #67	@ 0x43
 800e390:	f7f7 ff53 	bl	800623a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e394:	bf00      	nop
 800e396:	3728      	adds	r7, #40	@ 0x28
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	40023800 	.word	0x40023800
 800e3a0:	40020000 	.word	0x40020000

0800e3a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4610      	mov	r0, r2
 800e3bc:	f7fe faeb 	bl	800c996 <USBD_LL_SetupStage>
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e3da:	78fa      	ldrb	r2, [r7, #3]
 800e3dc:	6879      	ldr	r1, [r7, #4]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	00db      	lsls	r3, r3, #3
 800e3e2:	4413      	add	r3, r2
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	440b      	add	r3, r1
 800e3e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	78fb      	ldrb	r3, [r7, #3]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	f7fe fb25 	bl	800ca40 <USBD_LL_DataOutStage>
}
 800e3f6:	bf00      	nop
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b082      	sub	sp, #8
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	460b      	mov	r3, r1
 800e408:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e410:	78fa      	ldrb	r2, [r7, #3]
 800e412:	6879      	ldr	r1, [r7, #4]
 800e414:	4613      	mov	r3, r2
 800e416:	00db      	lsls	r3, r3, #3
 800e418:	4413      	add	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	440b      	add	r3, r1
 800e41e:	3320      	adds	r3, #32
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	78fb      	ldrb	r3, [r7, #3]
 800e424:	4619      	mov	r1, r3
 800e426:	f7fe fbbe 	bl	800cba6 <USBD_LL_DataInStage>
}
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b082      	sub	sp, #8
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e440:	4618      	mov	r0, r3
 800e442:	f7fe fcf8 	bl	800ce36 <USBD_LL_SOF>
}
 800e446:	bf00      	nop
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b084      	sub	sp, #16
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e456:	2301      	movs	r3, #1
 800e458:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	79db      	ldrb	r3, [r3, #7]
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d001      	beq.n	800e466 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e462:	f7f3 fe3d 	bl	80020e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e46c:	7bfa      	ldrb	r2, [r7, #15]
 800e46e:	4611      	mov	r1, r2
 800e470:	4618      	mov	r0, r3
 800e472:	f7fe fc9c 	bl	800cdae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fc44 	bl	800cd0a <USBD_LL_Reset>
}
 800e482:	bf00      	nop
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fe fc97 	bl	800cdce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	6812      	ldr	r2, [r2, #0]
 800e4ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e4b2:	f043 0301 	orr.w	r3, r3, #1
 800e4b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	7adb      	ldrb	r3, [r3, #11]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d005      	beq.n	800e4cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e4c0:	4b04      	ldr	r3, [pc, #16]	@ (800e4d4 <HAL_PCD_SuspendCallback+0x48>)
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	4a03      	ldr	r2, [pc, #12]	@ (800e4d4 <HAL_PCD_SuspendCallback+0x48>)
 800e4c6:	f043 0306 	orr.w	r3, r3, #6
 800e4ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	e000ed00 	.word	0xe000ed00

0800e4d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe fc8d 	bl	800ce06 <USBD_LL_Resume>
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e506:	78fa      	ldrb	r2, [r7, #3]
 800e508:	4611      	mov	r1, r2
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe fce5 	bl	800ceda <USBD_LL_IsoOUTIncomplete>
}
 800e510:	bf00      	nop
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e52a:	78fa      	ldrb	r2, [r7, #3]
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fca1 	bl	800ce76 <USBD_LL_IsoINIncomplete>
}
 800e534:	bf00      	nop
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe fcf7 	bl	800cf3e <USBD_LL_DevConnected>
}
 800e550:	bf00      	nop
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fcf4 	bl	800cf54 <USBD_LL_DevDisconnected>
}
 800e56c:	bf00      	nop
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d13c      	bne.n	800e5fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e584:	4a20      	ldr	r2, [pc, #128]	@ (800e608 <USBD_LL_Init+0x94>)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a1e      	ldr	r2, [pc, #120]	@ (800e608 <USBD_LL_Init+0x94>)
 800e590:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e594:	4b1c      	ldr	r3, [pc, #112]	@ (800e608 <USBD_LL_Init+0x94>)
 800e596:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e59a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e59c:	4b1a      	ldr	r3, [pc, #104]	@ (800e608 <USBD_LL_Init+0x94>)
 800e59e:	2204      	movs	r2, #4
 800e5a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5a2:	4b19      	ldr	r3, [pc, #100]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5a8:	4b17      	ldr	r3, [pc, #92]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5ae:	4b16      	ldr	r3, [pc, #88]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5b0:	2202      	movs	r2, #2
 800e5b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e5b4:	4b14      	ldr	r3, [pc, #80]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e5ba:	4b13      	ldr	r3, [pc, #76]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e5c0:	4b11      	ldr	r3, [pc, #68]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e5c6:	4b10      	ldr	r3, [pc, #64]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e5cc:	4b0e      	ldr	r3, [pc, #56]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e5d2:	480d      	ldr	r0, [pc, #52]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5d4:	f7f9 fe42 	bl	800825c <HAL_PCD_Init>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e5de:	f7f3 fd7f 	bl	80020e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e5e2:	2180      	movs	r1, #128	@ 0x80
 800e5e4:	4808      	ldr	r0, [pc, #32]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5e6:	f7fb f86e 	bl	80096c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e5ea:	2240      	movs	r2, #64	@ 0x40
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	4806      	ldr	r0, [pc, #24]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5f0:	f7fb f822 	bl	8009638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e5f4:	2280      	movs	r2, #128	@ 0x80
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	4803      	ldr	r0, [pc, #12]	@ (800e608 <USBD_LL_Init+0x94>)
 800e5fa:	f7fb f81d 	bl	8009638 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3708      	adds	r7, #8
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	20001814 	.word	0x20001814

0800e60c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e622:	4618      	mov	r0, r3
 800e624:	f7f9 ff29 	bl	800847a <HAL_PCD_Start>
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 f942 	bl	800e8b8 <USBD_Get_USB_Status>
 800e634:	4603      	mov	r3, r0
 800e636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e638:	7bbb      	ldrb	r3, [r7, #14]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
 800e64a:	4608      	mov	r0, r1
 800e64c:	4611      	mov	r1, r2
 800e64e:	461a      	mov	r2, r3
 800e650:	4603      	mov	r3, r0
 800e652:	70fb      	strb	r3, [r7, #3]
 800e654:	460b      	mov	r3, r1
 800e656:	70bb      	strb	r3, [r7, #2]
 800e658:	4613      	mov	r3, r2
 800e65a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e66a:	78bb      	ldrb	r3, [r7, #2]
 800e66c:	883a      	ldrh	r2, [r7, #0]
 800e66e:	78f9      	ldrb	r1, [r7, #3]
 800e670:	f7fa fbfd 	bl	8008e6e <HAL_PCD_EP_Open>
 800e674:	4603      	mov	r3, r0
 800e676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e678:	7bfb      	ldrb	r3, [r7, #15]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 f91c 	bl	800e8b8 <USBD_Get_USB_Status>
 800e680:	4603      	mov	r3, r0
 800e682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e684:	7bbb      	ldrb	r3, [r7, #14]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b084      	sub	sp, #16
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	460b      	mov	r3, r1
 800e698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6a8:	78fa      	ldrb	r2, [r7, #3]
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fa fc48 	bl	8008f42 <HAL_PCD_EP_Close>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 f8fd 	bl	800e8b8 <USBD_Get_USB_Status>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6e6:	78fa      	ldrb	r2, [r7, #3]
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fa fd00 	bl	80090f0 <HAL_PCD_EP_SetStall>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 f8de 	bl	800e8b8 <USBD_Get_USB_Status>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e700:	7bbb      	ldrb	r3, [r7, #14]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b084      	sub	sp, #16
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	460b      	mov	r3, r1
 800e714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e716:	2300      	movs	r3, #0
 800e718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e724:	78fa      	ldrb	r2, [r7, #3]
 800e726:	4611      	mov	r1, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fa fd44 	bl	80091b6 <HAL_PCD_EP_ClrStall>
 800e72e:	4603      	mov	r3, r0
 800e730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e732:	7bfb      	ldrb	r3, [r7, #15]
 800e734:	4618      	mov	r0, r3
 800e736:	f000 f8bf 	bl	800e8b8 <USBD_Get_USB_Status>
 800e73a:	4603      	mov	r3, r0
 800e73c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e73e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	460b      	mov	r3, r1
 800e752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e75a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e75c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e760:	2b00      	cmp	r3, #0
 800e762:	da0b      	bge.n	800e77c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e764:	78fb      	ldrb	r3, [r7, #3]
 800e766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e76a:	68f9      	ldr	r1, [r7, #12]
 800e76c:	4613      	mov	r3, r2
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	4413      	add	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	440b      	add	r3, r1
 800e776:	3316      	adds	r3, #22
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	e00b      	b.n	800e794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e77c:	78fb      	ldrb	r3, [r7, #3]
 800e77e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e782:	68f9      	ldr	r1, [r7, #12]
 800e784:	4613      	mov	r3, r2
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	4413      	add	r3, r2
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	440b      	add	r3, r1
 800e78e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e792:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e794:	4618      	mov	r0, r3
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7ba:	78fa      	ldrb	r2, [r7, #3]
 800e7bc:	4611      	mov	r1, r2
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fa fb31 	bl	8008e26 <HAL_PCD_SetAddress>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f000 f874 	bl	800e8b8 <USBD_Get_USB_Status>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b086      	sub	sp, #24
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	60f8      	str	r0, [r7, #12]
 800e7e6:	607a      	str	r2, [r7, #4]
 800e7e8:	603b      	str	r3, [r7, #0]
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e7fc:	7af9      	ldrb	r1, [r7, #11]
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	f7fa fc3b 	bl	800907c <HAL_PCD_EP_Transmit>
 800e806:	4603      	mov	r3, r0
 800e808:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 f853 	bl	800e8b8 <USBD_Get_USB_Status>
 800e812:	4603      	mov	r3, r0
 800e814:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e816:	7dbb      	ldrb	r3, [r7, #22]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	607a      	str	r2, [r7, #4]
 800e82a:	603b      	str	r3, [r7, #0]
 800e82c:	460b      	mov	r3, r1
 800e82e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e83e:	7af9      	ldrb	r1, [r7, #11]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	f7fa fbc7 	bl	8008fd6 <HAL_PCD_EP_Receive>
 800e848:	4603      	mov	r3, r0
 800e84a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	4618      	mov	r0, r3
 800e850:	f000 f832 	bl	800e8b8 <USBD_Get_USB_Status>
 800e854:	4603      	mov	r3, r0
 800e856:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e858:	7dbb      	ldrb	r3, [r7, #22]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b082      	sub	sp, #8
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	460b      	mov	r3, r1
 800e86c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e874:	78fa      	ldrb	r2, [r7, #3]
 800e876:	4611      	mov	r1, r2
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fa fbe7 	bl	800904c <HAL_PCD_EP_GetRxCount>
 800e87e:	4603      	mov	r3, r0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e890:	4b03      	ldr	r3, [pc, #12]	@ (800e8a0 <USBD_static_malloc+0x18>)
}
 800e892:	4618      	mov	r0, r3
 800e894:	370c      	adds	r7, #12
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	20001cf8 	.word	0x20001cf8

0800e8a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]

}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	2b03      	cmp	r3, #3
 800e8ca:	d817      	bhi.n	800e8fc <USBD_Get_USB_Status+0x44>
 800e8cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e8d4 <USBD_Get_USB_Status+0x1c>)
 800e8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d2:	bf00      	nop
 800e8d4:	0800e8e5 	.word	0x0800e8e5
 800e8d8:	0800e8eb 	.word	0x0800e8eb
 800e8dc:	0800e8f1 	.word	0x0800e8f1
 800e8e0:	0800e8f7 	.word	0x0800e8f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8e8:	e00b      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ee:	e008      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e8f4:	e005      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e8fa:	e002      	b.n	800e902 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e8fc:	2303      	movs	r3, #3
 800e8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e900:	bf00      	nop
  }
  return usb_status;
 800e902:	7bfb      	ldrb	r3, [r7, #15]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <_ZdlPvj>:
 800e910:	f000 b802 	b.w	800e918 <_ZdlPv>

0800e914 <_Znaj>:
 800e914:	f000 b802 	b.w	800e91c <_Znwj>

0800e918 <_ZdlPv>:
 800e918:	f000 bf88 	b.w	800f82c <free>

0800e91c <_Znwj>:
 800e91c:	2801      	cmp	r0, #1
 800e91e:	bf38      	it	cc
 800e920:	2001      	movcc	r0, #1
 800e922:	b510      	push	{r4, lr}
 800e924:	4604      	mov	r4, r0
 800e926:	4620      	mov	r0, r4
 800e928:	f000 ff78 	bl	800f81c <malloc>
 800e92c:	b100      	cbz	r0, 800e930 <_Znwj+0x14>
 800e92e:	bd10      	pop	{r4, pc}
 800e930:	f000 f806 	bl	800e940 <_ZSt15get_new_handlerv>
 800e934:	b908      	cbnz	r0, 800e93a <_Znwj+0x1e>
 800e936:	f000 ff69 	bl	800f80c <abort>
 800e93a:	4780      	blx	r0
 800e93c:	e7f3      	b.n	800e926 <_Znwj+0xa>
	...

0800e940 <_ZSt15get_new_handlerv>:
 800e940:	4b02      	ldr	r3, [pc, #8]	@ (800e94c <_ZSt15get_new_handlerv+0xc>)
 800e942:	6818      	ldr	r0, [r3, #0]
 800e944:	f3bf 8f5b 	dmb	ish
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	20001f18 	.word	0x20001f18

0800e950 <pow>:
 800e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e952:	ed2d 8b02 	vpush	{d8}
 800e956:	eeb0 8a40 	vmov.f32	s16, s0
 800e95a:	eef0 8a60 	vmov.f32	s17, s1
 800e95e:	ec55 4b11 	vmov	r4, r5, d1
 800e962:	f000 f871 	bl	800ea48 <__ieee754_pow>
 800e966:	4622      	mov	r2, r4
 800e968:	462b      	mov	r3, r5
 800e96a:	4620      	mov	r0, r4
 800e96c:	4629      	mov	r1, r5
 800e96e:	ec57 6b10 	vmov	r6, r7, d0
 800e972:	f7f2 f8e3 	bl	8000b3c <__aeabi_dcmpun>
 800e976:	2800      	cmp	r0, #0
 800e978:	d13b      	bne.n	800e9f2 <pow+0xa2>
 800e97a:	ec51 0b18 	vmov	r0, r1, d8
 800e97e:	2200      	movs	r2, #0
 800e980:	2300      	movs	r3, #0
 800e982:	f7f2 f8a9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e986:	b1b8      	cbz	r0, 800e9b8 <pow+0x68>
 800e988:	2200      	movs	r2, #0
 800e98a:	2300      	movs	r3, #0
 800e98c:	4620      	mov	r0, r4
 800e98e:	4629      	mov	r1, r5
 800e990:	f7f2 f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 800e994:	2800      	cmp	r0, #0
 800e996:	d146      	bne.n	800ea26 <pow+0xd6>
 800e998:	ec45 4b10 	vmov	d0, r4, r5
 800e99c:	f000 f848 	bl	800ea30 <finite>
 800e9a0:	b338      	cbz	r0, 800e9f2 <pow+0xa2>
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	f7f2 f89f 	bl	8000aec <__aeabi_dcmplt>
 800e9ae:	b300      	cbz	r0, 800e9f2 <pow+0xa2>
 800e9b0:	f001 fc72 	bl	8010298 <__errno>
 800e9b4:	2322      	movs	r3, #34	@ 0x22
 800e9b6:	e01b      	b.n	800e9f0 <pow+0xa0>
 800e9b8:	ec47 6b10 	vmov	d0, r6, r7
 800e9bc:	f000 f838 	bl	800ea30 <finite>
 800e9c0:	b9e0      	cbnz	r0, 800e9fc <pow+0xac>
 800e9c2:	eeb0 0a48 	vmov.f32	s0, s16
 800e9c6:	eef0 0a68 	vmov.f32	s1, s17
 800e9ca:	f000 f831 	bl	800ea30 <finite>
 800e9ce:	b1a8      	cbz	r0, 800e9fc <pow+0xac>
 800e9d0:	ec45 4b10 	vmov	d0, r4, r5
 800e9d4:	f000 f82c 	bl	800ea30 <finite>
 800e9d8:	b180      	cbz	r0, 800e9fc <pow+0xac>
 800e9da:	4632      	mov	r2, r6
 800e9dc:	463b      	mov	r3, r7
 800e9de:	4630      	mov	r0, r6
 800e9e0:	4639      	mov	r1, r7
 800e9e2:	f7f2 f8ab 	bl	8000b3c <__aeabi_dcmpun>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d0e2      	beq.n	800e9b0 <pow+0x60>
 800e9ea:	f001 fc55 	bl	8010298 <__errno>
 800e9ee:	2321      	movs	r3, #33	@ 0x21
 800e9f0:	6003      	str	r3, [r0, #0]
 800e9f2:	ecbd 8b02 	vpop	{d8}
 800e9f6:	ec47 6b10 	vmov	d0, r6, r7
 800e9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4630      	mov	r0, r6
 800ea02:	4639      	mov	r1, r7
 800ea04:	f7f2 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d0f2      	beq.n	800e9f2 <pow+0xa2>
 800ea0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ea10:	eef0 0a68 	vmov.f32	s1, s17
 800ea14:	f000 f80c 	bl	800ea30 <finite>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d0ea      	beq.n	800e9f2 <pow+0xa2>
 800ea1c:	ec45 4b10 	vmov	d0, r4, r5
 800ea20:	f000 f806 	bl	800ea30 <finite>
 800ea24:	e7c3      	b.n	800e9ae <pow+0x5e>
 800ea26:	4f01      	ldr	r7, [pc, #4]	@ (800ea2c <pow+0xdc>)
 800ea28:	2600      	movs	r6, #0
 800ea2a:	e7e2      	b.n	800e9f2 <pow+0xa2>
 800ea2c:	3ff00000 	.word	0x3ff00000

0800ea30 <finite>:
 800ea30:	b082      	sub	sp, #8
 800ea32:	ed8d 0b00 	vstr	d0, [sp]
 800ea36:	9801      	ldr	r0, [sp, #4]
 800ea38:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ea3c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ea40:	0fc0      	lsrs	r0, r0, #31
 800ea42:	b002      	add	sp, #8
 800ea44:	4770      	bx	lr
	...

0800ea48 <__ieee754_pow>:
 800ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4c:	b091      	sub	sp, #68	@ 0x44
 800ea4e:	ed8d 1b00 	vstr	d1, [sp]
 800ea52:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ea56:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ea5a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ea5e:	ec57 6b10 	vmov	r6, r7, d0
 800ea62:	d113      	bne.n	800ea8c <__ieee754_pow+0x44>
 800ea64:	19b3      	adds	r3, r6, r6
 800ea66:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ea6a:	4152      	adcs	r2, r2
 800ea6c:	4298      	cmp	r0, r3
 800ea6e:	4b98      	ldr	r3, [pc, #608]	@ (800ecd0 <__ieee754_pow+0x288>)
 800ea70:	4193      	sbcs	r3, r2
 800ea72:	f080 84ea 	bcs.w	800f44a <__ieee754_pow+0xa02>
 800ea76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	f7f1 fc0d 	bl	800029c <__adddf3>
 800ea82:	ec41 0b10 	vmov	d0, r0, r1
 800ea86:	b011      	add	sp, #68	@ 0x44
 800ea88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea8c:	4a91      	ldr	r2, [pc, #580]	@ (800ecd4 <__ieee754_pow+0x28c>)
 800ea8e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ea92:	4590      	cmp	r8, r2
 800ea94:	463d      	mov	r5, r7
 800ea96:	4633      	mov	r3, r6
 800ea98:	d806      	bhi.n	800eaa8 <__ieee754_pow+0x60>
 800ea9a:	d101      	bne.n	800eaa0 <__ieee754_pow+0x58>
 800ea9c:	2e00      	cmp	r6, #0
 800ea9e:	d1ea      	bne.n	800ea76 <__ieee754_pow+0x2e>
 800eaa0:	4592      	cmp	sl, r2
 800eaa2:	d801      	bhi.n	800eaa8 <__ieee754_pow+0x60>
 800eaa4:	d10e      	bne.n	800eac4 <__ieee754_pow+0x7c>
 800eaa6:	b169      	cbz	r1, 800eac4 <__ieee754_pow+0x7c>
 800eaa8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800eaac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800eab0:	431d      	orrs	r5, r3
 800eab2:	d1e0      	bne.n	800ea76 <__ieee754_pow+0x2e>
 800eab4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eab8:	18db      	adds	r3, r3, r3
 800eaba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800eabe:	4152      	adcs	r2, r2
 800eac0:	429d      	cmp	r5, r3
 800eac2:	e7d4      	b.n	800ea6e <__ieee754_pow+0x26>
 800eac4:	2d00      	cmp	r5, #0
 800eac6:	46c3      	mov	fp, r8
 800eac8:	da3a      	bge.n	800eb40 <__ieee754_pow+0xf8>
 800eaca:	4a83      	ldr	r2, [pc, #524]	@ (800ecd8 <__ieee754_pow+0x290>)
 800eacc:	4592      	cmp	sl, r2
 800eace:	d84d      	bhi.n	800eb6c <__ieee754_pow+0x124>
 800ead0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ead4:	4592      	cmp	sl, r2
 800ead6:	f240 84c7 	bls.w	800f468 <__ieee754_pow+0xa20>
 800eada:	ea4f 522a 	mov.w	r2, sl, asr #20
 800eade:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800eae2:	2a14      	cmp	r2, #20
 800eae4:	dd0f      	ble.n	800eb06 <__ieee754_pow+0xbe>
 800eae6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800eaea:	fa21 f402 	lsr.w	r4, r1, r2
 800eaee:	fa04 f202 	lsl.w	r2, r4, r2
 800eaf2:	428a      	cmp	r2, r1
 800eaf4:	f040 84b8 	bne.w	800f468 <__ieee754_pow+0xa20>
 800eaf8:	f004 0401 	and.w	r4, r4, #1
 800eafc:	f1c4 0402 	rsb	r4, r4, #2
 800eb00:	2900      	cmp	r1, #0
 800eb02:	d158      	bne.n	800ebb6 <__ieee754_pow+0x16e>
 800eb04:	e00e      	b.n	800eb24 <__ieee754_pow+0xdc>
 800eb06:	2900      	cmp	r1, #0
 800eb08:	d154      	bne.n	800ebb4 <__ieee754_pow+0x16c>
 800eb0a:	f1c2 0214 	rsb	r2, r2, #20
 800eb0e:	fa4a f402 	asr.w	r4, sl, r2
 800eb12:	fa04 f202 	lsl.w	r2, r4, r2
 800eb16:	4552      	cmp	r2, sl
 800eb18:	f040 84a3 	bne.w	800f462 <__ieee754_pow+0xa1a>
 800eb1c:	f004 0401 	and.w	r4, r4, #1
 800eb20:	f1c4 0402 	rsb	r4, r4, #2
 800eb24:	4a6d      	ldr	r2, [pc, #436]	@ (800ecdc <__ieee754_pow+0x294>)
 800eb26:	4592      	cmp	sl, r2
 800eb28:	d12e      	bne.n	800eb88 <__ieee754_pow+0x140>
 800eb2a:	f1b9 0f00 	cmp.w	r9, #0
 800eb2e:	f280 8494 	bge.w	800f45a <__ieee754_pow+0xa12>
 800eb32:	496a      	ldr	r1, [pc, #424]	@ (800ecdc <__ieee754_pow+0x294>)
 800eb34:	4632      	mov	r2, r6
 800eb36:	463b      	mov	r3, r7
 800eb38:	2000      	movs	r0, #0
 800eb3a:	f7f1 fe8f 	bl	800085c <__aeabi_ddiv>
 800eb3e:	e7a0      	b.n	800ea82 <__ieee754_pow+0x3a>
 800eb40:	2400      	movs	r4, #0
 800eb42:	bbc1      	cbnz	r1, 800ebb6 <__ieee754_pow+0x16e>
 800eb44:	4a63      	ldr	r2, [pc, #396]	@ (800ecd4 <__ieee754_pow+0x28c>)
 800eb46:	4592      	cmp	sl, r2
 800eb48:	d1ec      	bne.n	800eb24 <__ieee754_pow+0xdc>
 800eb4a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800eb4e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800eb52:	431a      	orrs	r2, r3
 800eb54:	f000 8479 	beq.w	800f44a <__ieee754_pow+0xa02>
 800eb58:	4b61      	ldr	r3, [pc, #388]	@ (800ece0 <__ieee754_pow+0x298>)
 800eb5a:	4598      	cmp	r8, r3
 800eb5c:	d908      	bls.n	800eb70 <__ieee754_pow+0x128>
 800eb5e:	f1b9 0f00 	cmp.w	r9, #0
 800eb62:	f2c0 8476 	blt.w	800f452 <__ieee754_pow+0xa0a>
 800eb66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb6a:	e78a      	b.n	800ea82 <__ieee754_pow+0x3a>
 800eb6c:	2402      	movs	r4, #2
 800eb6e:	e7e8      	b.n	800eb42 <__ieee754_pow+0xfa>
 800eb70:	f1b9 0f00 	cmp.w	r9, #0
 800eb74:	f04f 0000 	mov.w	r0, #0
 800eb78:	f04f 0100 	mov.w	r1, #0
 800eb7c:	da81      	bge.n	800ea82 <__ieee754_pow+0x3a>
 800eb7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eb82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800eb86:	e77c      	b.n	800ea82 <__ieee754_pow+0x3a>
 800eb88:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800eb8c:	d106      	bne.n	800eb9c <__ieee754_pow+0x154>
 800eb8e:	4632      	mov	r2, r6
 800eb90:	463b      	mov	r3, r7
 800eb92:	4630      	mov	r0, r6
 800eb94:	4639      	mov	r1, r7
 800eb96:	f7f1 fd37 	bl	8000608 <__aeabi_dmul>
 800eb9a:	e772      	b.n	800ea82 <__ieee754_pow+0x3a>
 800eb9c:	4a51      	ldr	r2, [pc, #324]	@ (800ece4 <__ieee754_pow+0x29c>)
 800eb9e:	4591      	cmp	r9, r2
 800eba0:	d109      	bne.n	800ebb6 <__ieee754_pow+0x16e>
 800eba2:	2d00      	cmp	r5, #0
 800eba4:	db07      	blt.n	800ebb6 <__ieee754_pow+0x16e>
 800eba6:	ec47 6b10 	vmov	d0, r6, r7
 800ebaa:	b011      	add	sp, #68	@ 0x44
 800ebac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb0:	f000 bd52 	b.w	800f658 <__ieee754_sqrt>
 800ebb4:	2400      	movs	r4, #0
 800ebb6:	ec47 6b10 	vmov	d0, r6, r7
 800ebba:	9302      	str	r3, [sp, #8]
 800ebbc:	f000 fc88 	bl	800f4d0 <fabs>
 800ebc0:	9b02      	ldr	r3, [sp, #8]
 800ebc2:	ec51 0b10 	vmov	r0, r1, d0
 800ebc6:	bb53      	cbnz	r3, 800ec1e <__ieee754_pow+0x1d6>
 800ebc8:	4b44      	ldr	r3, [pc, #272]	@ (800ecdc <__ieee754_pow+0x294>)
 800ebca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d002      	beq.n	800ebd8 <__ieee754_pow+0x190>
 800ebd2:	f1b8 0f00 	cmp.w	r8, #0
 800ebd6:	d122      	bne.n	800ec1e <__ieee754_pow+0x1d6>
 800ebd8:	f1b9 0f00 	cmp.w	r9, #0
 800ebdc:	da05      	bge.n	800ebea <__ieee754_pow+0x1a2>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	2000      	movs	r0, #0
 800ebe4:	493d      	ldr	r1, [pc, #244]	@ (800ecdc <__ieee754_pow+0x294>)
 800ebe6:	f7f1 fe39 	bl	800085c <__aeabi_ddiv>
 800ebea:	2d00      	cmp	r5, #0
 800ebec:	f6bf af49 	bge.w	800ea82 <__ieee754_pow+0x3a>
 800ebf0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ebf4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ebf8:	ea58 0804 	orrs.w	r8, r8, r4
 800ebfc:	d108      	bne.n	800ec10 <__ieee754_pow+0x1c8>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	4610      	mov	r0, r2
 800ec04:	4619      	mov	r1, r3
 800ec06:	f7f1 fb47 	bl	8000298 <__aeabi_dsub>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	e794      	b.n	800eb3a <__ieee754_pow+0xf2>
 800ec10:	2c01      	cmp	r4, #1
 800ec12:	f47f af36 	bne.w	800ea82 <__ieee754_pow+0x3a>
 800ec16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	e731      	b.n	800ea82 <__ieee754_pow+0x3a>
 800ec1e:	0feb      	lsrs	r3, r5, #31
 800ec20:	3b01      	subs	r3, #1
 800ec22:	ea53 0204 	orrs.w	r2, r3, r4
 800ec26:	d102      	bne.n	800ec2e <__ieee754_pow+0x1e6>
 800ec28:	4632      	mov	r2, r6
 800ec2a:	463b      	mov	r3, r7
 800ec2c:	e7e9      	b.n	800ec02 <__ieee754_pow+0x1ba>
 800ec2e:	3c01      	subs	r4, #1
 800ec30:	431c      	orrs	r4, r3
 800ec32:	d016      	beq.n	800ec62 <__ieee754_pow+0x21a>
 800ec34:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ecc0 <__ieee754_pow+0x278>
 800ec38:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ec3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec40:	f240 8112 	bls.w	800ee68 <__ieee754_pow+0x420>
 800ec44:	4b28      	ldr	r3, [pc, #160]	@ (800ece8 <__ieee754_pow+0x2a0>)
 800ec46:	459a      	cmp	sl, r3
 800ec48:	4b25      	ldr	r3, [pc, #148]	@ (800ece0 <__ieee754_pow+0x298>)
 800ec4a:	d916      	bls.n	800ec7a <__ieee754_pow+0x232>
 800ec4c:	4598      	cmp	r8, r3
 800ec4e:	d80b      	bhi.n	800ec68 <__ieee754_pow+0x220>
 800ec50:	f1b9 0f00 	cmp.w	r9, #0
 800ec54:	da0b      	bge.n	800ec6e <__ieee754_pow+0x226>
 800ec56:	2000      	movs	r0, #0
 800ec58:	b011      	add	sp, #68	@ 0x44
 800ec5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5e:	f000 bcf3 	b.w	800f648 <__math_oflow>
 800ec62:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ecc8 <__ieee754_pow+0x280>
 800ec66:	e7e7      	b.n	800ec38 <__ieee754_pow+0x1f0>
 800ec68:	f1b9 0f00 	cmp.w	r9, #0
 800ec6c:	dcf3      	bgt.n	800ec56 <__ieee754_pow+0x20e>
 800ec6e:	2000      	movs	r0, #0
 800ec70:	b011      	add	sp, #68	@ 0x44
 800ec72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec76:	f000 bcdf 	b.w	800f638 <__math_uflow>
 800ec7a:	4598      	cmp	r8, r3
 800ec7c:	d20c      	bcs.n	800ec98 <__ieee754_pow+0x250>
 800ec7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec82:	2200      	movs	r2, #0
 800ec84:	2300      	movs	r3, #0
 800ec86:	f7f1 ff31 	bl	8000aec <__aeabi_dcmplt>
 800ec8a:	3800      	subs	r0, #0
 800ec8c:	bf18      	it	ne
 800ec8e:	2001      	movne	r0, #1
 800ec90:	f1b9 0f00 	cmp.w	r9, #0
 800ec94:	daec      	bge.n	800ec70 <__ieee754_pow+0x228>
 800ec96:	e7df      	b.n	800ec58 <__ieee754_pow+0x210>
 800ec98:	4b10      	ldr	r3, [pc, #64]	@ (800ecdc <__ieee754_pow+0x294>)
 800ec9a:	4598      	cmp	r8, r3
 800ec9c:	f04f 0200 	mov.w	r2, #0
 800eca0:	d924      	bls.n	800ecec <__ieee754_pow+0x2a4>
 800eca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eca6:	2300      	movs	r3, #0
 800eca8:	f7f1 ff20 	bl	8000aec <__aeabi_dcmplt>
 800ecac:	3800      	subs	r0, #0
 800ecae:	bf18      	it	ne
 800ecb0:	2001      	movne	r0, #1
 800ecb2:	f1b9 0f00 	cmp.w	r9, #0
 800ecb6:	dccf      	bgt.n	800ec58 <__ieee754_pow+0x210>
 800ecb8:	e7da      	b.n	800ec70 <__ieee754_pow+0x228>
 800ecba:	bf00      	nop
 800ecbc:	f3af 8000 	nop.w
 800ecc0:	00000000 	.word	0x00000000
 800ecc4:	3ff00000 	.word	0x3ff00000
 800ecc8:	00000000 	.word	0x00000000
 800eccc:	bff00000 	.word	0xbff00000
 800ecd0:	fff00000 	.word	0xfff00000
 800ecd4:	7ff00000 	.word	0x7ff00000
 800ecd8:	433fffff 	.word	0x433fffff
 800ecdc:	3ff00000 	.word	0x3ff00000
 800ece0:	3fefffff 	.word	0x3fefffff
 800ece4:	3fe00000 	.word	0x3fe00000
 800ece8:	43f00000 	.word	0x43f00000
 800ecec:	4b5a      	ldr	r3, [pc, #360]	@ (800ee58 <__ieee754_pow+0x410>)
 800ecee:	f7f1 fad3 	bl	8000298 <__aeabi_dsub>
 800ecf2:	a351      	add	r3, pc, #324	@ (adr r3, 800ee38 <__ieee754_pow+0x3f0>)
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	460d      	mov	r5, r1
 800ecfc:	f7f1 fc84 	bl	8000608 <__aeabi_dmul>
 800ed00:	a34f      	add	r3, pc, #316	@ (adr r3, 800ee40 <__ieee754_pow+0x3f8>)
 800ed02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed06:	4606      	mov	r6, r0
 800ed08:	460f      	mov	r7, r1
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	f7f1 fc7b 	bl	8000608 <__aeabi_dmul>
 800ed12:	4b52      	ldr	r3, [pc, #328]	@ (800ee5c <__ieee754_pow+0x414>)
 800ed14:	4682      	mov	sl, r0
 800ed16:	468b      	mov	fp, r1
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	f7f1 fc73 	bl	8000608 <__aeabi_dmul>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
 800ed26:	a148      	add	r1, pc, #288	@ (adr r1, 800ee48 <__ieee754_pow+0x400>)
 800ed28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed2c:	f7f1 fab4 	bl	8000298 <__aeabi_dsub>
 800ed30:	4622      	mov	r2, r4
 800ed32:	462b      	mov	r3, r5
 800ed34:	f7f1 fc68 	bl	8000608 <__aeabi_dmul>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	4948      	ldr	r1, [pc, #288]	@ (800ee60 <__ieee754_pow+0x418>)
 800ed40:	f7f1 faaa 	bl	8000298 <__aeabi_dsub>
 800ed44:	4622      	mov	r2, r4
 800ed46:	4680      	mov	r8, r0
 800ed48:	4689      	mov	r9, r1
 800ed4a:	462b      	mov	r3, r5
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	4629      	mov	r1, r5
 800ed50:	f7f1 fc5a 	bl	8000608 <__aeabi_dmul>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4640      	mov	r0, r8
 800ed5a:	4649      	mov	r1, r9
 800ed5c:	f7f1 fc54 	bl	8000608 <__aeabi_dmul>
 800ed60:	a33b      	add	r3, pc, #236	@ (adr r3, 800ee50 <__ieee754_pow+0x408>)
 800ed62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed66:	f7f1 fc4f 	bl	8000608 <__aeabi_dmul>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	4650      	mov	r0, sl
 800ed70:	4659      	mov	r1, fp
 800ed72:	f7f1 fa91 	bl	8000298 <__aeabi_dsub>
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	4680      	mov	r8, r0
 800ed7c:	4689      	mov	r9, r1
 800ed7e:	4630      	mov	r0, r6
 800ed80:	4639      	mov	r1, r7
 800ed82:	f7f1 fa8b 	bl	800029c <__adddf3>
 800ed86:	2400      	movs	r4, #0
 800ed88:	4632      	mov	r2, r6
 800ed8a:	463b      	mov	r3, r7
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	460d      	mov	r5, r1
 800ed90:	f7f1 fa82 	bl	8000298 <__aeabi_dsub>
 800ed94:	4602      	mov	r2, r0
 800ed96:	460b      	mov	r3, r1
 800ed98:	4640      	mov	r0, r8
 800ed9a:	4649      	mov	r1, r9
 800ed9c:	f7f1 fa7c 	bl	8000298 <__aeabi_dsub>
 800eda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eda4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eda8:	2300      	movs	r3, #0
 800edaa:	9304      	str	r3, [sp, #16]
 800edac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800edb0:	4606      	mov	r6, r0
 800edb2:	460f      	mov	r7, r1
 800edb4:	4652      	mov	r2, sl
 800edb6:	465b      	mov	r3, fp
 800edb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edbc:	f7f1 fa6c 	bl	8000298 <__aeabi_dsub>
 800edc0:	4622      	mov	r2, r4
 800edc2:	462b      	mov	r3, r5
 800edc4:	f7f1 fc20 	bl	8000608 <__aeabi_dmul>
 800edc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edcc:	4680      	mov	r8, r0
 800edce:	4689      	mov	r9, r1
 800edd0:	4630      	mov	r0, r6
 800edd2:	4639      	mov	r1, r7
 800edd4:	f7f1 fc18 	bl	8000608 <__aeabi_dmul>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4640      	mov	r0, r8
 800edde:	4649      	mov	r1, r9
 800ede0:	f7f1 fa5c 	bl	800029c <__adddf3>
 800ede4:	4652      	mov	r2, sl
 800ede6:	465b      	mov	r3, fp
 800ede8:	4606      	mov	r6, r0
 800edea:	460f      	mov	r7, r1
 800edec:	4620      	mov	r0, r4
 800edee:	4629      	mov	r1, r5
 800edf0:	f7f1 fc0a 	bl	8000608 <__aeabi_dmul>
 800edf4:	460b      	mov	r3, r1
 800edf6:	4602      	mov	r2, r0
 800edf8:	4680      	mov	r8, r0
 800edfa:	4689      	mov	r9, r1
 800edfc:	4630      	mov	r0, r6
 800edfe:	4639      	mov	r1, r7
 800ee00:	f7f1 fa4c 	bl	800029c <__adddf3>
 800ee04:	4b17      	ldr	r3, [pc, #92]	@ (800ee64 <__ieee754_pow+0x41c>)
 800ee06:	4299      	cmp	r1, r3
 800ee08:	4604      	mov	r4, r0
 800ee0a:	460d      	mov	r5, r1
 800ee0c:	468a      	mov	sl, r1
 800ee0e:	468b      	mov	fp, r1
 800ee10:	f340 82ef 	ble.w	800f3f2 <__ieee754_pow+0x9aa>
 800ee14:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ee18:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ee1c:	4303      	orrs	r3, r0
 800ee1e:	f000 81e8 	beq.w	800f1f2 <__ieee754_pow+0x7aa>
 800ee22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee26:	2200      	movs	r2, #0
 800ee28:	2300      	movs	r3, #0
 800ee2a:	f7f1 fe5f 	bl	8000aec <__aeabi_dcmplt>
 800ee2e:	3800      	subs	r0, #0
 800ee30:	bf18      	it	ne
 800ee32:	2001      	movne	r0, #1
 800ee34:	e710      	b.n	800ec58 <__ieee754_pow+0x210>
 800ee36:	bf00      	nop
 800ee38:	60000000 	.word	0x60000000
 800ee3c:	3ff71547 	.word	0x3ff71547
 800ee40:	f85ddf44 	.word	0xf85ddf44
 800ee44:	3e54ae0b 	.word	0x3e54ae0b
 800ee48:	55555555 	.word	0x55555555
 800ee4c:	3fd55555 	.word	0x3fd55555
 800ee50:	652b82fe 	.word	0x652b82fe
 800ee54:	3ff71547 	.word	0x3ff71547
 800ee58:	3ff00000 	.word	0x3ff00000
 800ee5c:	3fd00000 	.word	0x3fd00000
 800ee60:	3fe00000 	.word	0x3fe00000
 800ee64:	408fffff 	.word	0x408fffff
 800ee68:	4bd5      	ldr	r3, [pc, #852]	@ (800f1c0 <__ieee754_pow+0x778>)
 800ee6a:	402b      	ands	r3, r5
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	b92b      	cbnz	r3, 800ee7c <__ieee754_pow+0x434>
 800ee70:	4bd4      	ldr	r3, [pc, #848]	@ (800f1c4 <__ieee754_pow+0x77c>)
 800ee72:	f7f1 fbc9 	bl	8000608 <__aeabi_dmul>
 800ee76:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ee7a:	468b      	mov	fp, r1
 800ee7c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ee80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ee84:	4413      	add	r3, r2
 800ee86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee88:	4bcf      	ldr	r3, [pc, #828]	@ (800f1c8 <__ieee754_pow+0x780>)
 800ee8a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ee8e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ee92:	459b      	cmp	fp, r3
 800ee94:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ee98:	dd08      	ble.n	800eeac <__ieee754_pow+0x464>
 800ee9a:	4bcc      	ldr	r3, [pc, #816]	@ (800f1cc <__ieee754_pow+0x784>)
 800ee9c:	459b      	cmp	fp, r3
 800ee9e:	f340 81a5 	ble.w	800f1ec <__ieee754_pow+0x7a4>
 800eea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eea4:	3301      	adds	r3, #1
 800eea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eea8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800eeac:	f04f 0a00 	mov.w	sl, #0
 800eeb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800eeb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eeb6:	4bc6      	ldr	r3, [pc, #792]	@ (800f1d0 <__ieee754_pow+0x788>)
 800eeb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eebc:	ed93 7b00 	vldr	d7, [r3]
 800eec0:	4629      	mov	r1, r5
 800eec2:	ec53 2b17 	vmov	r2, r3, d7
 800eec6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eeca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eece:	f7f1 f9e3 	bl	8000298 <__aeabi_dsub>
 800eed2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eed6:	4606      	mov	r6, r0
 800eed8:	460f      	mov	r7, r1
 800eeda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eede:	f7f1 f9dd 	bl	800029c <__adddf3>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	2000      	movs	r0, #0
 800eee8:	49ba      	ldr	r1, [pc, #744]	@ (800f1d4 <__ieee754_pow+0x78c>)
 800eeea:	f7f1 fcb7 	bl	800085c <__aeabi_ddiv>
 800eeee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800eef2:	4602      	mov	r2, r0
 800eef4:	460b      	mov	r3, r1
 800eef6:	4630      	mov	r0, r6
 800eef8:	4639      	mov	r1, r7
 800eefa:	f7f1 fb85 	bl	8000608 <__aeabi_dmul>
 800eefe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ef06:	106d      	asrs	r5, r5, #1
 800ef08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ef0c:	f04f 0b00 	mov.w	fp, #0
 800ef10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ef14:	4661      	mov	r1, ip
 800ef16:	2200      	movs	r2, #0
 800ef18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ef1c:	4658      	mov	r0, fp
 800ef1e:	46e1      	mov	r9, ip
 800ef20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800ef24:	4614      	mov	r4, r2
 800ef26:	461d      	mov	r5, r3
 800ef28:	f7f1 fb6e 	bl	8000608 <__aeabi_dmul>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 f9b0 	bl	8000298 <__aeabi_dsub>
 800ef38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	460f      	mov	r7, r1
 800ef40:	4620      	mov	r0, r4
 800ef42:	4629      	mov	r1, r5
 800ef44:	f7f1 f9a8 	bl	8000298 <__aeabi_dsub>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ef50:	f7f1 f9a2 	bl	8000298 <__aeabi_dsub>
 800ef54:	465a      	mov	r2, fp
 800ef56:	464b      	mov	r3, r9
 800ef58:	f7f1 fb56 	bl	8000608 <__aeabi_dmul>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4630      	mov	r0, r6
 800ef62:	4639      	mov	r1, r7
 800ef64:	f7f1 f998 	bl	8000298 <__aeabi_dsub>
 800ef68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ef6c:	f7f1 fb4c 	bl	8000608 <__aeabi_dmul>
 800ef70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef78:	4610      	mov	r0, r2
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	f7f1 fb44 	bl	8000608 <__aeabi_dmul>
 800ef80:	a37d      	add	r3, pc, #500	@ (adr r3, 800f178 <__ieee754_pow+0x730>)
 800ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef86:	4604      	mov	r4, r0
 800ef88:	460d      	mov	r5, r1
 800ef8a:	f7f1 fb3d 	bl	8000608 <__aeabi_dmul>
 800ef8e:	a37c      	add	r3, pc, #496	@ (adr r3, 800f180 <__ieee754_pow+0x738>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	f7f1 f982 	bl	800029c <__adddf3>
 800ef98:	4622      	mov	r2, r4
 800ef9a:	462b      	mov	r3, r5
 800ef9c:	f7f1 fb34 	bl	8000608 <__aeabi_dmul>
 800efa0:	a379      	add	r3, pc, #484	@ (adr r3, 800f188 <__ieee754_pow+0x740>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 f979 	bl	800029c <__adddf3>
 800efaa:	4622      	mov	r2, r4
 800efac:	462b      	mov	r3, r5
 800efae:	f7f1 fb2b 	bl	8000608 <__aeabi_dmul>
 800efb2:	a377      	add	r3, pc, #476	@ (adr r3, 800f190 <__ieee754_pow+0x748>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	f7f1 f970 	bl	800029c <__adddf3>
 800efbc:	4622      	mov	r2, r4
 800efbe:	462b      	mov	r3, r5
 800efc0:	f7f1 fb22 	bl	8000608 <__aeabi_dmul>
 800efc4:	a374      	add	r3, pc, #464	@ (adr r3, 800f198 <__ieee754_pow+0x750>)
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	f7f1 f967 	bl	800029c <__adddf3>
 800efce:	4622      	mov	r2, r4
 800efd0:	462b      	mov	r3, r5
 800efd2:	f7f1 fb19 	bl	8000608 <__aeabi_dmul>
 800efd6:	a372      	add	r3, pc, #456	@ (adr r3, 800f1a0 <__ieee754_pow+0x758>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f7f1 f95e 	bl	800029c <__adddf3>
 800efe0:	4622      	mov	r2, r4
 800efe2:	4606      	mov	r6, r0
 800efe4:	460f      	mov	r7, r1
 800efe6:	462b      	mov	r3, r5
 800efe8:	4620      	mov	r0, r4
 800efea:	4629      	mov	r1, r5
 800efec:	f7f1 fb0c 	bl	8000608 <__aeabi_dmul>
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	4630      	mov	r0, r6
 800eff6:	4639      	mov	r1, r7
 800eff8:	f7f1 fb06 	bl	8000608 <__aeabi_dmul>
 800effc:	465a      	mov	r2, fp
 800effe:	4604      	mov	r4, r0
 800f000:	460d      	mov	r5, r1
 800f002:	464b      	mov	r3, r9
 800f004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f008:	f7f1 f948 	bl	800029c <__adddf3>
 800f00c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f010:	f7f1 fafa 	bl	8000608 <__aeabi_dmul>
 800f014:	4622      	mov	r2, r4
 800f016:	462b      	mov	r3, r5
 800f018:	f7f1 f940 	bl	800029c <__adddf3>
 800f01c:	465a      	mov	r2, fp
 800f01e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f022:	464b      	mov	r3, r9
 800f024:	4658      	mov	r0, fp
 800f026:	4649      	mov	r1, r9
 800f028:	f7f1 faee 	bl	8000608 <__aeabi_dmul>
 800f02c:	4b6a      	ldr	r3, [pc, #424]	@ (800f1d8 <__ieee754_pow+0x790>)
 800f02e:	2200      	movs	r2, #0
 800f030:	4606      	mov	r6, r0
 800f032:	460f      	mov	r7, r1
 800f034:	f7f1 f932 	bl	800029c <__adddf3>
 800f038:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f03c:	f7f1 f92e 	bl	800029c <__adddf3>
 800f040:	46d8      	mov	r8, fp
 800f042:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f046:	460d      	mov	r5, r1
 800f048:	465a      	mov	r2, fp
 800f04a:	460b      	mov	r3, r1
 800f04c:	4640      	mov	r0, r8
 800f04e:	4649      	mov	r1, r9
 800f050:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f054:	f7f1 fad8 	bl	8000608 <__aeabi_dmul>
 800f058:	465c      	mov	r4, fp
 800f05a:	4680      	mov	r8, r0
 800f05c:	4689      	mov	r9, r1
 800f05e:	4b5e      	ldr	r3, [pc, #376]	@ (800f1d8 <__ieee754_pow+0x790>)
 800f060:	2200      	movs	r2, #0
 800f062:	4620      	mov	r0, r4
 800f064:	4629      	mov	r1, r5
 800f066:	f7f1 f917 	bl	8000298 <__aeabi_dsub>
 800f06a:	4632      	mov	r2, r6
 800f06c:	463b      	mov	r3, r7
 800f06e:	f7f1 f913 	bl	8000298 <__aeabi_dsub>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f07a:	f7f1 f90d 	bl	8000298 <__aeabi_dsub>
 800f07e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f082:	f7f1 fac1 	bl	8000608 <__aeabi_dmul>
 800f086:	4622      	mov	r2, r4
 800f088:	4606      	mov	r6, r0
 800f08a:	460f      	mov	r7, r1
 800f08c:	462b      	mov	r3, r5
 800f08e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f092:	f7f1 fab9 	bl	8000608 <__aeabi_dmul>
 800f096:	4602      	mov	r2, r0
 800f098:	460b      	mov	r3, r1
 800f09a:	4630      	mov	r0, r6
 800f09c:	4639      	mov	r1, r7
 800f09e:	f7f1 f8fd 	bl	800029c <__adddf3>
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	460f      	mov	r7, r1
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	f7f1 f8f5 	bl	800029c <__adddf3>
 800f0b2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f0b6:	a33c      	add	r3, pc, #240	@ (adr r3, 800f1a8 <__ieee754_pow+0x760>)
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	4658      	mov	r0, fp
 800f0be:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	f7f1 faa0 	bl	8000608 <__aeabi_dmul>
 800f0c8:	465c      	mov	r4, fp
 800f0ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0ce:	4642      	mov	r2, r8
 800f0d0:	464b      	mov	r3, r9
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	f7f1 f8df 	bl	8000298 <__aeabi_dsub>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4630      	mov	r0, r6
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	f7f1 f8d9 	bl	8000298 <__aeabi_dsub>
 800f0e6:	a332      	add	r3, pc, #200	@ (adr r3, 800f1b0 <__ieee754_pow+0x768>)
 800f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ec:	f7f1 fa8c 	bl	8000608 <__aeabi_dmul>
 800f0f0:	a331      	add	r3, pc, #196	@ (adr r3, 800f1b8 <__ieee754_pow+0x770>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	4606      	mov	r6, r0
 800f0f8:	460f      	mov	r7, r1
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	f7f1 fa83 	bl	8000608 <__aeabi_dmul>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	4630      	mov	r0, r6
 800f108:	4639      	mov	r1, r7
 800f10a:	f7f1 f8c7 	bl	800029c <__adddf3>
 800f10e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f110:	4b32      	ldr	r3, [pc, #200]	@ (800f1dc <__ieee754_pow+0x794>)
 800f112:	4413      	add	r3, r2
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 f8c0 	bl	800029c <__adddf3>
 800f11c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f122:	f7f1 fa07 	bl	8000534 <__aeabi_i2d>
 800f126:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f128:	4b2d      	ldr	r3, [pc, #180]	@ (800f1e0 <__ieee754_pow+0x798>)
 800f12a:	4413      	add	r3, r2
 800f12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f130:	4606      	mov	r6, r0
 800f132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f136:	460f      	mov	r7, r1
 800f138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f13c:	f7f1 f8ae 	bl	800029c <__adddf3>
 800f140:	4642      	mov	r2, r8
 800f142:	464b      	mov	r3, r9
 800f144:	f7f1 f8aa 	bl	800029c <__adddf3>
 800f148:	4632      	mov	r2, r6
 800f14a:	463b      	mov	r3, r7
 800f14c:	f7f1 f8a6 	bl	800029c <__adddf3>
 800f150:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f154:	4632      	mov	r2, r6
 800f156:	463b      	mov	r3, r7
 800f158:	4658      	mov	r0, fp
 800f15a:	460d      	mov	r5, r1
 800f15c:	f7f1 f89c 	bl	8000298 <__aeabi_dsub>
 800f160:	4642      	mov	r2, r8
 800f162:	464b      	mov	r3, r9
 800f164:	f7f1 f898 	bl	8000298 <__aeabi_dsub>
 800f168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f16c:	f7f1 f894 	bl	8000298 <__aeabi_dsub>
 800f170:	465c      	mov	r4, fp
 800f172:	4602      	mov	r2, r0
 800f174:	e036      	b.n	800f1e4 <__ieee754_pow+0x79c>
 800f176:	bf00      	nop
 800f178:	4a454eef 	.word	0x4a454eef
 800f17c:	3fca7e28 	.word	0x3fca7e28
 800f180:	93c9db65 	.word	0x93c9db65
 800f184:	3fcd864a 	.word	0x3fcd864a
 800f188:	a91d4101 	.word	0xa91d4101
 800f18c:	3fd17460 	.word	0x3fd17460
 800f190:	518f264d 	.word	0x518f264d
 800f194:	3fd55555 	.word	0x3fd55555
 800f198:	db6fabff 	.word	0xdb6fabff
 800f19c:	3fdb6db6 	.word	0x3fdb6db6
 800f1a0:	33333303 	.word	0x33333303
 800f1a4:	3fe33333 	.word	0x3fe33333
 800f1a8:	e0000000 	.word	0xe0000000
 800f1ac:	3feec709 	.word	0x3feec709
 800f1b0:	dc3a03fd 	.word	0xdc3a03fd
 800f1b4:	3feec709 	.word	0x3feec709
 800f1b8:	145b01f5 	.word	0x145b01f5
 800f1bc:	be3e2fe0 	.word	0xbe3e2fe0
 800f1c0:	7ff00000 	.word	0x7ff00000
 800f1c4:	43400000 	.word	0x43400000
 800f1c8:	0003988e 	.word	0x0003988e
 800f1cc:	000bb679 	.word	0x000bb679
 800f1d0:	080145a8 	.word	0x080145a8
 800f1d4:	3ff00000 	.word	0x3ff00000
 800f1d8:	40080000 	.word	0x40080000
 800f1dc:	08014588 	.word	0x08014588
 800f1e0:	08014598 	.word	0x08014598
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ea:	e5d7      	b.n	800ed9c <__ieee754_pow+0x354>
 800f1ec:	f04f 0a01 	mov.w	sl, #1
 800f1f0:	e65e      	b.n	800eeb0 <__ieee754_pow+0x468>
 800f1f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f4c4 <__ieee754_pow+0xa7c>)
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	f7f1 f84e 	bl	800029c <__adddf3>
 800f200:	4642      	mov	r2, r8
 800f202:	e9cd 0100 	strd	r0, r1, [sp]
 800f206:	464b      	mov	r3, r9
 800f208:	4620      	mov	r0, r4
 800f20a:	4629      	mov	r1, r5
 800f20c:	f7f1 f844 	bl	8000298 <__aeabi_dsub>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f218:	f7f1 fc86 	bl	8000b28 <__aeabi_dcmpgt>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	f47f ae00 	bne.w	800ee22 <__ieee754_pow+0x3da>
 800f222:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f226:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f22a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f22e:	fa43 fa0a 	asr.w	sl, r3, sl
 800f232:	44da      	add	sl, fp
 800f234:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f238:	489d      	ldr	r0, [pc, #628]	@ (800f4b0 <__ieee754_pow+0xa68>)
 800f23a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f23e:	4108      	asrs	r0, r1
 800f240:	ea00 030a 	and.w	r3, r0, sl
 800f244:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f248:	f1c1 0114 	rsb	r1, r1, #20
 800f24c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f250:	fa4a fa01 	asr.w	sl, sl, r1
 800f254:	f1bb 0f00 	cmp.w	fp, #0
 800f258:	4640      	mov	r0, r8
 800f25a:	4649      	mov	r1, r9
 800f25c:	f04f 0200 	mov.w	r2, #0
 800f260:	bfb8      	it	lt
 800f262:	f1ca 0a00 	rsblt	sl, sl, #0
 800f266:	f7f1 f817 	bl	8000298 <__aeabi_dsub>
 800f26a:	4680      	mov	r8, r0
 800f26c:	4689      	mov	r9, r1
 800f26e:	4632      	mov	r2, r6
 800f270:	463b      	mov	r3, r7
 800f272:	4640      	mov	r0, r8
 800f274:	4649      	mov	r1, r9
 800f276:	f7f1 f811 	bl	800029c <__adddf3>
 800f27a:	2400      	movs	r4, #0
 800f27c:	a37c      	add	r3, pc, #496	@ (adr r3, 800f470 <__ieee754_pow+0xa28>)
 800f27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f282:	4620      	mov	r0, r4
 800f284:	460d      	mov	r5, r1
 800f286:	f7f1 f9bf 	bl	8000608 <__aeabi_dmul>
 800f28a:	4642      	mov	r2, r8
 800f28c:	e9cd 0100 	strd	r0, r1, [sp]
 800f290:	464b      	mov	r3, r9
 800f292:	4620      	mov	r0, r4
 800f294:	4629      	mov	r1, r5
 800f296:	f7f0 ffff 	bl	8000298 <__aeabi_dsub>
 800f29a:	4602      	mov	r2, r0
 800f29c:	460b      	mov	r3, r1
 800f29e:	4630      	mov	r0, r6
 800f2a0:	4639      	mov	r1, r7
 800f2a2:	f7f0 fff9 	bl	8000298 <__aeabi_dsub>
 800f2a6:	a374      	add	r3, pc, #464	@ (adr r3, 800f478 <__ieee754_pow+0xa30>)
 800f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ac:	f7f1 f9ac 	bl	8000608 <__aeabi_dmul>
 800f2b0:	a373      	add	r3, pc, #460	@ (adr r3, 800f480 <__ieee754_pow+0xa38>)
 800f2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b6:	4680      	mov	r8, r0
 800f2b8:	4689      	mov	r9, r1
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	4629      	mov	r1, r5
 800f2be:	f7f1 f9a3 	bl	8000608 <__aeabi_dmul>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	4640      	mov	r0, r8
 800f2c8:	4649      	mov	r1, r9
 800f2ca:	f7f0 ffe7 	bl	800029c <__adddf3>
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	460d      	mov	r5, r1
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2da:	f7f0 ffdf 	bl	800029c <__adddf3>
 800f2de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2e2:	4680      	mov	r8, r0
 800f2e4:	4689      	mov	r9, r1
 800f2e6:	f7f0 ffd7 	bl	8000298 <__aeabi_dsub>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	4629      	mov	r1, r5
 800f2f2:	f7f0 ffd1 	bl	8000298 <__aeabi_dsub>
 800f2f6:	4642      	mov	r2, r8
 800f2f8:	4606      	mov	r6, r0
 800f2fa:	460f      	mov	r7, r1
 800f2fc:	464b      	mov	r3, r9
 800f2fe:	4640      	mov	r0, r8
 800f300:	4649      	mov	r1, r9
 800f302:	f7f1 f981 	bl	8000608 <__aeabi_dmul>
 800f306:	a360      	add	r3, pc, #384	@ (adr r3, 800f488 <__ieee754_pow+0xa40>)
 800f308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30c:	4604      	mov	r4, r0
 800f30e:	460d      	mov	r5, r1
 800f310:	f7f1 f97a 	bl	8000608 <__aeabi_dmul>
 800f314:	a35e      	add	r3, pc, #376	@ (adr r3, 800f490 <__ieee754_pow+0xa48>)
 800f316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31a:	f7f0 ffbd 	bl	8000298 <__aeabi_dsub>
 800f31e:	4622      	mov	r2, r4
 800f320:	462b      	mov	r3, r5
 800f322:	f7f1 f971 	bl	8000608 <__aeabi_dmul>
 800f326:	a35c      	add	r3, pc, #368	@ (adr r3, 800f498 <__ieee754_pow+0xa50>)
 800f328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32c:	f7f0 ffb6 	bl	800029c <__adddf3>
 800f330:	4622      	mov	r2, r4
 800f332:	462b      	mov	r3, r5
 800f334:	f7f1 f968 	bl	8000608 <__aeabi_dmul>
 800f338:	a359      	add	r3, pc, #356	@ (adr r3, 800f4a0 <__ieee754_pow+0xa58>)
 800f33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33e:	f7f0 ffab 	bl	8000298 <__aeabi_dsub>
 800f342:	4622      	mov	r2, r4
 800f344:	462b      	mov	r3, r5
 800f346:	f7f1 f95f 	bl	8000608 <__aeabi_dmul>
 800f34a:	a357      	add	r3, pc, #348	@ (adr r3, 800f4a8 <__ieee754_pow+0xa60>)
 800f34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f350:	f7f0 ffa4 	bl	800029c <__adddf3>
 800f354:	4622      	mov	r2, r4
 800f356:	462b      	mov	r3, r5
 800f358:	f7f1 f956 	bl	8000608 <__aeabi_dmul>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	4640      	mov	r0, r8
 800f362:	4649      	mov	r1, r9
 800f364:	f7f0 ff98 	bl	8000298 <__aeabi_dsub>
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	4602      	mov	r2, r0
 800f36e:	460b      	mov	r3, r1
 800f370:	4640      	mov	r0, r8
 800f372:	4649      	mov	r1, r9
 800f374:	f7f1 f948 	bl	8000608 <__aeabi_dmul>
 800f378:	2200      	movs	r2, #0
 800f37a:	e9cd 0100 	strd	r0, r1, [sp]
 800f37e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f382:	4620      	mov	r0, r4
 800f384:	4629      	mov	r1, r5
 800f386:	f7f0 ff87 	bl	8000298 <__aeabi_dsub>
 800f38a:	4602      	mov	r2, r0
 800f38c:	460b      	mov	r3, r1
 800f38e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f392:	f7f1 fa63 	bl	800085c <__aeabi_ddiv>
 800f396:	4632      	mov	r2, r6
 800f398:	4604      	mov	r4, r0
 800f39a:	460d      	mov	r5, r1
 800f39c:	463b      	mov	r3, r7
 800f39e:	4640      	mov	r0, r8
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	f7f1 f931 	bl	8000608 <__aeabi_dmul>
 800f3a6:	4632      	mov	r2, r6
 800f3a8:	463b      	mov	r3, r7
 800f3aa:	f7f0 ff77 	bl	800029c <__adddf3>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	f7f0 ff6f 	bl	8000298 <__aeabi_dsub>
 800f3ba:	4642      	mov	r2, r8
 800f3bc:	464b      	mov	r3, r9
 800f3be:	f7f0 ff6b 	bl	8000298 <__aeabi_dsub>
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	493b      	ldr	r1, [pc, #236]	@ (800f4b4 <__ieee754_pow+0xa6c>)
 800f3c8:	2000      	movs	r0, #0
 800f3ca:	f7f0 ff65 	bl	8000298 <__aeabi_dsub>
 800f3ce:	ec41 0b10 	vmov	d0, r0, r1
 800f3d2:	ee10 3a90 	vmov	r3, s1
 800f3d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f3da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3de:	da30      	bge.n	800f442 <__ieee754_pow+0x9fa>
 800f3e0:	4650      	mov	r0, sl
 800f3e2:	f000 f87d 	bl	800f4e0 <scalbn>
 800f3e6:	ec51 0b10 	vmov	r0, r1, d0
 800f3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3ee:	f7ff bbd2 	b.w	800eb96 <__ieee754_pow+0x14e>
 800f3f2:	4c31      	ldr	r4, [pc, #196]	@ (800f4b8 <__ieee754_pow+0xa70>)
 800f3f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f3f8:	42a3      	cmp	r3, r4
 800f3fa:	d91a      	bls.n	800f432 <__ieee754_pow+0x9ea>
 800f3fc:	4b2f      	ldr	r3, [pc, #188]	@ (800f4bc <__ieee754_pow+0xa74>)
 800f3fe:	440b      	add	r3, r1
 800f400:	4303      	orrs	r3, r0
 800f402:	d009      	beq.n	800f418 <__ieee754_pow+0x9d0>
 800f404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f408:	2200      	movs	r2, #0
 800f40a:	2300      	movs	r3, #0
 800f40c:	f7f1 fb6e 	bl	8000aec <__aeabi_dcmplt>
 800f410:	3800      	subs	r0, #0
 800f412:	bf18      	it	ne
 800f414:	2001      	movne	r0, #1
 800f416:	e42b      	b.n	800ec70 <__ieee754_pow+0x228>
 800f418:	4642      	mov	r2, r8
 800f41a:	464b      	mov	r3, r9
 800f41c:	f7f0 ff3c 	bl	8000298 <__aeabi_dsub>
 800f420:	4632      	mov	r2, r6
 800f422:	463b      	mov	r3, r7
 800f424:	f7f1 fb76 	bl	8000b14 <__aeabi_dcmpge>
 800f428:	2800      	cmp	r0, #0
 800f42a:	d1eb      	bne.n	800f404 <__ieee754_pow+0x9bc>
 800f42c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f4cc <__ieee754_pow+0xa84>
 800f430:	e6f7      	b.n	800f222 <__ieee754_pow+0x7da>
 800f432:	469a      	mov	sl, r3
 800f434:	4b22      	ldr	r3, [pc, #136]	@ (800f4c0 <__ieee754_pow+0xa78>)
 800f436:	459a      	cmp	sl, r3
 800f438:	f63f aef3 	bhi.w	800f222 <__ieee754_pow+0x7da>
 800f43c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f440:	e715      	b.n	800f26e <__ieee754_pow+0x826>
 800f442:	ec51 0b10 	vmov	r0, r1, d0
 800f446:	4619      	mov	r1, r3
 800f448:	e7cf      	b.n	800f3ea <__ieee754_pow+0x9a2>
 800f44a:	491a      	ldr	r1, [pc, #104]	@ (800f4b4 <__ieee754_pow+0xa6c>)
 800f44c:	2000      	movs	r0, #0
 800f44e:	f7ff bb18 	b.w	800ea82 <__ieee754_pow+0x3a>
 800f452:	2000      	movs	r0, #0
 800f454:	2100      	movs	r1, #0
 800f456:	f7ff bb14 	b.w	800ea82 <__ieee754_pow+0x3a>
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	f7ff bb10 	b.w	800ea82 <__ieee754_pow+0x3a>
 800f462:	460c      	mov	r4, r1
 800f464:	f7ff bb5e 	b.w	800eb24 <__ieee754_pow+0xdc>
 800f468:	2400      	movs	r4, #0
 800f46a:	f7ff bb49 	b.w	800eb00 <__ieee754_pow+0xb8>
 800f46e:	bf00      	nop
 800f470:	00000000 	.word	0x00000000
 800f474:	3fe62e43 	.word	0x3fe62e43
 800f478:	fefa39ef 	.word	0xfefa39ef
 800f47c:	3fe62e42 	.word	0x3fe62e42
 800f480:	0ca86c39 	.word	0x0ca86c39
 800f484:	be205c61 	.word	0xbe205c61
 800f488:	72bea4d0 	.word	0x72bea4d0
 800f48c:	3e663769 	.word	0x3e663769
 800f490:	c5d26bf1 	.word	0xc5d26bf1
 800f494:	3ebbbd41 	.word	0x3ebbbd41
 800f498:	af25de2c 	.word	0xaf25de2c
 800f49c:	3f11566a 	.word	0x3f11566a
 800f4a0:	16bebd93 	.word	0x16bebd93
 800f4a4:	3f66c16c 	.word	0x3f66c16c
 800f4a8:	5555553e 	.word	0x5555553e
 800f4ac:	3fc55555 	.word	0x3fc55555
 800f4b0:	fff00000 	.word	0xfff00000
 800f4b4:	3ff00000 	.word	0x3ff00000
 800f4b8:	4090cbff 	.word	0x4090cbff
 800f4bc:	3f6f3400 	.word	0x3f6f3400
 800f4c0:	3fe00000 	.word	0x3fe00000
 800f4c4:	652b82fe 	.word	0x652b82fe
 800f4c8:	3c971547 	.word	0x3c971547
 800f4cc:	4090cc00 	.word	0x4090cc00

0800f4d0 <fabs>:
 800f4d0:	ec51 0b10 	vmov	r0, r1, d0
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f4da:	ec43 2b10 	vmov	d0, r2, r3
 800f4de:	4770      	bx	lr

0800f4e0 <scalbn>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	ec55 4b10 	vmov	r4, r5, d0
 800f4e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	462b      	mov	r3, r5
 800f4ee:	b991      	cbnz	r1, 800f516 <scalbn+0x36>
 800f4f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f4f4:	4323      	orrs	r3, r4
 800f4f6:	d03d      	beq.n	800f574 <scalbn+0x94>
 800f4f8:	4b35      	ldr	r3, [pc, #212]	@ (800f5d0 <scalbn+0xf0>)
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	2200      	movs	r2, #0
 800f500:	f7f1 f882 	bl	8000608 <__aeabi_dmul>
 800f504:	4b33      	ldr	r3, [pc, #204]	@ (800f5d4 <scalbn+0xf4>)
 800f506:	429e      	cmp	r6, r3
 800f508:	4604      	mov	r4, r0
 800f50a:	460d      	mov	r5, r1
 800f50c:	da0f      	bge.n	800f52e <scalbn+0x4e>
 800f50e:	a328      	add	r3, pc, #160	@ (adr r3, 800f5b0 <scalbn+0xd0>)
 800f510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f514:	e01e      	b.n	800f554 <scalbn+0x74>
 800f516:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f51a:	4291      	cmp	r1, r2
 800f51c:	d10b      	bne.n	800f536 <scalbn+0x56>
 800f51e:	4622      	mov	r2, r4
 800f520:	4620      	mov	r0, r4
 800f522:	4629      	mov	r1, r5
 800f524:	f7f0 feba 	bl	800029c <__adddf3>
 800f528:	4604      	mov	r4, r0
 800f52a:	460d      	mov	r5, r1
 800f52c:	e022      	b.n	800f574 <scalbn+0x94>
 800f52e:	460b      	mov	r3, r1
 800f530:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f534:	3936      	subs	r1, #54	@ 0x36
 800f536:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f53a:	4296      	cmp	r6, r2
 800f53c:	dd0d      	ble.n	800f55a <scalbn+0x7a>
 800f53e:	2d00      	cmp	r5, #0
 800f540:	a11d      	add	r1, pc, #116	@ (adr r1, 800f5b8 <scalbn+0xd8>)
 800f542:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f546:	da02      	bge.n	800f54e <scalbn+0x6e>
 800f548:	a11d      	add	r1, pc, #116	@ (adr r1, 800f5c0 <scalbn+0xe0>)
 800f54a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f54e:	a31a      	add	r3, pc, #104	@ (adr r3, 800f5b8 <scalbn+0xd8>)
 800f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f554:	f7f1 f858 	bl	8000608 <__aeabi_dmul>
 800f558:	e7e6      	b.n	800f528 <scalbn+0x48>
 800f55a:	1872      	adds	r2, r6, r1
 800f55c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f560:	428a      	cmp	r2, r1
 800f562:	dcec      	bgt.n	800f53e <scalbn+0x5e>
 800f564:	2a00      	cmp	r2, #0
 800f566:	dd08      	ble.n	800f57a <scalbn+0x9a>
 800f568:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f56c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f570:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f574:	ec45 4b10 	vmov	d0, r4, r5
 800f578:	bd70      	pop	{r4, r5, r6, pc}
 800f57a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f57e:	da08      	bge.n	800f592 <scalbn+0xb2>
 800f580:	2d00      	cmp	r5, #0
 800f582:	a10b      	add	r1, pc, #44	@ (adr r1, 800f5b0 <scalbn+0xd0>)
 800f584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f588:	dac1      	bge.n	800f50e <scalbn+0x2e>
 800f58a:	a10f      	add	r1, pc, #60	@ (adr r1, 800f5c8 <scalbn+0xe8>)
 800f58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f590:	e7bd      	b.n	800f50e <scalbn+0x2e>
 800f592:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f596:	3236      	adds	r2, #54	@ 0x36
 800f598:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f59c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d8 <scalbn+0xf8>)
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	e7d4      	b.n	800f554 <scalbn+0x74>
 800f5aa:	bf00      	nop
 800f5ac:	f3af 8000 	nop.w
 800f5b0:	c2f8f359 	.word	0xc2f8f359
 800f5b4:	01a56e1f 	.word	0x01a56e1f
 800f5b8:	8800759c 	.word	0x8800759c
 800f5bc:	7e37e43c 	.word	0x7e37e43c
 800f5c0:	8800759c 	.word	0x8800759c
 800f5c4:	fe37e43c 	.word	0xfe37e43c
 800f5c8:	c2f8f359 	.word	0xc2f8f359
 800f5cc:	81a56e1f 	.word	0x81a56e1f
 800f5d0:	43500000 	.word	0x43500000
 800f5d4:	ffff3cb0 	.word	0xffff3cb0
 800f5d8:	3c900000 	.word	0x3c900000

0800f5dc <with_errno>:
 800f5dc:	b510      	push	{r4, lr}
 800f5de:	ed2d 8b02 	vpush	{d8}
 800f5e2:	eeb0 8a40 	vmov.f32	s16, s0
 800f5e6:	eef0 8a60 	vmov.f32	s17, s1
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	f000 fe54 	bl	8010298 <__errno>
 800f5f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f5f4:	eef0 0a68 	vmov.f32	s1, s17
 800f5f8:	ecbd 8b02 	vpop	{d8}
 800f5fc:	6004      	str	r4, [r0, #0]
 800f5fe:	bd10      	pop	{r4, pc}

0800f600 <xflow>:
 800f600:	4603      	mov	r3, r0
 800f602:	b507      	push	{r0, r1, r2, lr}
 800f604:	ec51 0b10 	vmov	r0, r1, d0
 800f608:	b183      	cbz	r3, 800f62c <xflow+0x2c>
 800f60a:	4602      	mov	r2, r0
 800f60c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f610:	e9cd 2300 	strd	r2, r3, [sp]
 800f614:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f618:	f7f0 fff6 	bl	8000608 <__aeabi_dmul>
 800f61c:	ec41 0b10 	vmov	d0, r0, r1
 800f620:	2022      	movs	r0, #34	@ 0x22
 800f622:	b003      	add	sp, #12
 800f624:	f85d eb04 	ldr.w	lr, [sp], #4
 800f628:	f7ff bfd8 	b.w	800f5dc <with_errno>
 800f62c:	4602      	mov	r2, r0
 800f62e:	460b      	mov	r3, r1
 800f630:	e7ee      	b.n	800f610 <xflow+0x10>
 800f632:	0000      	movs	r0, r0
 800f634:	0000      	movs	r0, r0
	...

0800f638 <__math_uflow>:
 800f638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f640 <__math_uflow+0x8>
 800f63c:	f7ff bfe0 	b.w	800f600 <xflow>
 800f640:	00000000 	.word	0x00000000
 800f644:	10000000 	.word	0x10000000

0800f648 <__math_oflow>:
 800f648:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f650 <__math_oflow+0x8>
 800f64c:	f7ff bfd8 	b.w	800f600 <xflow>
 800f650:	00000000 	.word	0x00000000
 800f654:	70000000 	.word	0x70000000

0800f658 <__ieee754_sqrt>:
 800f658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	4a68      	ldr	r2, [pc, #416]	@ (800f800 <__ieee754_sqrt+0x1a8>)
 800f65e:	ec55 4b10 	vmov	r4, r5, d0
 800f662:	43aa      	bics	r2, r5
 800f664:	462b      	mov	r3, r5
 800f666:	4621      	mov	r1, r4
 800f668:	d110      	bne.n	800f68c <__ieee754_sqrt+0x34>
 800f66a:	4622      	mov	r2, r4
 800f66c:	4620      	mov	r0, r4
 800f66e:	4629      	mov	r1, r5
 800f670:	f7f0 ffca 	bl	8000608 <__aeabi_dmul>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	4620      	mov	r0, r4
 800f67a:	4629      	mov	r1, r5
 800f67c:	f7f0 fe0e 	bl	800029c <__adddf3>
 800f680:	4604      	mov	r4, r0
 800f682:	460d      	mov	r5, r1
 800f684:	ec45 4b10 	vmov	d0, r4, r5
 800f688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	dc0e      	bgt.n	800f6ae <__ieee754_sqrt+0x56>
 800f690:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f694:	4322      	orrs	r2, r4
 800f696:	d0f5      	beq.n	800f684 <__ieee754_sqrt+0x2c>
 800f698:	b19d      	cbz	r5, 800f6c2 <__ieee754_sqrt+0x6a>
 800f69a:	4622      	mov	r2, r4
 800f69c:	4620      	mov	r0, r4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	f7f0 fdfa 	bl	8000298 <__aeabi_dsub>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	f7f1 f8d8 	bl	800085c <__aeabi_ddiv>
 800f6ac:	e7e8      	b.n	800f680 <__ieee754_sqrt+0x28>
 800f6ae:	152a      	asrs	r2, r5, #20
 800f6b0:	d115      	bne.n	800f6de <__ieee754_sqrt+0x86>
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	e009      	b.n	800f6ca <__ieee754_sqrt+0x72>
 800f6b6:	0acb      	lsrs	r3, r1, #11
 800f6b8:	3a15      	subs	r2, #21
 800f6ba:	0549      	lsls	r1, r1, #21
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d0fa      	beq.n	800f6b6 <__ieee754_sqrt+0x5e>
 800f6c0:	e7f7      	b.n	800f6b2 <__ieee754_sqrt+0x5a>
 800f6c2:	462a      	mov	r2, r5
 800f6c4:	e7fa      	b.n	800f6bc <__ieee754_sqrt+0x64>
 800f6c6:	005b      	lsls	r3, r3, #1
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	02dc      	lsls	r4, r3, #11
 800f6cc:	d5fb      	bpl.n	800f6c6 <__ieee754_sqrt+0x6e>
 800f6ce:	1e44      	subs	r4, r0, #1
 800f6d0:	1b12      	subs	r2, r2, r4
 800f6d2:	f1c0 0420 	rsb	r4, r0, #32
 800f6d6:	fa21 f404 	lsr.w	r4, r1, r4
 800f6da:	4323      	orrs	r3, r4
 800f6dc:	4081      	lsls	r1, r0
 800f6de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f6e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f6ea:	07d2      	lsls	r2, r2, #31
 800f6ec:	bf5c      	itt	pl
 800f6ee:	005b      	lslpl	r3, r3, #1
 800f6f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f6f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f6f8:	bf58      	it	pl
 800f6fa:	0049      	lslpl	r1, r1, #1
 800f6fc:	2600      	movs	r6, #0
 800f6fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f702:	106d      	asrs	r5, r5, #1
 800f704:	0049      	lsls	r1, r1, #1
 800f706:	2016      	movs	r0, #22
 800f708:	4632      	mov	r2, r6
 800f70a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f70e:	1917      	adds	r7, r2, r4
 800f710:	429f      	cmp	r7, r3
 800f712:	bfde      	ittt	le
 800f714:	193a      	addle	r2, r7, r4
 800f716:	1bdb      	suble	r3, r3, r7
 800f718:	1936      	addle	r6, r6, r4
 800f71a:	0fcf      	lsrs	r7, r1, #31
 800f71c:	3801      	subs	r0, #1
 800f71e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f722:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f726:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f72a:	d1f0      	bne.n	800f70e <__ieee754_sqrt+0xb6>
 800f72c:	4604      	mov	r4, r0
 800f72e:	2720      	movs	r7, #32
 800f730:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f734:	429a      	cmp	r2, r3
 800f736:	eb00 0e0c 	add.w	lr, r0, ip
 800f73a:	db02      	blt.n	800f742 <__ieee754_sqrt+0xea>
 800f73c:	d113      	bne.n	800f766 <__ieee754_sqrt+0x10e>
 800f73e:	458e      	cmp	lr, r1
 800f740:	d811      	bhi.n	800f766 <__ieee754_sqrt+0x10e>
 800f742:	f1be 0f00 	cmp.w	lr, #0
 800f746:	eb0e 000c 	add.w	r0, lr, ip
 800f74a:	da42      	bge.n	800f7d2 <__ieee754_sqrt+0x17a>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	db40      	blt.n	800f7d2 <__ieee754_sqrt+0x17a>
 800f750:	f102 0801 	add.w	r8, r2, #1
 800f754:	1a9b      	subs	r3, r3, r2
 800f756:	458e      	cmp	lr, r1
 800f758:	bf88      	it	hi
 800f75a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800f75e:	eba1 010e 	sub.w	r1, r1, lr
 800f762:	4464      	add	r4, ip
 800f764:	4642      	mov	r2, r8
 800f766:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f76a:	3f01      	subs	r7, #1
 800f76c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f770:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f774:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f778:	d1dc      	bne.n	800f734 <__ieee754_sqrt+0xdc>
 800f77a:	4319      	orrs	r1, r3
 800f77c:	d01b      	beq.n	800f7b6 <__ieee754_sqrt+0x15e>
 800f77e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f804 <__ieee754_sqrt+0x1ac>
 800f782:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f808 <__ieee754_sqrt+0x1b0>
 800f786:	e9da 0100 	ldrd	r0, r1, [sl]
 800f78a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f78e:	f7f0 fd83 	bl	8000298 <__aeabi_dsub>
 800f792:	e9da 8900 	ldrd	r8, r9, [sl]
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	4640      	mov	r0, r8
 800f79c:	4649      	mov	r1, r9
 800f79e:	f7f1 f9af 	bl	8000b00 <__aeabi_dcmple>
 800f7a2:	b140      	cbz	r0, 800f7b6 <__ieee754_sqrt+0x15e>
 800f7a4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800f7a8:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7ac:	e9db 2300 	ldrd	r2, r3, [fp]
 800f7b0:	d111      	bne.n	800f7d6 <__ieee754_sqrt+0x17e>
 800f7b2:	3601      	adds	r6, #1
 800f7b4:	463c      	mov	r4, r7
 800f7b6:	1072      	asrs	r2, r6, #1
 800f7b8:	0863      	lsrs	r3, r4, #1
 800f7ba:	07f1      	lsls	r1, r6, #31
 800f7bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f7c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f7c4:	bf48      	it	mi
 800f7c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f7ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	e756      	b.n	800f680 <__ieee754_sqrt+0x28>
 800f7d2:	4690      	mov	r8, r2
 800f7d4:	e7be      	b.n	800f754 <__ieee754_sqrt+0xfc>
 800f7d6:	f7f0 fd61 	bl	800029c <__adddf3>
 800f7da:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4640      	mov	r0, r8
 800f7e4:	4649      	mov	r1, r9
 800f7e6:	f7f1 f981 	bl	8000aec <__aeabi_dcmplt>
 800f7ea:	b120      	cbz	r0, 800f7f6 <__ieee754_sqrt+0x19e>
 800f7ec:	1ca0      	adds	r0, r4, #2
 800f7ee:	bf08      	it	eq
 800f7f0:	3601      	addeq	r6, #1
 800f7f2:	3402      	adds	r4, #2
 800f7f4:	e7df      	b.n	800f7b6 <__ieee754_sqrt+0x15e>
 800f7f6:	1c63      	adds	r3, r4, #1
 800f7f8:	f023 0401 	bic.w	r4, r3, #1
 800f7fc:	e7db      	b.n	800f7b6 <__ieee754_sqrt+0x15e>
 800f7fe:	bf00      	nop
 800f800:	7ff00000 	.word	0x7ff00000
 800f804:	20000108 	.word	0x20000108
 800f808:	20000100 	.word	0x20000100

0800f80c <abort>:
 800f80c:	b508      	push	{r3, lr}
 800f80e:	2006      	movs	r0, #6
 800f810:	f000 fcd0 	bl	80101b4 <raise>
 800f814:	2001      	movs	r0, #1
 800f816:	f7f5 fc9d 	bl	8005154 <_exit>
	...

0800f81c <malloc>:
 800f81c:	4b02      	ldr	r3, [pc, #8]	@ (800f828 <malloc+0xc>)
 800f81e:	4601      	mov	r1, r0
 800f820:	6818      	ldr	r0, [r3, #0]
 800f822:	f000 b80b 	b.w	800f83c <_malloc_r>
 800f826:	bf00      	nop
 800f828:	2000052c 	.word	0x2000052c

0800f82c <free>:
 800f82c:	4b02      	ldr	r3, [pc, #8]	@ (800f838 <free+0xc>)
 800f82e:	4601      	mov	r1, r0
 800f830:	6818      	ldr	r0, [r3, #0]
 800f832:	f000 bddf 	b.w	80103f4 <_free_r>
 800f836:	bf00      	nop
 800f838:	2000052c 	.word	0x2000052c

0800f83c <_malloc_r>:
 800f83c:	f101 030b 	add.w	r3, r1, #11
 800f840:	2b16      	cmp	r3, #22
 800f842:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f846:	4605      	mov	r5, r0
 800f848:	d906      	bls.n	800f858 <_malloc_r+0x1c>
 800f84a:	f033 0707 	bics.w	r7, r3, #7
 800f84e:	d504      	bpl.n	800f85a <_malloc_r+0x1e>
 800f850:	230c      	movs	r3, #12
 800f852:	602b      	str	r3, [r5, #0]
 800f854:	2400      	movs	r4, #0
 800f856:	e1a3      	b.n	800fba0 <_malloc_r+0x364>
 800f858:	2710      	movs	r7, #16
 800f85a:	42b9      	cmp	r1, r7
 800f85c:	d8f8      	bhi.n	800f850 <_malloc_r+0x14>
 800f85e:	4628      	mov	r0, r5
 800f860:	f000 fa26 	bl	800fcb0 <__malloc_lock>
 800f864:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800f868:	4eaf      	ldr	r6, [pc, #700]	@ (800fb28 <_malloc_r+0x2ec>)
 800f86a:	d237      	bcs.n	800f8dc <_malloc_r+0xa0>
 800f86c:	f107 0208 	add.w	r2, r7, #8
 800f870:	4432      	add	r2, r6
 800f872:	f1a2 0108 	sub.w	r1, r2, #8
 800f876:	6854      	ldr	r4, [r2, #4]
 800f878:	428c      	cmp	r4, r1
 800f87a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800f87e:	d102      	bne.n	800f886 <_malloc_r+0x4a>
 800f880:	68d4      	ldr	r4, [r2, #12]
 800f882:	42a2      	cmp	r2, r4
 800f884:	d010      	beq.n	800f8a8 <_malloc_r+0x6c>
 800f886:	6863      	ldr	r3, [r4, #4]
 800f888:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800f88c:	f023 0303 	bic.w	r3, r3, #3
 800f890:	60ca      	str	r2, [r1, #12]
 800f892:	4423      	add	r3, r4
 800f894:	6091      	str	r1, [r2, #8]
 800f896:	685a      	ldr	r2, [r3, #4]
 800f898:	f042 0201 	orr.w	r2, r2, #1
 800f89c:	605a      	str	r2, [r3, #4]
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f000 fa0c 	bl	800fcbc <__malloc_unlock>
 800f8a4:	3408      	adds	r4, #8
 800f8a6:	e17b      	b.n	800fba0 <_malloc_r+0x364>
 800f8a8:	3302      	adds	r3, #2
 800f8aa:	6934      	ldr	r4, [r6, #16]
 800f8ac:	499f      	ldr	r1, [pc, #636]	@ (800fb2c <_malloc_r+0x2f0>)
 800f8ae:	428c      	cmp	r4, r1
 800f8b0:	d077      	beq.n	800f9a2 <_malloc_r+0x166>
 800f8b2:	6862      	ldr	r2, [r4, #4]
 800f8b4:	f022 0c03 	bic.w	ip, r2, #3
 800f8b8:	ebac 0007 	sub.w	r0, ip, r7
 800f8bc:	280f      	cmp	r0, #15
 800f8be:	dd48      	ble.n	800f952 <_malloc_r+0x116>
 800f8c0:	19e2      	adds	r2, r4, r7
 800f8c2:	f040 0301 	orr.w	r3, r0, #1
 800f8c6:	f047 0701 	orr.w	r7, r7, #1
 800f8ca:	6067      	str	r7, [r4, #4]
 800f8cc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800f8d0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800f8d4:	6053      	str	r3, [r2, #4]
 800f8d6:	f844 000c 	str.w	r0, [r4, ip]
 800f8da:	e7e0      	b.n	800f89e <_malloc_r+0x62>
 800f8dc:	0a7b      	lsrs	r3, r7, #9
 800f8de:	d02a      	beq.n	800f936 <_malloc_r+0xfa>
 800f8e0:	2b04      	cmp	r3, #4
 800f8e2:	d812      	bhi.n	800f90a <_malloc_r+0xce>
 800f8e4:	09bb      	lsrs	r3, r7, #6
 800f8e6:	3338      	adds	r3, #56	@ 0x38
 800f8e8:	1c5a      	adds	r2, r3, #1
 800f8ea:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800f8ee:	f1a2 0c08 	sub.w	ip, r2, #8
 800f8f2:	6854      	ldr	r4, [r2, #4]
 800f8f4:	4564      	cmp	r4, ip
 800f8f6:	d006      	beq.n	800f906 <_malloc_r+0xca>
 800f8f8:	6862      	ldr	r2, [r4, #4]
 800f8fa:	f022 0203 	bic.w	r2, r2, #3
 800f8fe:	1bd0      	subs	r0, r2, r7
 800f900:	280f      	cmp	r0, #15
 800f902:	dd1c      	ble.n	800f93e <_malloc_r+0x102>
 800f904:	3b01      	subs	r3, #1
 800f906:	3301      	adds	r3, #1
 800f908:	e7cf      	b.n	800f8aa <_malloc_r+0x6e>
 800f90a:	2b14      	cmp	r3, #20
 800f90c:	d801      	bhi.n	800f912 <_malloc_r+0xd6>
 800f90e:	335b      	adds	r3, #91	@ 0x5b
 800f910:	e7ea      	b.n	800f8e8 <_malloc_r+0xac>
 800f912:	2b54      	cmp	r3, #84	@ 0x54
 800f914:	d802      	bhi.n	800f91c <_malloc_r+0xe0>
 800f916:	0b3b      	lsrs	r3, r7, #12
 800f918:	336e      	adds	r3, #110	@ 0x6e
 800f91a:	e7e5      	b.n	800f8e8 <_malloc_r+0xac>
 800f91c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800f920:	d802      	bhi.n	800f928 <_malloc_r+0xec>
 800f922:	0bfb      	lsrs	r3, r7, #15
 800f924:	3377      	adds	r3, #119	@ 0x77
 800f926:	e7df      	b.n	800f8e8 <_malloc_r+0xac>
 800f928:	f240 5254 	movw	r2, #1364	@ 0x554
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d804      	bhi.n	800f93a <_malloc_r+0xfe>
 800f930:	0cbb      	lsrs	r3, r7, #18
 800f932:	337c      	adds	r3, #124	@ 0x7c
 800f934:	e7d8      	b.n	800f8e8 <_malloc_r+0xac>
 800f936:	233f      	movs	r3, #63	@ 0x3f
 800f938:	e7d6      	b.n	800f8e8 <_malloc_r+0xac>
 800f93a:	237e      	movs	r3, #126	@ 0x7e
 800f93c:	e7d4      	b.n	800f8e8 <_malloc_r+0xac>
 800f93e:	2800      	cmp	r0, #0
 800f940:	68e1      	ldr	r1, [r4, #12]
 800f942:	db04      	blt.n	800f94e <_malloc_r+0x112>
 800f944:	68a3      	ldr	r3, [r4, #8]
 800f946:	60d9      	str	r1, [r3, #12]
 800f948:	608b      	str	r3, [r1, #8]
 800f94a:	18a3      	adds	r3, r4, r2
 800f94c:	e7a3      	b.n	800f896 <_malloc_r+0x5a>
 800f94e:	460c      	mov	r4, r1
 800f950:	e7d0      	b.n	800f8f4 <_malloc_r+0xb8>
 800f952:	2800      	cmp	r0, #0
 800f954:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800f958:	db07      	blt.n	800f96a <_malloc_r+0x12e>
 800f95a:	44a4      	add	ip, r4
 800f95c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f960:	f043 0301 	orr.w	r3, r3, #1
 800f964:	f8cc 3004 	str.w	r3, [ip, #4]
 800f968:	e799      	b.n	800f89e <_malloc_r+0x62>
 800f96a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800f96e:	6870      	ldr	r0, [r6, #4]
 800f970:	f080 8095 	bcs.w	800fa9e <_malloc_r+0x262>
 800f974:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800f978:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800f97c:	f04f 0c01 	mov.w	ip, #1
 800f980:	3201      	adds	r2, #1
 800f982:	fa0c fc0e 	lsl.w	ip, ip, lr
 800f986:	ea4c 0000 	orr.w	r0, ip, r0
 800f98a:	6070      	str	r0, [r6, #4]
 800f98c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800f990:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800f994:	3808      	subs	r0, #8
 800f996:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800f99a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800f99e:	f8cc 400c 	str.w	r4, [ip, #12]
 800f9a2:	1098      	asrs	r0, r3, #2
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	4082      	lsls	r2, r0
 800f9a8:	6870      	ldr	r0, [r6, #4]
 800f9aa:	4290      	cmp	r0, r2
 800f9ac:	d326      	bcc.n	800f9fc <_malloc_r+0x1c0>
 800f9ae:	4210      	tst	r0, r2
 800f9b0:	d106      	bne.n	800f9c0 <_malloc_r+0x184>
 800f9b2:	f023 0303 	bic.w	r3, r3, #3
 800f9b6:	0052      	lsls	r2, r2, #1
 800f9b8:	4210      	tst	r0, r2
 800f9ba:	f103 0304 	add.w	r3, r3, #4
 800f9be:	d0fa      	beq.n	800f9b6 <_malloc_r+0x17a>
 800f9c0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800f9c4:	46c1      	mov	r9, r8
 800f9c6:	469e      	mov	lr, r3
 800f9c8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800f9cc:	454c      	cmp	r4, r9
 800f9ce:	f040 80b9 	bne.w	800fb44 <_malloc_r+0x308>
 800f9d2:	f10e 0e01 	add.w	lr, lr, #1
 800f9d6:	f01e 0f03 	tst.w	lr, #3
 800f9da:	f109 0908 	add.w	r9, r9, #8
 800f9de:	d1f3      	bne.n	800f9c8 <_malloc_r+0x18c>
 800f9e0:	0798      	lsls	r0, r3, #30
 800f9e2:	f040 80e3 	bne.w	800fbac <_malloc_r+0x370>
 800f9e6:	6873      	ldr	r3, [r6, #4]
 800f9e8:	ea23 0302 	bic.w	r3, r3, r2
 800f9ec:	6073      	str	r3, [r6, #4]
 800f9ee:	6870      	ldr	r0, [r6, #4]
 800f9f0:	0052      	lsls	r2, r2, #1
 800f9f2:	4290      	cmp	r0, r2
 800f9f4:	d302      	bcc.n	800f9fc <_malloc_r+0x1c0>
 800f9f6:	2a00      	cmp	r2, #0
 800f9f8:	f040 80e5 	bne.w	800fbc6 <_malloc_r+0x38a>
 800f9fc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800fa00:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fa04:	f023 0903 	bic.w	r9, r3, #3
 800fa08:	45b9      	cmp	r9, r7
 800fa0a:	d304      	bcc.n	800fa16 <_malloc_r+0x1da>
 800fa0c:	eba9 0207 	sub.w	r2, r9, r7
 800fa10:	2a0f      	cmp	r2, #15
 800fa12:	f300 8141 	bgt.w	800fc98 <_malloc_r+0x45c>
 800fa16:	4b46      	ldr	r3, [pc, #280]	@ (800fb30 <_malloc_r+0x2f4>)
 800fa18:	6819      	ldr	r1, [r3, #0]
 800fa1a:	3110      	adds	r1, #16
 800fa1c:	4439      	add	r1, r7
 800fa1e:	2008      	movs	r0, #8
 800fa20:	9101      	str	r1, [sp, #4]
 800fa22:	f000 fc67 	bl	80102f4 <sysconf>
 800fa26:	4a43      	ldr	r2, [pc, #268]	@ (800fb34 <_malloc_r+0x2f8>)
 800fa28:	9901      	ldr	r1, [sp, #4]
 800fa2a:	6813      	ldr	r3, [r2, #0]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	bf1f      	itttt	ne
 800fa30:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800fa34:	1809      	addne	r1, r1, r0
 800fa36:	4243      	negne	r3, r0
 800fa38:	4019      	andne	r1, r3
 800fa3a:	4680      	mov	r8, r0
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	9101      	str	r1, [sp, #4]
 800fa40:	f000 fc08 	bl	8010254 <_sbrk_r>
 800fa44:	1c42      	adds	r2, r0, #1
 800fa46:	eb0a 0b09 	add.w	fp, sl, r9
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	f000 80f7 	beq.w	800fc3e <_malloc_r+0x402>
 800fa50:	4583      	cmp	fp, r0
 800fa52:	9901      	ldr	r1, [sp, #4]
 800fa54:	4a37      	ldr	r2, [pc, #220]	@ (800fb34 <_malloc_r+0x2f8>)
 800fa56:	d902      	bls.n	800fa5e <_malloc_r+0x222>
 800fa58:	45b2      	cmp	sl, r6
 800fa5a:	f040 80f0 	bne.w	800fc3e <_malloc_r+0x402>
 800fa5e:	4b36      	ldr	r3, [pc, #216]	@ (800fb38 <_malloc_r+0x2fc>)
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	45a3      	cmp	fp, r4
 800fa64:	eb00 0e01 	add.w	lr, r0, r1
 800fa68:	f8c3 e000 	str.w	lr, [r3]
 800fa6c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800fa70:	f040 80ab 	bne.w	800fbca <_malloc_r+0x38e>
 800fa74:	ea1b 0f0c 	tst.w	fp, ip
 800fa78:	f040 80a7 	bne.w	800fbca <_malloc_r+0x38e>
 800fa7c:	68b2      	ldr	r2, [r6, #8]
 800fa7e:	4449      	add	r1, r9
 800fa80:	f041 0101 	orr.w	r1, r1, #1
 800fa84:	6051      	str	r1, [r2, #4]
 800fa86:	4a2d      	ldr	r2, [pc, #180]	@ (800fb3c <_malloc_r+0x300>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	6811      	ldr	r1, [r2, #0]
 800fa8c:	428b      	cmp	r3, r1
 800fa8e:	bf88      	it	hi
 800fa90:	6013      	strhi	r3, [r2, #0]
 800fa92:	4a2b      	ldr	r2, [pc, #172]	@ (800fb40 <_malloc_r+0x304>)
 800fa94:	6811      	ldr	r1, [r2, #0]
 800fa96:	428b      	cmp	r3, r1
 800fa98:	bf88      	it	hi
 800fa9a:	6013      	strhi	r3, [r2, #0]
 800fa9c:	e0cf      	b.n	800fc3e <_malloc_r+0x402>
 800fa9e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800faa2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800faa6:	d218      	bcs.n	800fada <_malloc_r+0x29e>
 800faa8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800faac:	3238      	adds	r2, #56	@ 0x38
 800faae:	f102 0e01 	add.w	lr, r2, #1
 800fab2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800fab6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800faba:	45f0      	cmp	r8, lr
 800fabc:	d12b      	bne.n	800fb16 <_malloc_r+0x2da>
 800fabe:	1092      	asrs	r2, r2, #2
 800fac0:	f04f 0c01 	mov.w	ip, #1
 800fac4:	fa0c f202 	lsl.w	r2, ip, r2
 800fac8:	4302      	orrs	r2, r0
 800faca:	6072      	str	r2, [r6, #4]
 800facc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800fad0:	f8c8 4008 	str.w	r4, [r8, #8]
 800fad4:	f8ce 400c 	str.w	r4, [lr, #12]
 800fad8:	e763      	b.n	800f9a2 <_malloc_r+0x166>
 800fada:	2a14      	cmp	r2, #20
 800fadc:	d801      	bhi.n	800fae2 <_malloc_r+0x2a6>
 800fade:	325b      	adds	r2, #91	@ 0x5b
 800fae0:	e7e5      	b.n	800faae <_malloc_r+0x272>
 800fae2:	2a54      	cmp	r2, #84	@ 0x54
 800fae4:	d803      	bhi.n	800faee <_malloc_r+0x2b2>
 800fae6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800faea:	326e      	adds	r2, #110	@ 0x6e
 800faec:	e7df      	b.n	800faae <_malloc_r+0x272>
 800faee:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800faf2:	d803      	bhi.n	800fafc <_malloc_r+0x2c0>
 800faf4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800faf8:	3277      	adds	r2, #119	@ 0x77
 800fafa:	e7d8      	b.n	800faae <_malloc_r+0x272>
 800fafc:	f240 5e54 	movw	lr, #1364	@ 0x554
 800fb00:	4572      	cmp	r2, lr
 800fb02:	bf9a      	itte	ls
 800fb04:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800fb08:	327c      	addls	r2, #124	@ 0x7c
 800fb0a:	227e      	movhi	r2, #126	@ 0x7e
 800fb0c:	e7cf      	b.n	800faae <_malloc_r+0x272>
 800fb0e:	f8de e008 	ldr.w	lr, [lr, #8]
 800fb12:	45f0      	cmp	r8, lr
 800fb14:	d005      	beq.n	800fb22 <_malloc_r+0x2e6>
 800fb16:	f8de 2004 	ldr.w	r2, [lr, #4]
 800fb1a:	f022 0203 	bic.w	r2, r2, #3
 800fb1e:	4562      	cmp	r2, ip
 800fb20:	d8f5      	bhi.n	800fb0e <_malloc_r+0x2d2>
 800fb22:	f8de 800c 	ldr.w	r8, [lr, #12]
 800fb26:	e7d1      	b.n	800facc <_malloc_r+0x290>
 800fb28:	20000118 	.word	0x20000118
 800fb2c:	20000120 	.word	0x20000120
 800fb30:	20001f4c 	.word	0x20001f4c
 800fb34:	20000110 	.word	0x20000110
 800fb38:	20001f1c 	.word	0x20001f1c
 800fb3c:	20001f48 	.word	0x20001f48
 800fb40:	20001f44 	.word	0x20001f44
 800fb44:	6860      	ldr	r0, [r4, #4]
 800fb46:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800fb4a:	f020 0003 	bic.w	r0, r0, #3
 800fb4e:	eba0 0a07 	sub.w	sl, r0, r7
 800fb52:	f1ba 0f0f 	cmp.w	sl, #15
 800fb56:	dd12      	ble.n	800fb7e <_malloc_r+0x342>
 800fb58:	68a3      	ldr	r3, [r4, #8]
 800fb5a:	19e2      	adds	r2, r4, r7
 800fb5c:	f047 0701 	orr.w	r7, r7, #1
 800fb60:	6067      	str	r7, [r4, #4]
 800fb62:	f8c3 c00c 	str.w	ip, [r3, #12]
 800fb66:	f8cc 3008 	str.w	r3, [ip, #8]
 800fb6a:	f04a 0301 	orr.w	r3, sl, #1
 800fb6e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800fb72:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800fb76:	6053      	str	r3, [r2, #4]
 800fb78:	f844 a000 	str.w	sl, [r4, r0]
 800fb7c:	e68f      	b.n	800f89e <_malloc_r+0x62>
 800fb7e:	f1ba 0f00 	cmp.w	sl, #0
 800fb82:	db11      	blt.n	800fba8 <_malloc_r+0x36c>
 800fb84:	4420      	add	r0, r4
 800fb86:	6843      	ldr	r3, [r0, #4]
 800fb88:	f043 0301 	orr.w	r3, r3, #1
 800fb8c:	6043      	str	r3, [r0, #4]
 800fb8e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800fb92:	4628      	mov	r0, r5
 800fb94:	f8c3 c00c 	str.w	ip, [r3, #12]
 800fb98:	f8cc 3008 	str.w	r3, [ip, #8]
 800fb9c:	f000 f88e 	bl	800fcbc <__malloc_unlock>
 800fba0:	4620      	mov	r0, r4
 800fba2:	b003      	add	sp, #12
 800fba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba8:	4664      	mov	r4, ip
 800fbaa:	e70f      	b.n	800f9cc <_malloc_r+0x190>
 800fbac:	f858 0908 	ldr.w	r0, [r8], #-8
 800fbb0:	4540      	cmp	r0, r8
 800fbb2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800fbb6:	f43f af13 	beq.w	800f9e0 <_malloc_r+0x1a4>
 800fbba:	e718      	b.n	800f9ee <_malloc_r+0x1b2>
 800fbbc:	3304      	adds	r3, #4
 800fbbe:	0052      	lsls	r2, r2, #1
 800fbc0:	4210      	tst	r0, r2
 800fbc2:	d0fb      	beq.n	800fbbc <_malloc_r+0x380>
 800fbc4:	e6fc      	b.n	800f9c0 <_malloc_r+0x184>
 800fbc6:	4673      	mov	r3, lr
 800fbc8:	e7fa      	b.n	800fbc0 <_malloc_r+0x384>
 800fbca:	6810      	ldr	r0, [r2, #0]
 800fbcc:	3001      	adds	r0, #1
 800fbce:	bf1b      	ittet	ne
 800fbd0:	eba4 0b0b 	subne.w	fp, r4, fp
 800fbd4:	eb0b 020e 	addne.w	r2, fp, lr
 800fbd8:	6014      	streq	r4, [r2, #0]
 800fbda:	601a      	strne	r2, [r3, #0]
 800fbdc:	f014 0b07 	ands.w	fp, r4, #7
 800fbe0:	bf1a      	itte	ne
 800fbe2:	f1cb 0008 	rsbne	r0, fp, #8
 800fbe6:	1824      	addne	r4, r4, r0
 800fbe8:	4658      	moveq	r0, fp
 800fbea:	1862      	adds	r2, r4, r1
 800fbec:	ea02 010c 	and.w	r1, r2, ip
 800fbf0:	4480      	add	r8, r0
 800fbf2:	eba8 0801 	sub.w	r8, r8, r1
 800fbf6:	ea08 080c 	and.w	r8, r8, ip
 800fbfa:	4641      	mov	r1, r8
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	9201      	str	r2, [sp, #4]
 800fc00:	f000 fb28 	bl	8010254 <_sbrk_r>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	9a01      	ldr	r2, [sp, #4]
 800fc08:	4b28      	ldr	r3, [pc, #160]	@ (800fcac <_malloc_r+0x470>)
 800fc0a:	d107      	bne.n	800fc1c <_malloc_r+0x3e0>
 800fc0c:	f1bb 0f00 	cmp.w	fp, #0
 800fc10:	d023      	beq.n	800fc5a <_malloc_r+0x41e>
 800fc12:	f1ab 0008 	sub.w	r0, fp, #8
 800fc16:	4410      	add	r0, r2
 800fc18:	f04f 0800 	mov.w	r8, #0
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	60b4      	str	r4, [r6, #8]
 800fc20:	1b00      	subs	r0, r0, r4
 800fc22:	4440      	add	r0, r8
 800fc24:	4442      	add	r2, r8
 800fc26:	f040 0001 	orr.w	r0, r0, #1
 800fc2a:	45b2      	cmp	sl, r6
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	6060      	str	r0, [r4, #4]
 800fc30:	f43f af29 	beq.w	800fa86 <_malloc_r+0x24a>
 800fc34:	f1b9 0f0f 	cmp.w	r9, #15
 800fc38:	d812      	bhi.n	800fc60 <_malloc_r+0x424>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	6063      	str	r3, [r4, #4]
 800fc3e:	68b3      	ldr	r3, [r6, #8]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	f023 0303 	bic.w	r3, r3, #3
 800fc46:	42bb      	cmp	r3, r7
 800fc48:	eba3 0207 	sub.w	r2, r3, r7
 800fc4c:	d301      	bcc.n	800fc52 <_malloc_r+0x416>
 800fc4e:	2a0f      	cmp	r2, #15
 800fc50:	dc22      	bgt.n	800fc98 <_malloc_r+0x45c>
 800fc52:	4628      	mov	r0, r5
 800fc54:	f000 f832 	bl	800fcbc <__malloc_unlock>
 800fc58:	e5fc      	b.n	800f854 <_malloc_r+0x18>
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	46d8      	mov	r8, fp
 800fc5e:	e7dd      	b.n	800fc1c <_malloc_r+0x3e0>
 800fc60:	f8da 2004 	ldr.w	r2, [sl, #4]
 800fc64:	f1a9 090c 	sub.w	r9, r9, #12
 800fc68:	f029 0907 	bic.w	r9, r9, #7
 800fc6c:	f002 0201 	and.w	r2, r2, #1
 800fc70:	ea42 0209 	orr.w	r2, r2, r9
 800fc74:	f8ca 2004 	str.w	r2, [sl, #4]
 800fc78:	2105      	movs	r1, #5
 800fc7a:	eb0a 0209 	add.w	r2, sl, r9
 800fc7e:	f1b9 0f0f 	cmp.w	r9, #15
 800fc82:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800fc86:	f67f aefe 	bls.w	800fa86 <_malloc_r+0x24a>
 800fc8a:	f10a 0108 	add.w	r1, sl, #8
 800fc8e:	4628      	mov	r0, r5
 800fc90:	f000 fbb0 	bl	80103f4 <_free_r>
 800fc94:	4b05      	ldr	r3, [pc, #20]	@ (800fcac <_malloc_r+0x470>)
 800fc96:	e6f6      	b.n	800fa86 <_malloc_r+0x24a>
 800fc98:	68b4      	ldr	r4, [r6, #8]
 800fc9a:	f047 0301 	orr.w	r3, r7, #1
 800fc9e:	4427      	add	r7, r4
 800fca0:	f042 0201 	orr.w	r2, r2, #1
 800fca4:	6063      	str	r3, [r4, #4]
 800fca6:	60b7      	str	r7, [r6, #8]
 800fca8:	607a      	str	r2, [r7, #4]
 800fcaa:	e5f8      	b.n	800f89e <_malloc_r+0x62>
 800fcac:	20001f1c 	.word	0x20001f1c

0800fcb0 <__malloc_lock>:
 800fcb0:	4801      	ldr	r0, [pc, #4]	@ (800fcb8 <__malloc_lock+0x8>)
 800fcb2:	f000 bb1d 	b.w	80102f0 <__retarget_lock_acquire_recursive>
 800fcb6:	bf00      	nop
 800fcb8:	20002090 	.word	0x20002090

0800fcbc <__malloc_unlock>:
 800fcbc:	4801      	ldr	r0, [pc, #4]	@ (800fcc4 <__malloc_unlock+0x8>)
 800fcbe:	f000 bb18 	b.w	80102f2 <__retarget_lock_release_recursive>
 800fcc2:	bf00      	nop
 800fcc4:	20002090 	.word	0x20002090

0800fcc8 <_strtoull_l.constprop.0>:
 800fcc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	4691      	mov	r9, r2
 800fcce:	4a48      	ldr	r2, [pc, #288]	@ (800fdf0 <_strtoull_l.constprop.0+0x128>)
 800fcd0:	9001      	str	r0, [sp, #4]
 800fcd2:	468a      	mov	sl, r1
 800fcd4:	461e      	mov	r6, r3
 800fcd6:	460d      	mov	r5, r1
 800fcd8:	462b      	mov	r3, r5
 800fcda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcde:	5d17      	ldrb	r7, [r2, r4]
 800fce0:	f017 0708 	ands.w	r7, r7, #8
 800fce4:	d1f8      	bne.n	800fcd8 <_strtoull_l.constprop.0+0x10>
 800fce6:	2c2d      	cmp	r4, #45	@ 0x2d
 800fce8:	d14a      	bne.n	800fd80 <_strtoull_l.constprop.0+0xb8>
 800fcea:	782c      	ldrb	r4, [r5, #0]
 800fcec:	2701      	movs	r7, #1
 800fcee:	1c9d      	adds	r5, r3, #2
 800fcf0:	f036 0310 	bics.w	r3, r6, #16
 800fcf4:	d109      	bne.n	800fd0a <_strtoull_l.constprop.0+0x42>
 800fcf6:	2c30      	cmp	r4, #48	@ 0x30
 800fcf8:	d147      	bne.n	800fd8a <_strtoull_l.constprop.0+0xc2>
 800fcfa:	782b      	ldrb	r3, [r5, #0]
 800fcfc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fd00:	2b58      	cmp	r3, #88	@ 0x58
 800fd02:	d142      	bne.n	800fd8a <_strtoull_l.constprop.0+0xc2>
 800fd04:	786c      	ldrb	r4, [r5, #1]
 800fd06:	2610      	movs	r6, #16
 800fd08:	3502      	adds	r5, #2
 800fd0a:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800fd0e:	4632      	mov	r2, r6
 800fd10:	465b      	mov	r3, fp
 800fd12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800fd1a:	f7f0 ffed 	bl	8000cf8 <__aeabi_uldivmod>
 800fd1e:	4632      	mov	r2, r6
 800fd20:	9000      	str	r0, [sp, #0]
 800fd22:	4688      	mov	r8, r1
 800fd24:	465b      	mov	r3, fp
 800fd26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800fd2e:	f7f0 ffe3 	bl	8000cf8 <__aeabi_uldivmod>
 800fd32:	2300      	movs	r3, #0
 800fd34:	4618      	mov	r0, r3
 800fd36:	4619      	mov	r1, r3
 800fd38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fd3c:	f1bc 0f09 	cmp.w	ip, #9
 800fd40:	d82a      	bhi.n	800fd98 <_strtoull_l.constprop.0+0xd0>
 800fd42:	4664      	mov	r4, ip
 800fd44:	42a6      	cmp	r6, r4
 800fd46:	dd38      	ble.n	800fdba <_strtoull_l.constprop.0+0xf2>
 800fd48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd4c:	d015      	beq.n	800fd7a <_strtoull_l.constprop.0+0xb2>
 800fd4e:	9b00      	ldr	r3, [sp, #0]
 800fd50:	4283      	cmp	r3, r0
 800fd52:	eb78 0301 	sbcs.w	r3, r8, r1
 800fd56:	d32d      	bcc.n	800fdb4 <_strtoull_l.constprop.0+0xec>
 800fd58:	9b00      	ldr	r3, [sp, #0]
 800fd5a:	4588      	cmp	r8, r1
 800fd5c:	bf08      	it	eq
 800fd5e:	4283      	cmpeq	r3, r0
 800fd60:	d101      	bne.n	800fd66 <_strtoull_l.constprop.0+0x9e>
 800fd62:	42a2      	cmp	r2, r4
 800fd64:	db26      	blt.n	800fdb4 <_strtoull_l.constprop.0+0xec>
 800fd66:	4371      	muls	r1, r6
 800fd68:	fb00 110b 	mla	r1, r0, fp, r1
 800fd6c:	fba6 0300 	umull	r0, r3, r6, r0
 800fd70:	4419      	add	r1, r3
 800fd72:	1820      	adds	r0, r4, r0
 800fd74:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800fd78:	2301      	movs	r3, #1
 800fd7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd7e:	e7db      	b.n	800fd38 <_strtoull_l.constprop.0+0x70>
 800fd80:	2c2b      	cmp	r4, #43	@ 0x2b
 800fd82:	bf04      	itt	eq
 800fd84:	782c      	ldrbeq	r4, [r5, #0]
 800fd86:	1c9d      	addeq	r5, r3, #2
 800fd88:	e7b2      	b.n	800fcf0 <_strtoull_l.constprop.0+0x28>
 800fd8a:	2e00      	cmp	r6, #0
 800fd8c:	d1bd      	bne.n	800fd0a <_strtoull_l.constprop.0+0x42>
 800fd8e:	2c30      	cmp	r4, #48	@ 0x30
 800fd90:	bf0c      	ite	eq
 800fd92:	2608      	moveq	r6, #8
 800fd94:	260a      	movne	r6, #10
 800fd96:	e7b8      	b.n	800fd0a <_strtoull_l.constprop.0+0x42>
 800fd98:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fd9c:	f1bc 0f19 	cmp.w	ip, #25
 800fda0:	d801      	bhi.n	800fda6 <_strtoull_l.constprop.0+0xde>
 800fda2:	3c37      	subs	r4, #55	@ 0x37
 800fda4:	e7ce      	b.n	800fd44 <_strtoull_l.constprop.0+0x7c>
 800fda6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fdaa:	f1bc 0f19 	cmp.w	ip, #25
 800fdae:	d804      	bhi.n	800fdba <_strtoull_l.constprop.0+0xf2>
 800fdb0:	3c57      	subs	r4, #87	@ 0x57
 800fdb2:	e7c7      	b.n	800fd44 <_strtoull_l.constprop.0+0x7c>
 800fdb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fdb8:	e7df      	b.n	800fd7a <_strtoull_l.constprop.0+0xb2>
 800fdba:	1c5a      	adds	r2, r3, #1
 800fdbc:	d10a      	bne.n	800fdd4 <_strtoull_l.constprop.0+0x10c>
 800fdbe:	9901      	ldr	r1, [sp, #4]
 800fdc0:	2222      	movs	r2, #34	@ 0x22
 800fdc2:	600a      	str	r2, [r1, #0]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	f1b9 0f00 	cmp.w	r9, #0
 800fdcc:	d10a      	bne.n	800fde4 <_strtoull_l.constprop.0+0x11c>
 800fdce:	b003      	add	sp, #12
 800fdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd4:	b117      	cbz	r7, 800fddc <_strtoull_l.constprop.0+0x114>
 800fdd6:	4240      	negs	r0, r0
 800fdd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800fddc:	f1b9 0f00 	cmp.w	r9, #0
 800fde0:	d0f5      	beq.n	800fdce <_strtoull_l.constprop.0+0x106>
 800fde2:	b10b      	cbz	r3, 800fde8 <_strtoull_l.constprop.0+0x120>
 800fde4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800fde8:	f8c9 a000 	str.w	sl, [r9]
 800fdec:	e7ef      	b.n	800fdce <_strtoull_l.constprop.0+0x106>
 800fdee:	bf00      	nop
 800fdf0:	080145b9 	.word	0x080145b9

0800fdf4 <strtoull>:
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	460a      	mov	r2, r1
 800fdf8:	4601      	mov	r1, r0
 800fdfa:	4802      	ldr	r0, [pc, #8]	@ (800fe04 <strtoull+0x10>)
 800fdfc:	6800      	ldr	r0, [r0, #0]
 800fdfe:	f7ff bf63 	b.w	800fcc8 <_strtoull_l.constprop.0>
 800fe02:	bf00      	nop
 800fe04:	2000052c 	.word	0x2000052c

0800fe08 <std>:
 800fe08:	2300      	movs	r3, #0
 800fe0a:	b510      	push	{r4, lr}
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	e9c0 3300 	strd	r3, r3, [r0]
 800fe12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe16:	6083      	str	r3, [r0, #8]
 800fe18:	8181      	strh	r1, [r0, #12]
 800fe1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe1c:	81c2      	strh	r2, [r0, #14]
 800fe1e:	6183      	str	r3, [r0, #24]
 800fe20:	4619      	mov	r1, r3
 800fe22:	2208      	movs	r2, #8
 800fe24:	305c      	adds	r0, #92	@ 0x5c
 800fe26:	f000 f962 	bl	80100ee <memset>
 800fe2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fe60 <std+0x58>)
 800fe2c:	6223      	str	r3, [r4, #32]
 800fe2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe64 <std+0x5c>)
 800fe30:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe32:	4b0d      	ldr	r3, [pc, #52]	@ (800fe68 <std+0x60>)
 800fe34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe36:	4b0d      	ldr	r3, [pc, #52]	@ (800fe6c <std+0x64>)
 800fe38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fe70 <std+0x68>)
 800fe3c:	61e4      	str	r4, [r4, #28]
 800fe3e:	429c      	cmp	r4, r3
 800fe40:	d006      	beq.n	800fe50 <std+0x48>
 800fe42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe46:	4294      	cmp	r4, r2
 800fe48:	d002      	beq.n	800fe50 <std+0x48>
 800fe4a:	33d0      	adds	r3, #208	@ 0xd0
 800fe4c:	429c      	cmp	r4, r3
 800fe4e:	d105      	bne.n	800fe5c <std+0x54>
 800fe50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe58:	f000 ba48 	b.w	80102ec <__retarget_lock_init_recursive>
 800fe5c:	bd10      	pop	{r4, pc}
 800fe5e:	bf00      	nop
 800fe60:	08010035 	.word	0x08010035
 800fe64:	08010057 	.word	0x08010057
 800fe68:	0801008f 	.word	0x0801008f
 800fe6c:	080100b3 	.word	0x080100b3
 800fe70:	20001f50 	.word	0x20001f50

0800fe74 <stdio_exit_handler>:
 800fe74:	4a02      	ldr	r2, [pc, #8]	@ (800fe80 <stdio_exit_handler+0xc>)
 800fe76:	4903      	ldr	r1, [pc, #12]	@ (800fe84 <stdio_exit_handler+0x10>)
 800fe78:	4803      	ldr	r0, [pc, #12]	@ (800fe88 <stdio_exit_handler+0x14>)
 800fe7a:	f000 b869 	b.w	800ff50 <_fwalk_sglue>
 800fe7e:	bf00      	nop
 800fe80:	20000520 	.word	0x20000520
 800fe84:	08011935 	.word	0x08011935
 800fe88:	20000530 	.word	0x20000530

0800fe8c <cleanup_stdio>:
 800fe8c:	6841      	ldr	r1, [r0, #4]
 800fe8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fec0 <cleanup_stdio+0x34>)
 800fe90:	4299      	cmp	r1, r3
 800fe92:	b510      	push	{r4, lr}
 800fe94:	4604      	mov	r4, r0
 800fe96:	d001      	beq.n	800fe9c <cleanup_stdio+0x10>
 800fe98:	f001 fd4c 	bl	8011934 <_fclose_r>
 800fe9c:	68a1      	ldr	r1, [r4, #8]
 800fe9e:	4b09      	ldr	r3, [pc, #36]	@ (800fec4 <cleanup_stdio+0x38>)
 800fea0:	4299      	cmp	r1, r3
 800fea2:	d002      	beq.n	800feaa <cleanup_stdio+0x1e>
 800fea4:	4620      	mov	r0, r4
 800fea6:	f001 fd45 	bl	8011934 <_fclose_r>
 800feaa:	68e1      	ldr	r1, [r4, #12]
 800feac:	4b06      	ldr	r3, [pc, #24]	@ (800fec8 <cleanup_stdio+0x3c>)
 800feae:	4299      	cmp	r1, r3
 800feb0:	d004      	beq.n	800febc <cleanup_stdio+0x30>
 800feb2:	4620      	mov	r0, r4
 800feb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb8:	f001 bd3c 	b.w	8011934 <_fclose_r>
 800febc:	bd10      	pop	{r4, pc}
 800febe:	bf00      	nop
 800fec0:	20001f50 	.word	0x20001f50
 800fec4:	20001fb8 	.word	0x20001fb8
 800fec8:	20002020 	.word	0x20002020

0800fecc <global_stdio_init.part.0>:
 800fecc:	b510      	push	{r4, lr}
 800fece:	4b0b      	ldr	r3, [pc, #44]	@ (800fefc <global_stdio_init.part.0+0x30>)
 800fed0:	4c0b      	ldr	r4, [pc, #44]	@ (800ff00 <global_stdio_init.part.0+0x34>)
 800fed2:	4a0c      	ldr	r2, [pc, #48]	@ (800ff04 <global_stdio_init.part.0+0x38>)
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	4620      	mov	r0, r4
 800fed8:	2200      	movs	r2, #0
 800feda:	2104      	movs	r1, #4
 800fedc:	f7ff ff94 	bl	800fe08 <std>
 800fee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fee4:	2201      	movs	r2, #1
 800fee6:	2109      	movs	r1, #9
 800fee8:	f7ff ff8e 	bl	800fe08 <std>
 800feec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fef0:	2202      	movs	r2, #2
 800fef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fef6:	2112      	movs	r1, #18
 800fef8:	f7ff bf86 	b.w	800fe08 <std>
 800fefc:	20002088 	.word	0x20002088
 800ff00:	20001f50 	.word	0x20001f50
 800ff04:	0800fe75 	.word	0x0800fe75

0800ff08 <__sfp_lock_acquire>:
 800ff08:	4801      	ldr	r0, [pc, #4]	@ (800ff10 <__sfp_lock_acquire+0x8>)
 800ff0a:	f000 b9f1 	b.w	80102f0 <__retarget_lock_acquire_recursive>
 800ff0e:	bf00      	nop
 800ff10:	20002092 	.word	0x20002092

0800ff14 <__sfp_lock_release>:
 800ff14:	4801      	ldr	r0, [pc, #4]	@ (800ff1c <__sfp_lock_release+0x8>)
 800ff16:	f000 b9ec 	b.w	80102f2 <__retarget_lock_release_recursive>
 800ff1a:	bf00      	nop
 800ff1c:	20002092 	.word	0x20002092

0800ff20 <__sinit>:
 800ff20:	b510      	push	{r4, lr}
 800ff22:	4604      	mov	r4, r0
 800ff24:	f7ff fff0 	bl	800ff08 <__sfp_lock_acquire>
 800ff28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff2a:	b11b      	cbz	r3, 800ff34 <__sinit+0x14>
 800ff2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff30:	f7ff bff0 	b.w	800ff14 <__sfp_lock_release>
 800ff34:	4b04      	ldr	r3, [pc, #16]	@ (800ff48 <__sinit+0x28>)
 800ff36:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff38:	4b04      	ldr	r3, [pc, #16]	@ (800ff4c <__sinit+0x2c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d1f5      	bne.n	800ff2c <__sinit+0xc>
 800ff40:	f7ff ffc4 	bl	800fecc <global_stdio_init.part.0>
 800ff44:	e7f2      	b.n	800ff2c <__sinit+0xc>
 800ff46:	bf00      	nop
 800ff48:	0800fe8d 	.word	0x0800fe8d
 800ff4c:	20002088 	.word	0x20002088

0800ff50 <_fwalk_sglue>:
 800ff50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff54:	4607      	mov	r7, r0
 800ff56:	4688      	mov	r8, r1
 800ff58:	4614      	mov	r4, r2
 800ff5a:	2600      	movs	r6, #0
 800ff5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff60:	f1b9 0901 	subs.w	r9, r9, #1
 800ff64:	d505      	bpl.n	800ff72 <_fwalk_sglue+0x22>
 800ff66:	6824      	ldr	r4, [r4, #0]
 800ff68:	2c00      	cmp	r4, #0
 800ff6a:	d1f7      	bne.n	800ff5c <_fwalk_sglue+0xc>
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff72:	89ab      	ldrh	r3, [r5, #12]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d907      	bls.n	800ff88 <_fwalk_sglue+0x38>
 800ff78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	d003      	beq.n	800ff88 <_fwalk_sglue+0x38>
 800ff80:	4629      	mov	r1, r5
 800ff82:	4638      	mov	r0, r7
 800ff84:	47c0      	blx	r8
 800ff86:	4306      	orrs	r6, r0
 800ff88:	3568      	adds	r5, #104	@ 0x68
 800ff8a:	e7e9      	b.n	800ff60 <_fwalk_sglue+0x10>

0800ff8c <snprintf>:
 800ff8c:	b40c      	push	{r2, r3}
 800ff8e:	b530      	push	{r4, r5, lr}
 800ff90:	4b17      	ldr	r3, [pc, #92]	@ (800fff0 <snprintf+0x64>)
 800ff92:	1e0c      	subs	r4, r1, #0
 800ff94:	681d      	ldr	r5, [r3, #0]
 800ff96:	b09d      	sub	sp, #116	@ 0x74
 800ff98:	da08      	bge.n	800ffac <snprintf+0x20>
 800ff9a:	238b      	movs	r3, #139	@ 0x8b
 800ff9c:	602b      	str	r3, [r5, #0]
 800ff9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ffa2:	b01d      	add	sp, #116	@ 0x74
 800ffa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffa8:	b002      	add	sp, #8
 800ffaa:	4770      	bx	lr
 800ffac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ffb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ffb4:	bf14      	ite	ne
 800ffb6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800ffba:	4623      	moveq	r3, r4
 800ffbc:	9304      	str	r3, [sp, #16]
 800ffbe:	9307      	str	r3, [sp, #28]
 800ffc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ffc4:	9002      	str	r0, [sp, #8]
 800ffc6:	9006      	str	r0, [sp, #24]
 800ffc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ffcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ffce:	ab21      	add	r3, sp, #132	@ 0x84
 800ffd0:	a902      	add	r1, sp, #8
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	9301      	str	r3, [sp, #4]
 800ffd6:	f000 facf 	bl	8010578 <_svfprintf_r>
 800ffda:	1c43      	adds	r3, r0, #1
 800ffdc:	bfbc      	itt	lt
 800ffde:	238b      	movlt	r3, #139	@ 0x8b
 800ffe0:	602b      	strlt	r3, [r5, #0]
 800ffe2:	2c00      	cmp	r4, #0
 800ffe4:	d0dd      	beq.n	800ffa2 <snprintf+0x16>
 800ffe6:	9b02      	ldr	r3, [sp, #8]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	701a      	strb	r2, [r3, #0]
 800ffec:	e7d9      	b.n	800ffa2 <snprintf+0x16>
 800ffee:	bf00      	nop
 800fff0:	2000052c 	.word	0x2000052c

0800fff4 <sprintf>:
 800fff4:	b40e      	push	{r1, r2, r3}
 800fff6:	b500      	push	{lr}
 800fff8:	b09c      	sub	sp, #112	@ 0x70
 800fffa:	ab1d      	add	r3, sp, #116	@ 0x74
 800fffc:	9002      	str	r0, [sp, #8]
 800fffe:	9006      	str	r0, [sp, #24]
 8010000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010004:	4809      	ldr	r0, [pc, #36]	@ (801002c <sprintf+0x38>)
 8010006:	9107      	str	r1, [sp, #28]
 8010008:	9104      	str	r1, [sp, #16]
 801000a:	4909      	ldr	r1, [pc, #36]	@ (8010030 <sprintf+0x3c>)
 801000c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010010:	9105      	str	r1, [sp, #20]
 8010012:	6800      	ldr	r0, [r0, #0]
 8010014:	9301      	str	r3, [sp, #4]
 8010016:	a902      	add	r1, sp, #8
 8010018:	f000 faae 	bl	8010578 <_svfprintf_r>
 801001c:	9b02      	ldr	r3, [sp, #8]
 801001e:	2200      	movs	r2, #0
 8010020:	701a      	strb	r2, [r3, #0]
 8010022:	b01c      	add	sp, #112	@ 0x70
 8010024:	f85d eb04 	ldr.w	lr, [sp], #4
 8010028:	b003      	add	sp, #12
 801002a:	4770      	bx	lr
 801002c:	2000052c 	.word	0x2000052c
 8010030:	ffff0208 	.word	0xffff0208

08010034 <__sread>:
 8010034:	b510      	push	{r4, lr}
 8010036:	460c      	mov	r4, r1
 8010038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801003c:	f000 f8e4 	bl	8010208 <_read_r>
 8010040:	2800      	cmp	r0, #0
 8010042:	bfab      	itete	ge
 8010044:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8010046:	89a3      	ldrhlt	r3, [r4, #12]
 8010048:	181b      	addge	r3, r3, r0
 801004a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801004e:	bfac      	ite	ge
 8010050:	6523      	strge	r3, [r4, #80]	@ 0x50
 8010052:	81a3      	strhlt	r3, [r4, #12]
 8010054:	bd10      	pop	{r4, pc}

08010056 <__swrite>:
 8010056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005a:	461f      	mov	r7, r3
 801005c:	898b      	ldrh	r3, [r1, #12]
 801005e:	05db      	lsls	r3, r3, #23
 8010060:	4605      	mov	r5, r0
 8010062:	460c      	mov	r4, r1
 8010064:	4616      	mov	r6, r2
 8010066:	d505      	bpl.n	8010074 <__swrite+0x1e>
 8010068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801006c:	2302      	movs	r3, #2
 801006e:	2200      	movs	r2, #0
 8010070:	f000 f8b8 	bl	80101e4 <_lseek_r>
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801007a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801007e:	81a3      	strh	r3, [r4, #12]
 8010080:	4632      	mov	r2, r6
 8010082:	463b      	mov	r3, r7
 8010084:	4628      	mov	r0, r5
 8010086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801008a:	f000 b8f3 	b.w	8010274 <_write_r>

0801008e <__sseek>:
 801008e:	b510      	push	{r4, lr}
 8010090:	460c      	mov	r4, r1
 8010092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010096:	f000 f8a5 	bl	80101e4 <_lseek_r>
 801009a:	1c43      	adds	r3, r0, #1
 801009c:	89a3      	ldrh	r3, [r4, #12]
 801009e:	bf15      	itete	ne
 80100a0:	6520      	strne	r0, [r4, #80]	@ 0x50
 80100a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80100a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80100aa:	81a3      	strheq	r3, [r4, #12]
 80100ac:	bf18      	it	ne
 80100ae:	81a3      	strhne	r3, [r4, #12]
 80100b0:	bd10      	pop	{r4, pc}

080100b2 <__sclose>:
 80100b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b6:	f000 b885 	b.w	80101c4 <_close_r>

080100ba <memmove>:
 80100ba:	4288      	cmp	r0, r1
 80100bc:	b510      	push	{r4, lr}
 80100be:	eb01 0402 	add.w	r4, r1, r2
 80100c2:	d902      	bls.n	80100ca <memmove+0x10>
 80100c4:	4284      	cmp	r4, r0
 80100c6:	4623      	mov	r3, r4
 80100c8:	d807      	bhi.n	80100da <memmove+0x20>
 80100ca:	1e43      	subs	r3, r0, #1
 80100cc:	42a1      	cmp	r1, r4
 80100ce:	d008      	beq.n	80100e2 <memmove+0x28>
 80100d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100d8:	e7f8      	b.n	80100cc <memmove+0x12>
 80100da:	4402      	add	r2, r0
 80100dc:	4601      	mov	r1, r0
 80100de:	428a      	cmp	r2, r1
 80100e0:	d100      	bne.n	80100e4 <memmove+0x2a>
 80100e2:	bd10      	pop	{r4, pc}
 80100e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100ec:	e7f7      	b.n	80100de <memmove+0x24>

080100ee <memset>:
 80100ee:	4402      	add	r2, r0
 80100f0:	4603      	mov	r3, r0
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d100      	bne.n	80100f8 <memset+0xa>
 80100f6:	4770      	bx	lr
 80100f8:	f803 1b01 	strb.w	r1, [r3], #1
 80100fc:	e7f9      	b.n	80100f2 <memset+0x4>
	...

08010100 <strtok>:
 8010100:	4b02      	ldr	r3, [pc, #8]	@ (801010c <strtok+0xc>)
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	2301      	movs	r3, #1
 8010106:	3250      	adds	r2, #80	@ 0x50
 8010108:	f000 b802 	b.w	8010110 <__strtok_r>
 801010c:	2000052c 	.word	0x2000052c

08010110 <__strtok_r>:
 8010110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010112:	4604      	mov	r4, r0
 8010114:	b908      	cbnz	r0, 801011a <__strtok_r+0xa>
 8010116:	6814      	ldr	r4, [r2, #0]
 8010118:	b144      	cbz	r4, 801012c <__strtok_r+0x1c>
 801011a:	4620      	mov	r0, r4
 801011c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010120:	460f      	mov	r7, r1
 8010122:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010126:	b91e      	cbnz	r6, 8010130 <__strtok_r+0x20>
 8010128:	b965      	cbnz	r5, 8010144 <__strtok_r+0x34>
 801012a:	6015      	str	r5, [r2, #0]
 801012c:	2000      	movs	r0, #0
 801012e:	e005      	b.n	801013c <__strtok_r+0x2c>
 8010130:	42b5      	cmp	r5, r6
 8010132:	d1f6      	bne.n	8010122 <__strtok_r+0x12>
 8010134:	2b00      	cmp	r3, #0
 8010136:	d1f0      	bne.n	801011a <__strtok_r+0xa>
 8010138:	6014      	str	r4, [r2, #0]
 801013a:	7003      	strb	r3, [r0, #0]
 801013c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801013e:	461c      	mov	r4, r3
 8010140:	e00c      	b.n	801015c <__strtok_r+0x4c>
 8010142:	b915      	cbnz	r5, 801014a <__strtok_r+0x3a>
 8010144:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010148:	460e      	mov	r6, r1
 801014a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801014e:	42ab      	cmp	r3, r5
 8010150:	d1f7      	bne.n	8010142 <__strtok_r+0x32>
 8010152:	2b00      	cmp	r3, #0
 8010154:	d0f3      	beq.n	801013e <__strtok_r+0x2e>
 8010156:	2300      	movs	r3, #0
 8010158:	f804 3c01 	strb.w	r3, [r4, #-1]
 801015c:	6014      	str	r4, [r2, #0]
 801015e:	e7ed      	b.n	801013c <__strtok_r+0x2c>

08010160 <_raise_r>:
 8010160:	291f      	cmp	r1, #31
 8010162:	b538      	push	{r3, r4, r5, lr}
 8010164:	4605      	mov	r5, r0
 8010166:	460c      	mov	r4, r1
 8010168:	d904      	bls.n	8010174 <_raise_r+0x14>
 801016a:	2316      	movs	r3, #22
 801016c:	6003      	str	r3, [r0, #0]
 801016e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010172:	bd38      	pop	{r3, r4, r5, pc}
 8010174:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8010178:	b112      	cbz	r2, 8010180 <_raise_r+0x20>
 801017a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801017e:	b94b      	cbnz	r3, 8010194 <_raise_r+0x34>
 8010180:	4628      	mov	r0, r5
 8010182:	f000 f865 	bl	8010250 <_getpid_r>
 8010186:	4622      	mov	r2, r4
 8010188:	4601      	mov	r1, r0
 801018a:	4628      	mov	r0, r5
 801018c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010190:	f000 b84c 	b.w	801022c <_kill_r>
 8010194:	2b01      	cmp	r3, #1
 8010196:	d00a      	beq.n	80101ae <_raise_r+0x4e>
 8010198:	1c59      	adds	r1, r3, #1
 801019a:	d103      	bne.n	80101a4 <_raise_r+0x44>
 801019c:	2316      	movs	r3, #22
 801019e:	6003      	str	r3, [r0, #0]
 80101a0:	2001      	movs	r0, #1
 80101a2:	e7e6      	b.n	8010172 <_raise_r+0x12>
 80101a4:	2100      	movs	r1, #0
 80101a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80101aa:	4620      	mov	r0, r4
 80101ac:	4798      	blx	r3
 80101ae:	2000      	movs	r0, #0
 80101b0:	e7df      	b.n	8010172 <_raise_r+0x12>
	...

080101b4 <raise>:
 80101b4:	4b02      	ldr	r3, [pc, #8]	@ (80101c0 <raise+0xc>)
 80101b6:	4601      	mov	r1, r0
 80101b8:	6818      	ldr	r0, [r3, #0]
 80101ba:	f7ff bfd1 	b.w	8010160 <_raise_r>
 80101be:	bf00      	nop
 80101c0:	2000052c 	.word	0x2000052c

080101c4 <_close_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4d06      	ldr	r5, [pc, #24]	@ (80101e0 <_close_r+0x1c>)
 80101c8:	2300      	movs	r3, #0
 80101ca:	4604      	mov	r4, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	602b      	str	r3, [r5, #0]
 80101d0:	f7f5 f804 	bl	80051dc <_close>
 80101d4:	1c43      	adds	r3, r0, #1
 80101d6:	d102      	bne.n	80101de <_close_r+0x1a>
 80101d8:	682b      	ldr	r3, [r5, #0]
 80101da:	b103      	cbz	r3, 80101de <_close_r+0x1a>
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	bd38      	pop	{r3, r4, r5, pc}
 80101e0:	2000208c 	.word	0x2000208c

080101e4 <_lseek_r>:
 80101e4:	b538      	push	{r3, r4, r5, lr}
 80101e6:	4d07      	ldr	r5, [pc, #28]	@ (8010204 <_lseek_r+0x20>)
 80101e8:	4604      	mov	r4, r0
 80101ea:	4608      	mov	r0, r1
 80101ec:	4611      	mov	r1, r2
 80101ee:	2200      	movs	r2, #0
 80101f0:	602a      	str	r2, [r5, #0]
 80101f2:	461a      	mov	r2, r3
 80101f4:	f7f5 f819 	bl	800522a <_lseek>
 80101f8:	1c43      	adds	r3, r0, #1
 80101fa:	d102      	bne.n	8010202 <_lseek_r+0x1e>
 80101fc:	682b      	ldr	r3, [r5, #0]
 80101fe:	b103      	cbz	r3, 8010202 <_lseek_r+0x1e>
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	bd38      	pop	{r3, r4, r5, pc}
 8010204:	2000208c 	.word	0x2000208c

08010208 <_read_r>:
 8010208:	b538      	push	{r3, r4, r5, lr}
 801020a:	4d07      	ldr	r5, [pc, #28]	@ (8010228 <_read_r+0x20>)
 801020c:	4604      	mov	r4, r0
 801020e:	4608      	mov	r0, r1
 8010210:	4611      	mov	r1, r2
 8010212:	2200      	movs	r2, #0
 8010214:	602a      	str	r2, [r5, #0]
 8010216:	461a      	mov	r2, r3
 8010218:	f7f4 ffa7 	bl	800516a <_read>
 801021c:	1c43      	adds	r3, r0, #1
 801021e:	d102      	bne.n	8010226 <_read_r+0x1e>
 8010220:	682b      	ldr	r3, [r5, #0]
 8010222:	b103      	cbz	r3, 8010226 <_read_r+0x1e>
 8010224:	6023      	str	r3, [r4, #0]
 8010226:	bd38      	pop	{r3, r4, r5, pc}
 8010228:	2000208c 	.word	0x2000208c

0801022c <_kill_r>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	4d07      	ldr	r5, [pc, #28]	@ (801024c <_kill_r+0x20>)
 8010230:	2300      	movs	r3, #0
 8010232:	4604      	mov	r4, r0
 8010234:	4608      	mov	r0, r1
 8010236:	4611      	mov	r1, r2
 8010238:	602b      	str	r3, [r5, #0]
 801023a:	f7f4 ff7b 	bl	8005134 <_kill>
 801023e:	1c43      	adds	r3, r0, #1
 8010240:	d102      	bne.n	8010248 <_kill_r+0x1c>
 8010242:	682b      	ldr	r3, [r5, #0]
 8010244:	b103      	cbz	r3, 8010248 <_kill_r+0x1c>
 8010246:	6023      	str	r3, [r4, #0]
 8010248:	bd38      	pop	{r3, r4, r5, pc}
 801024a:	bf00      	nop
 801024c:	2000208c 	.word	0x2000208c

08010250 <_getpid_r>:
 8010250:	f7f4 bf68 	b.w	8005124 <_getpid>

08010254 <_sbrk_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4d06      	ldr	r5, [pc, #24]	@ (8010270 <_sbrk_r+0x1c>)
 8010258:	2300      	movs	r3, #0
 801025a:	4604      	mov	r4, r0
 801025c:	4608      	mov	r0, r1
 801025e:	602b      	str	r3, [r5, #0]
 8010260:	f7f4 fff0 	bl	8005244 <_sbrk>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_sbrk_r+0x1a>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_sbrk_r+0x1a>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	2000208c 	.word	0x2000208c

08010274 <_write_r>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	4d07      	ldr	r5, [pc, #28]	@ (8010294 <_write_r+0x20>)
 8010278:	4604      	mov	r4, r0
 801027a:	4608      	mov	r0, r1
 801027c:	4611      	mov	r1, r2
 801027e:	2200      	movs	r2, #0
 8010280:	602a      	str	r2, [r5, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	f7f4 ff8e 	bl	80051a4 <_write>
 8010288:	1c43      	adds	r3, r0, #1
 801028a:	d102      	bne.n	8010292 <_write_r+0x1e>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	b103      	cbz	r3, 8010292 <_write_r+0x1e>
 8010290:	6023      	str	r3, [r4, #0]
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	2000208c 	.word	0x2000208c

08010298 <__errno>:
 8010298:	4b01      	ldr	r3, [pc, #4]	@ (80102a0 <__errno+0x8>)
 801029a:	6818      	ldr	r0, [r3, #0]
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	2000052c 	.word	0x2000052c

080102a4 <__libc_init_array>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	4d0d      	ldr	r5, [pc, #52]	@ (80102dc <__libc_init_array+0x38>)
 80102a8:	4c0d      	ldr	r4, [pc, #52]	@ (80102e0 <__libc_init_array+0x3c>)
 80102aa:	1b64      	subs	r4, r4, r5
 80102ac:	10a4      	asrs	r4, r4, #2
 80102ae:	2600      	movs	r6, #0
 80102b0:	42a6      	cmp	r6, r4
 80102b2:	d109      	bne.n	80102c8 <__libc_init_array+0x24>
 80102b4:	4d0b      	ldr	r5, [pc, #44]	@ (80102e4 <__libc_init_array+0x40>)
 80102b6:	4c0c      	ldr	r4, [pc, #48]	@ (80102e8 <__libc_init_array+0x44>)
 80102b8:	f004 f8e8 	bl	801448c <_init>
 80102bc:	1b64      	subs	r4, r4, r5
 80102be:	10a4      	asrs	r4, r4, #2
 80102c0:	2600      	movs	r6, #0
 80102c2:	42a6      	cmp	r6, r4
 80102c4:	d105      	bne.n	80102d2 <__libc_init_array+0x2e>
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80102cc:	4798      	blx	r3
 80102ce:	3601      	adds	r6, #1
 80102d0:	e7ee      	b.n	80102b0 <__libc_init_array+0xc>
 80102d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d6:	4798      	blx	r3
 80102d8:	3601      	adds	r6, #1
 80102da:	e7f2      	b.n	80102c2 <__libc_init_array+0x1e>
 80102dc:	08014948 	.word	0x08014948
 80102e0:	08014948 	.word	0x08014948
 80102e4:	08014948 	.word	0x08014948
 80102e8:	08014958 	.word	0x08014958

080102ec <__retarget_lock_init_recursive>:
 80102ec:	4770      	bx	lr

080102ee <__retarget_lock_close_recursive>:
 80102ee:	4770      	bx	lr

080102f0 <__retarget_lock_acquire_recursive>:
 80102f0:	4770      	bx	lr

080102f2 <__retarget_lock_release_recursive>:
 80102f2:	4770      	bx	lr

080102f4 <sysconf>:
 80102f4:	2808      	cmp	r0, #8
 80102f6:	b508      	push	{r3, lr}
 80102f8:	d006      	beq.n	8010308 <sysconf+0x14>
 80102fa:	f7ff ffcd 	bl	8010298 <__errno>
 80102fe:	2316      	movs	r3, #22
 8010300:	6003      	str	r3, [r0, #0]
 8010302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010306:	bd08      	pop	{r3, pc}
 8010308:	2080      	movs	r0, #128	@ 0x80
 801030a:	e7fc      	b.n	8010306 <sysconf+0x12>

0801030c <memcpy>:
 801030c:	440a      	add	r2, r1
 801030e:	4291      	cmp	r1, r2
 8010310:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010314:	d100      	bne.n	8010318 <memcpy+0xc>
 8010316:	4770      	bx	lr
 8010318:	b510      	push	{r4, lr}
 801031a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801031e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010322:	4291      	cmp	r1, r2
 8010324:	d1f9      	bne.n	801031a <memcpy+0xe>
 8010326:	bd10      	pop	{r4, pc}

08010328 <register_fini>:
 8010328:	4b02      	ldr	r3, [pc, #8]	@ (8010334 <register_fini+0xc>)
 801032a:	b113      	cbz	r3, 8010332 <register_fini+0xa>
 801032c:	4802      	ldr	r0, [pc, #8]	@ (8010338 <register_fini+0x10>)
 801032e:	f000 b805 	b.w	801033c <atexit>
 8010332:	4770      	bx	lr
 8010334:	00000000 	.word	0x00000000
 8010338:	08011b69 	.word	0x08011b69

0801033c <atexit>:
 801033c:	2300      	movs	r3, #0
 801033e:	4601      	mov	r1, r0
 8010340:	461a      	mov	r2, r3
 8010342:	4618      	mov	r0, r3
 8010344:	f001 bc5a 	b.w	8011bfc <__register_exitproc>

08010348 <_malloc_trim_r>:
 8010348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801034c:	4606      	mov	r6, r0
 801034e:	2008      	movs	r0, #8
 8010350:	4689      	mov	r9, r1
 8010352:	f7ff ffcf 	bl	80102f4 <sysconf>
 8010356:	4f24      	ldr	r7, [pc, #144]	@ (80103e8 <_malloc_trim_r+0xa0>)
 8010358:	4680      	mov	r8, r0
 801035a:	4630      	mov	r0, r6
 801035c:	f7ff fca8 	bl	800fcb0 <__malloc_lock>
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	685d      	ldr	r5, [r3, #4]
 8010364:	f025 0503 	bic.w	r5, r5, #3
 8010368:	f1a5 0411 	sub.w	r4, r5, #17
 801036c:	eba4 0409 	sub.w	r4, r4, r9
 8010370:	4444      	add	r4, r8
 8010372:	fbb4 f4f8 	udiv	r4, r4, r8
 8010376:	3c01      	subs	r4, #1
 8010378:	fb08 f404 	mul.w	r4, r8, r4
 801037c:	45a0      	cmp	r8, r4
 801037e:	dd05      	ble.n	801038c <_malloc_trim_r+0x44>
 8010380:	4630      	mov	r0, r6
 8010382:	f7ff fc9b 	bl	800fcbc <__malloc_unlock>
 8010386:	2000      	movs	r0, #0
 8010388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801038c:	2100      	movs	r1, #0
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff ff60 	bl	8010254 <_sbrk_r>
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	442b      	add	r3, r5
 8010398:	4298      	cmp	r0, r3
 801039a:	d1f1      	bne.n	8010380 <_malloc_trim_r+0x38>
 801039c:	4261      	negs	r1, r4
 801039e:	4630      	mov	r0, r6
 80103a0:	f7ff ff58 	bl	8010254 <_sbrk_r>
 80103a4:	3001      	adds	r0, #1
 80103a6:	d110      	bne.n	80103ca <_malloc_trim_r+0x82>
 80103a8:	2100      	movs	r1, #0
 80103aa:	4630      	mov	r0, r6
 80103ac:	f7ff ff52 	bl	8010254 <_sbrk_r>
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	1a83      	subs	r3, r0, r2
 80103b4:	2b0f      	cmp	r3, #15
 80103b6:	dde3      	ble.n	8010380 <_malloc_trim_r+0x38>
 80103b8:	490c      	ldr	r1, [pc, #48]	@ (80103ec <_malloc_trim_r+0xa4>)
 80103ba:	6809      	ldr	r1, [r1, #0]
 80103bc:	1a40      	subs	r0, r0, r1
 80103be:	490c      	ldr	r1, [pc, #48]	@ (80103f0 <_malloc_trim_r+0xa8>)
 80103c0:	f043 0301 	orr.w	r3, r3, #1
 80103c4:	6008      	str	r0, [r1, #0]
 80103c6:	6053      	str	r3, [r2, #4]
 80103c8:	e7da      	b.n	8010380 <_malloc_trim_r+0x38>
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	4a08      	ldr	r2, [pc, #32]	@ (80103f0 <_malloc_trim_r+0xa8>)
 80103ce:	1b2d      	subs	r5, r5, r4
 80103d0:	f045 0501 	orr.w	r5, r5, #1
 80103d4:	605d      	str	r5, [r3, #4]
 80103d6:	6813      	ldr	r3, [r2, #0]
 80103d8:	4630      	mov	r0, r6
 80103da:	1b1b      	subs	r3, r3, r4
 80103dc:	6013      	str	r3, [r2, #0]
 80103de:	f7ff fc6d 	bl	800fcbc <__malloc_unlock>
 80103e2:	2001      	movs	r0, #1
 80103e4:	e7d0      	b.n	8010388 <_malloc_trim_r+0x40>
 80103e6:	bf00      	nop
 80103e8:	20000118 	.word	0x20000118
 80103ec:	20000110 	.word	0x20000110
 80103f0:	20001f1c 	.word	0x20001f1c

080103f4 <_free_r>:
 80103f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f6:	4604      	mov	r4, r0
 80103f8:	460f      	mov	r7, r1
 80103fa:	2900      	cmp	r1, #0
 80103fc:	f000 80b1 	beq.w	8010562 <_free_r+0x16e>
 8010400:	f7ff fc56 	bl	800fcb0 <__malloc_lock>
 8010404:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010408:	4d56      	ldr	r5, [pc, #344]	@ (8010564 <_free_r+0x170>)
 801040a:	f022 0001 	bic.w	r0, r2, #1
 801040e:	f1a7 0308 	sub.w	r3, r7, #8
 8010412:	eb03 0c00 	add.w	ip, r3, r0
 8010416:	68a9      	ldr	r1, [r5, #8]
 8010418:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801041c:	4561      	cmp	r1, ip
 801041e:	f026 0603 	bic.w	r6, r6, #3
 8010422:	f002 0201 	and.w	r2, r2, #1
 8010426:	d11b      	bne.n	8010460 <_free_r+0x6c>
 8010428:	4406      	add	r6, r0
 801042a:	b93a      	cbnz	r2, 801043c <_free_r+0x48>
 801042c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8010430:	1a9b      	subs	r3, r3, r2
 8010432:	4416      	add	r6, r2
 8010434:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8010438:	60ca      	str	r2, [r1, #12]
 801043a:	6091      	str	r1, [r2, #8]
 801043c:	f046 0201 	orr.w	r2, r6, #1
 8010440:	605a      	str	r2, [r3, #4]
 8010442:	60ab      	str	r3, [r5, #8]
 8010444:	4b48      	ldr	r3, [pc, #288]	@ (8010568 <_free_r+0x174>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	42b3      	cmp	r3, r6
 801044a:	d804      	bhi.n	8010456 <_free_r+0x62>
 801044c:	4b47      	ldr	r3, [pc, #284]	@ (801056c <_free_r+0x178>)
 801044e:	4620      	mov	r0, r4
 8010450:	6819      	ldr	r1, [r3, #0]
 8010452:	f7ff ff79 	bl	8010348 <_malloc_trim_r>
 8010456:	4620      	mov	r0, r4
 8010458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801045c:	f7ff bc2e 	b.w	800fcbc <__malloc_unlock>
 8010460:	f8cc 6004 	str.w	r6, [ip, #4]
 8010464:	2a00      	cmp	r2, #0
 8010466:	d138      	bne.n	80104da <_free_r+0xe6>
 8010468:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801046c:	1a5b      	subs	r3, r3, r1
 801046e:	4408      	add	r0, r1
 8010470:	6899      	ldr	r1, [r3, #8]
 8010472:	f105 0708 	add.w	r7, r5, #8
 8010476:	42b9      	cmp	r1, r7
 8010478:	d031      	beq.n	80104de <_free_r+0xea>
 801047a:	68df      	ldr	r7, [r3, #12]
 801047c:	60cf      	str	r7, [r1, #12]
 801047e:	60b9      	str	r1, [r7, #8]
 8010480:	eb0c 0106 	add.w	r1, ip, r6
 8010484:	6849      	ldr	r1, [r1, #4]
 8010486:	07c9      	lsls	r1, r1, #31
 8010488:	d40b      	bmi.n	80104a2 <_free_r+0xae>
 801048a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801048e:	4430      	add	r0, r6
 8010490:	bb3a      	cbnz	r2, 80104e2 <_free_r+0xee>
 8010492:	4e37      	ldr	r6, [pc, #220]	@ (8010570 <_free_r+0x17c>)
 8010494:	42b1      	cmp	r1, r6
 8010496:	d124      	bne.n	80104e2 <_free_r+0xee>
 8010498:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801049c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80104a0:	2201      	movs	r2, #1
 80104a2:	f040 0101 	orr.w	r1, r0, #1
 80104a6:	6059      	str	r1, [r3, #4]
 80104a8:	5018      	str	r0, [r3, r0]
 80104aa:	2a00      	cmp	r2, #0
 80104ac:	d1d3      	bne.n	8010456 <_free_r+0x62>
 80104ae:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80104b2:	d21b      	bcs.n	80104ec <_free_r+0xf8>
 80104b4:	08c2      	lsrs	r2, r0, #3
 80104b6:	2101      	movs	r1, #1
 80104b8:	0940      	lsrs	r0, r0, #5
 80104ba:	4081      	lsls	r1, r0
 80104bc:	6868      	ldr	r0, [r5, #4]
 80104be:	3201      	adds	r2, #1
 80104c0:	4301      	orrs	r1, r0
 80104c2:	6069      	str	r1, [r5, #4]
 80104c4:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80104c8:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80104cc:	3908      	subs	r1, #8
 80104ce:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80104d2:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80104d6:	60c3      	str	r3, [r0, #12]
 80104d8:	e7bd      	b.n	8010456 <_free_r+0x62>
 80104da:	2200      	movs	r2, #0
 80104dc:	e7d0      	b.n	8010480 <_free_r+0x8c>
 80104de:	2201      	movs	r2, #1
 80104e0:	e7ce      	b.n	8010480 <_free_r+0x8c>
 80104e2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80104e6:	60ce      	str	r6, [r1, #12]
 80104e8:	60b1      	str	r1, [r6, #8]
 80104ea:	e7da      	b.n	80104a2 <_free_r+0xae>
 80104ec:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80104f0:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80104f4:	d214      	bcs.n	8010520 <_free_r+0x12c>
 80104f6:	0982      	lsrs	r2, r0, #6
 80104f8:	3238      	adds	r2, #56	@ 0x38
 80104fa:	1c51      	adds	r1, r2, #1
 80104fc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8010500:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8010504:	428e      	cmp	r6, r1
 8010506:	d125      	bne.n	8010554 <_free_r+0x160>
 8010508:	2001      	movs	r0, #1
 801050a:	1092      	asrs	r2, r2, #2
 801050c:	fa00 f202 	lsl.w	r2, r0, r2
 8010510:	6868      	ldr	r0, [r5, #4]
 8010512:	4302      	orrs	r2, r0
 8010514:	606a      	str	r2, [r5, #4]
 8010516:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801051a:	60b3      	str	r3, [r6, #8]
 801051c:	60cb      	str	r3, [r1, #12]
 801051e:	e79a      	b.n	8010456 <_free_r+0x62>
 8010520:	2a14      	cmp	r2, #20
 8010522:	d801      	bhi.n	8010528 <_free_r+0x134>
 8010524:	325b      	adds	r2, #91	@ 0x5b
 8010526:	e7e8      	b.n	80104fa <_free_r+0x106>
 8010528:	2a54      	cmp	r2, #84	@ 0x54
 801052a:	d802      	bhi.n	8010532 <_free_r+0x13e>
 801052c:	0b02      	lsrs	r2, r0, #12
 801052e:	326e      	adds	r2, #110	@ 0x6e
 8010530:	e7e3      	b.n	80104fa <_free_r+0x106>
 8010532:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010536:	d802      	bhi.n	801053e <_free_r+0x14a>
 8010538:	0bc2      	lsrs	r2, r0, #15
 801053a:	3277      	adds	r2, #119	@ 0x77
 801053c:	e7dd      	b.n	80104fa <_free_r+0x106>
 801053e:	f240 5154 	movw	r1, #1364	@ 0x554
 8010542:	428a      	cmp	r2, r1
 8010544:	bf9a      	itte	ls
 8010546:	0c82      	lsrls	r2, r0, #18
 8010548:	327c      	addls	r2, #124	@ 0x7c
 801054a:	227e      	movhi	r2, #126	@ 0x7e
 801054c:	e7d5      	b.n	80104fa <_free_r+0x106>
 801054e:	6889      	ldr	r1, [r1, #8]
 8010550:	428e      	cmp	r6, r1
 8010552:	d004      	beq.n	801055e <_free_r+0x16a>
 8010554:	684a      	ldr	r2, [r1, #4]
 8010556:	f022 0203 	bic.w	r2, r2, #3
 801055a:	4282      	cmp	r2, r0
 801055c:	d8f7      	bhi.n	801054e <_free_r+0x15a>
 801055e:	68ce      	ldr	r6, [r1, #12]
 8010560:	e7d9      	b.n	8010516 <_free_r+0x122>
 8010562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010564:	20000118 	.word	0x20000118
 8010568:	20000114 	.word	0x20000114
 801056c:	20001f4c 	.word	0x20001f4c
 8010570:	20000120 	.word	0x20000120
 8010574:	00000000 	.word	0x00000000

08010578 <_svfprintf_r>:
 8010578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801057c:	b0d3      	sub	sp, #332	@ 0x14c
 801057e:	468b      	mov	fp, r1
 8010580:	4691      	mov	r9, r2
 8010582:	461e      	mov	r6, r3
 8010584:	9003      	str	r0, [sp, #12]
 8010586:	f001 faeb 	bl	8011b60 <_localeconv_r>
 801058a:	6803      	ldr	r3, [r0, #0]
 801058c:	9316      	str	r3, [sp, #88]	@ 0x58
 801058e:	4618      	mov	r0, r3
 8010590:	f7ef fe26 	bl	80001e0 <strlen>
 8010594:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010598:	900d      	str	r0, [sp, #52]	@ 0x34
 801059a:	061b      	lsls	r3, r3, #24
 801059c:	d515      	bpl.n	80105ca <_svfprintf_r+0x52>
 801059e:	f8db 3010 	ldr.w	r3, [fp, #16]
 80105a2:	b993      	cbnz	r3, 80105ca <_svfprintf_r+0x52>
 80105a4:	9803      	ldr	r0, [sp, #12]
 80105a6:	2140      	movs	r1, #64	@ 0x40
 80105a8:	f7ff f948 	bl	800f83c <_malloc_r>
 80105ac:	f8cb 0000 	str.w	r0, [fp]
 80105b0:	f8cb 0010 	str.w	r0, [fp, #16]
 80105b4:	b930      	cbnz	r0, 80105c4 <_svfprintf_r+0x4c>
 80105b6:	9a03      	ldr	r2, [sp, #12]
 80105b8:	230c      	movs	r3, #12
 80105ba:	6013      	str	r3, [r2, #0]
 80105bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80105c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105c2:	e1f7      	b.n	80109b4 <_svfprintf_r+0x43c>
 80105c4:	2340      	movs	r3, #64	@ 0x40
 80105c6:	f8cb 3014 	str.w	r3, [fp, #20]
 80105ca:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8010818 <_svfprintf_r+0x2a0>
 80105ce:	2300      	movs	r3, #0
 80105d0:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80105d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80105d8:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80105dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80105de:	9426      	str	r4, [sp, #152]	@ 0x98
 80105e0:	9304      	str	r3, [sp, #16]
 80105e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80105e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80105e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80105e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105ea:	464b      	mov	r3, r9
 80105ec:	461d      	mov	r5, r3
 80105ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105f2:	b10a      	cbz	r2, 80105f8 <_svfprintf_r+0x80>
 80105f4:	2a25      	cmp	r2, #37	@ 0x25
 80105f6:	d1f9      	bne.n	80105ec <_svfprintf_r+0x74>
 80105f8:	ebb5 0709 	subs.w	r7, r5, r9
 80105fc:	d00d      	beq.n	801061a <_svfprintf_r+0xa2>
 80105fe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010600:	443b      	add	r3, r7
 8010602:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010604:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010606:	3301      	adds	r3, #1
 8010608:	2b07      	cmp	r3, #7
 801060a:	e9c4 9700 	strd	r9, r7, [r4]
 801060e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010610:	dc75      	bgt.n	80106fe <_svfprintf_r+0x186>
 8010612:	3408      	adds	r4, #8
 8010614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010616:	443b      	add	r3, r7
 8010618:	930f      	str	r3, [sp, #60]	@ 0x3c
 801061a:	782b      	ldrb	r3, [r5, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	f001 8148 	beq.w	80118b2 <_svfprintf_r+0x133a>
 8010622:	2200      	movs	r2, #0
 8010624:	1c6b      	adds	r3, r5, #1
 8010626:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801062a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801062e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010630:	4615      	mov	r5, r2
 8010632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010636:	9206      	str	r2, [sp, #24]
 8010638:	930c      	str	r3, [sp, #48]	@ 0x30
 801063a:	9b06      	ldr	r3, [sp, #24]
 801063c:	3b20      	subs	r3, #32
 801063e:	2b5a      	cmp	r3, #90	@ 0x5a
 8010640:	f200 85a4 	bhi.w	801118c <_svfprintf_r+0xc14>
 8010644:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010648:	05a2009d 	.word	0x05a2009d
 801064c:	00a505a2 	.word	0x00a505a2
 8010650:	05a205a2 	.word	0x05a205a2
 8010654:	008505a2 	.word	0x008505a2
 8010658:	05a205a2 	.word	0x05a205a2
 801065c:	00b200a8 	.word	0x00b200a8
 8010660:	00af05a2 	.word	0x00af05a2
 8010664:	05a200b4 	.word	0x05a200b4
 8010668:	00d100ce 	.word	0x00d100ce
 801066c:	00d100d1 	.word	0x00d100d1
 8010670:	00d100d1 	.word	0x00d100d1
 8010674:	00d100d1 	.word	0x00d100d1
 8010678:	00d100d1 	.word	0x00d100d1
 801067c:	05a205a2 	.word	0x05a205a2
 8010680:	05a205a2 	.word	0x05a205a2
 8010684:	05a205a2 	.word	0x05a205a2
 8010688:	014705a2 	.word	0x014705a2
 801068c:	010805a2 	.word	0x010805a2
 8010690:	0147011b 	.word	0x0147011b
 8010694:	01470147 	.word	0x01470147
 8010698:	05a205a2 	.word	0x05a205a2
 801069c:	05a205a2 	.word	0x05a205a2
 80106a0:	05a200e2 	.word	0x05a200e2
 80106a4:	049d05a2 	.word	0x049d05a2
 80106a8:	05a205a2 	.word	0x05a205a2
 80106ac:	04e705a2 	.word	0x04e705a2
 80106b0:	050805a2 	.word	0x050805a2
 80106b4:	05a205a2 	.word	0x05a205a2
 80106b8:	05a2052a 	.word	0x05a2052a
 80106bc:	05a205a2 	.word	0x05a205a2
 80106c0:	05a205a2 	.word	0x05a205a2
 80106c4:	05a205a2 	.word	0x05a205a2
 80106c8:	014705a2 	.word	0x014705a2
 80106cc:	010805a2 	.word	0x010805a2
 80106d0:	0147011d 	.word	0x0147011d
 80106d4:	01470147 	.word	0x01470147
 80106d8:	011d00ee 	.word	0x011d00ee
 80106dc:	05a20102 	.word	0x05a20102
 80106e0:	05a200fb 	.word	0x05a200fb
 80106e4:	049f047e 	.word	0x049f047e
 80106e8:	010204d6 	.word	0x010204d6
 80106ec:	04e705a2 	.word	0x04e705a2
 80106f0:	050a009b 	.word	0x050a009b
 80106f4:	05a205a2 	.word	0x05a205a2
 80106f8:	05a20065 	.word	0x05a20065
 80106fc:	009b      	.short	0x009b
 80106fe:	9803      	ldr	r0, [sp, #12]
 8010700:	aa26      	add	r2, sp, #152	@ 0x98
 8010702:	4659      	mov	r1, fp
 8010704:	f002 fc24 	bl	8012f50 <__ssprint_r>
 8010708:	2800      	cmp	r0, #0
 801070a:	f040 814e 	bne.w	80109aa <_svfprintf_r+0x432>
 801070e:	ac29      	add	r4, sp, #164	@ 0xa4
 8010710:	e780      	b.n	8010614 <_svfprintf_r+0x9c>
 8010712:	4b43      	ldr	r3, [pc, #268]	@ (8010820 <_svfprintf_r+0x2a8>)
 8010714:	9319      	str	r3, [sp, #100]	@ 0x64
 8010716:	f015 0320 	ands.w	r3, r5, #32
 801071a:	f000 84c2 	beq.w	80110a2 <_svfprintf_r+0xb2a>
 801071e:	3607      	adds	r6, #7
 8010720:	f026 0307 	bic.w	r3, r6, #7
 8010724:	461a      	mov	r2, r3
 8010726:	685f      	ldr	r7, [r3, #4]
 8010728:	f852 6b08 	ldr.w	r6, [r2], #8
 801072c:	9207      	str	r2, [sp, #28]
 801072e:	07eb      	lsls	r3, r5, #31
 8010730:	d50a      	bpl.n	8010748 <_svfprintf_r+0x1d0>
 8010732:	ea56 0307 	orrs.w	r3, r6, r7
 8010736:	d007      	beq.n	8010748 <_svfprintf_r+0x1d0>
 8010738:	2330      	movs	r3, #48	@ 0x30
 801073a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801073e:	9b06      	ldr	r3, [sp, #24]
 8010740:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8010744:	f045 0502 	orr.w	r5, r5, #2
 8010748:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801074c:	2302      	movs	r3, #2
 801074e:	f000 bc28 	b.w	8010fa2 <_svfprintf_r+0xa2a>
 8010752:	9803      	ldr	r0, [sp, #12]
 8010754:	f001 fa04 	bl	8011b60 <_localeconv_r>
 8010758:	6843      	ldr	r3, [r0, #4]
 801075a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801075c:	4618      	mov	r0, r3
 801075e:	f7ef fd3f 	bl	80001e0 <strlen>
 8010762:	9012      	str	r0, [sp, #72]	@ 0x48
 8010764:	9803      	ldr	r0, [sp, #12]
 8010766:	f001 f9fb 	bl	8011b60 <_localeconv_r>
 801076a:	6883      	ldr	r3, [r0, #8]
 801076c:	9309      	str	r3, [sp, #36]	@ 0x24
 801076e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010770:	b12b      	cbz	r3, 801077e <_svfprintf_r+0x206>
 8010772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010774:	b11b      	cbz	r3, 801077e <_svfprintf_r+0x206>
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	b10b      	cbz	r3, 801077e <_svfprintf_r+0x206>
 801077a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801077e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010780:	e757      	b.n	8010632 <_svfprintf_r+0xba>
 8010782:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1f9      	bne.n	801077e <_svfprintf_r+0x206>
 801078a:	2320      	movs	r3, #32
 801078c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010790:	e7f5      	b.n	801077e <_svfprintf_r+0x206>
 8010792:	f045 0501 	orr.w	r5, r5, #1
 8010796:	e7f2      	b.n	801077e <_svfprintf_r+0x206>
 8010798:	f856 3b04 	ldr.w	r3, [r6], #4
 801079c:	930e      	str	r3, [sp, #56]	@ 0x38
 801079e:	2b00      	cmp	r3, #0
 80107a0:	daed      	bge.n	801077e <_svfprintf_r+0x206>
 80107a2:	425b      	negs	r3, r3
 80107a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80107a6:	f045 0504 	orr.w	r5, r5, #4
 80107aa:	e7e8      	b.n	801077e <_svfprintf_r+0x206>
 80107ac:	232b      	movs	r3, #43	@ 0x2b
 80107ae:	e7ed      	b.n	801078c <_svfprintf_r+0x214>
 80107b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107b6:	9206      	str	r2, [sp, #24]
 80107b8:	2a2a      	cmp	r2, #42	@ 0x2a
 80107ba:	d10f      	bne.n	80107dc <_svfprintf_r+0x264>
 80107bc:	f856 2b04 	ldr.w	r2, [r6], #4
 80107c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80107c2:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80107c6:	e7da      	b.n	801077e <_svfprintf_r+0x206>
 80107c8:	fb01 2808 	mla	r8, r1, r8, r2
 80107cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107d0:	9206      	str	r2, [sp, #24]
 80107d2:	9a06      	ldr	r2, [sp, #24]
 80107d4:	3a30      	subs	r2, #48	@ 0x30
 80107d6:	2a09      	cmp	r2, #9
 80107d8:	d9f6      	bls.n	80107c8 <_svfprintf_r+0x250>
 80107da:	e72d      	b.n	8010638 <_svfprintf_r+0xc0>
 80107dc:	f04f 0800 	mov.w	r8, #0
 80107e0:	210a      	movs	r1, #10
 80107e2:	e7f6      	b.n	80107d2 <_svfprintf_r+0x25a>
 80107e4:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80107e8:	e7c9      	b.n	801077e <_svfprintf_r+0x206>
 80107ea:	2200      	movs	r2, #0
 80107ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80107f0:	210a      	movs	r1, #10
 80107f2:	9a06      	ldr	r2, [sp, #24]
 80107f4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80107f6:	3a30      	subs	r2, #48	@ 0x30
 80107f8:	fb01 2200 	mla	r2, r1, r0, r2
 80107fc:	920e      	str	r2, [sp, #56]	@ 0x38
 80107fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010802:	9206      	str	r2, [sp, #24]
 8010804:	3a30      	subs	r2, #48	@ 0x30
 8010806:	2a09      	cmp	r2, #9
 8010808:	d9f3      	bls.n	80107f2 <_svfprintf_r+0x27a>
 801080a:	e715      	b.n	8010638 <_svfprintf_r+0xc0>
 801080c:	f045 0508 	orr.w	r5, r5, #8
 8010810:	e7b5      	b.n	801077e <_svfprintf_r+0x206>
 8010812:	bf00      	nop
 8010814:	f3af 8000 	nop.w
	...
 8010820:	080146c9 	.word	0x080146c9
 8010824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	2b68      	cmp	r3, #104	@ 0x68
 801082a:	bf01      	itttt	eq
 801082c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801082e:	3301      	addeq	r3, #1
 8010830:	930c      	streq	r3, [sp, #48]	@ 0x30
 8010832:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8010836:	bf18      	it	ne
 8010838:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801083c:	e79f      	b.n	801077e <_svfprintf_r+0x206>
 801083e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	2b6c      	cmp	r3, #108	@ 0x6c
 8010844:	d105      	bne.n	8010852 <_svfprintf_r+0x2da>
 8010846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010848:	3301      	adds	r3, #1
 801084a:	930c      	str	r3, [sp, #48]	@ 0x30
 801084c:	f045 0520 	orr.w	r5, r5, #32
 8010850:	e795      	b.n	801077e <_svfprintf_r+0x206>
 8010852:	f045 0510 	orr.w	r5, r5, #16
 8010856:	e792      	b.n	801077e <_svfprintf_r+0x206>
 8010858:	4632      	mov	r2, r6
 801085a:	f852 3b04 	ldr.w	r3, [r2], #4
 801085e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8010862:	2300      	movs	r3, #0
 8010864:	9207      	str	r2, [sp, #28]
 8010866:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801086a:	469a      	mov	sl, r3
 801086c:	f04f 0801 	mov.w	r8, #1
 8010870:	9310      	str	r3, [sp, #64]	@ 0x40
 8010872:	461f      	mov	r7, r3
 8010874:	9308      	str	r3, [sp, #32]
 8010876:	461e      	mov	r6, r3
 8010878:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801087c:	e1d2      	b.n	8010c24 <_svfprintf_r+0x6ac>
 801087e:	f045 0510 	orr.w	r5, r5, #16
 8010882:	06af      	lsls	r7, r5, #26
 8010884:	d512      	bpl.n	80108ac <_svfprintf_r+0x334>
 8010886:	3607      	adds	r6, #7
 8010888:	f026 0307 	bic.w	r3, r6, #7
 801088c:	461a      	mov	r2, r3
 801088e:	685f      	ldr	r7, [r3, #4]
 8010890:	f852 6b08 	ldr.w	r6, [r2], #8
 8010894:	9207      	str	r2, [sp, #28]
 8010896:	2f00      	cmp	r7, #0
 8010898:	da06      	bge.n	80108a8 <_svfprintf_r+0x330>
 801089a:	4276      	negs	r6, r6
 801089c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80108a0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80108a4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80108a8:	2301      	movs	r3, #1
 80108aa:	e37d      	b.n	8010fa8 <_svfprintf_r+0xa30>
 80108ac:	4633      	mov	r3, r6
 80108ae:	06ee      	lsls	r6, r5, #27
 80108b0:	f853 7b04 	ldr.w	r7, [r3], #4
 80108b4:	9307      	str	r3, [sp, #28]
 80108b6:	d502      	bpl.n	80108be <_svfprintf_r+0x346>
 80108b8:	463e      	mov	r6, r7
 80108ba:	17ff      	asrs	r7, r7, #31
 80108bc:	e7eb      	b.n	8010896 <_svfprintf_r+0x31e>
 80108be:	0668      	lsls	r0, r5, #25
 80108c0:	d503      	bpl.n	80108ca <_svfprintf_r+0x352>
 80108c2:	b23e      	sxth	r6, r7
 80108c4:	f347 37c0 	sbfx	r7, r7, #15, #1
 80108c8:	e7e5      	b.n	8010896 <_svfprintf_r+0x31e>
 80108ca:	05a9      	lsls	r1, r5, #22
 80108cc:	d5f4      	bpl.n	80108b8 <_svfprintf_r+0x340>
 80108ce:	b27e      	sxtb	r6, r7
 80108d0:	f347 17c0 	sbfx	r7, r7, #7, #1
 80108d4:	e7df      	b.n	8010896 <_svfprintf_r+0x31e>
 80108d6:	3607      	adds	r6, #7
 80108d8:	f026 0307 	bic.w	r3, r6, #7
 80108dc:	ecb3 7b02 	vldmia	r3!, {d7}
 80108e0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80108e4:	9307      	str	r3, [sp, #28]
 80108e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80108ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80108f2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80108f6:	4b81      	ldr	r3, [pc, #516]	@ (8010afc <_svfprintf_r+0x584>)
 80108f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80108fc:	f7f0 f91e 	bl	8000b3c <__aeabi_dcmpun>
 8010900:	bb10      	cbnz	r0, 8010948 <_svfprintf_r+0x3d0>
 8010902:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8010906:	4b7d      	ldr	r3, [pc, #500]	@ (8010afc <_svfprintf_r+0x584>)
 8010908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801090c:	f7f0 f8f8 	bl	8000b00 <__aeabi_dcmple>
 8010910:	b9d0      	cbnz	r0, 8010948 <_svfprintf_r+0x3d0>
 8010912:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010916:	2200      	movs	r2, #0
 8010918:	2300      	movs	r3, #0
 801091a:	f7f0 f8e7 	bl	8000aec <__aeabi_dcmplt>
 801091e:	b110      	cbz	r0, 8010926 <_svfprintf_r+0x3ae>
 8010920:	232d      	movs	r3, #45	@ 0x2d
 8010922:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010926:	4a76      	ldr	r2, [pc, #472]	@ (8010b00 <_svfprintf_r+0x588>)
 8010928:	4b76      	ldr	r3, [pc, #472]	@ (8010b04 <_svfprintf_r+0x58c>)
 801092a:	9906      	ldr	r1, [sp, #24]
 801092c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8010930:	2947      	cmp	r1, #71	@ 0x47
 8010932:	bfd4      	ite	le
 8010934:	4691      	movle	r9, r2
 8010936:	4699      	movgt	r9, r3
 8010938:	f04f 0a00 	mov.w	sl, #0
 801093c:	f04f 0803 	mov.w	r8, #3
 8010940:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8010944:	f000 bfec 	b.w	8011920 <_svfprintf_r+0x13a8>
 8010948:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801094c:	4610      	mov	r0, r2
 801094e:	4619      	mov	r1, r3
 8010950:	f7f0 f8f4 	bl	8000b3c <__aeabi_dcmpun>
 8010954:	4682      	mov	sl, r0
 8010956:	b140      	cbz	r0, 801096a <_svfprintf_r+0x3f2>
 8010958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801095a:	4a6b      	ldr	r2, [pc, #428]	@ (8010b08 <_svfprintf_r+0x590>)
 801095c:	2b00      	cmp	r3, #0
 801095e:	bfbc      	itt	lt
 8010960:	232d      	movlt	r3, #45	@ 0x2d
 8010962:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8010966:	4b69      	ldr	r3, [pc, #420]	@ (8010b0c <_svfprintf_r+0x594>)
 8010968:	e7df      	b.n	801092a <_svfprintf_r+0x3b2>
 801096a:	9b06      	ldr	r3, [sp, #24]
 801096c:	2b61      	cmp	r3, #97	@ 0x61
 801096e:	d025      	beq.n	80109bc <_svfprintf_r+0x444>
 8010970:	2b41      	cmp	r3, #65	@ 0x41
 8010972:	d125      	bne.n	80109c0 <_svfprintf_r+0x448>
 8010974:	2358      	movs	r3, #88	@ 0x58
 8010976:	2230      	movs	r2, #48	@ 0x30
 8010978:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801097c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8010980:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8010984:	f045 0502 	orr.w	r5, r5, #2
 8010988:	f340 80a5 	ble.w	8010ad6 <_svfprintf_r+0x55e>
 801098c:	9803      	ldr	r0, [sp, #12]
 801098e:	f108 0101 	add.w	r1, r8, #1
 8010992:	f7fe ff53 	bl	800f83c <_malloc_r>
 8010996:	4681      	mov	r9, r0
 8010998:	2800      	cmp	r0, #0
 801099a:	f040 80a1 	bne.w	8010ae0 <_svfprintf_r+0x568>
 801099e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80109a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109a6:	f8ab 300c 	strh.w	r3, [fp, #12]
 80109aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80109ae:	065b      	lsls	r3, r3, #25
 80109b0:	f53f ae04 	bmi.w	80105bc <_svfprintf_r+0x44>
 80109b4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80109b6:	b053      	add	sp, #332	@ 0x14c
 80109b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109bc:	2378      	movs	r3, #120	@ 0x78
 80109be:	e7da      	b.n	8010976 <_svfprintf_r+0x3fe>
 80109c0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80109c4:	f000 808e 	beq.w	8010ae4 <_svfprintf_r+0x56c>
 80109c8:	9b06      	ldr	r3, [sp, #24]
 80109ca:	f023 0320 	bic.w	r3, r3, #32
 80109ce:	2b47      	cmp	r3, #71	@ 0x47
 80109d0:	d105      	bne.n	80109de <_svfprintf_r+0x466>
 80109d2:	f1b8 0f00 	cmp.w	r8, #0
 80109d6:	d102      	bne.n	80109de <_svfprintf_r+0x466>
 80109d8:	46c2      	mov	sl, r8
 80109da:	f04f 0801 	mov.w	r8, #1
 80109de:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80109e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80109e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	da7f      	bge.n	8010aea <_svfprintf_r+0x572>
 80109ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80109ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109f0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80109f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80109f6:	232d      	movs	r3, #45	@ 0x2d
 80109f8:	931c      	str	r3, [sp, #112]	@ 0x70
 80109fa:	9b06      	ldr	r3, [sp, #24]
 80109fc:	f023 0320 	bic.w	r3, r3, #32
 8010a00:	2b41      	cmp	r3, #65	@ 0x41
 8010a02:	9308      	str	r3, [sp, #32]
 8010a04:	f040 81e6 	bne.w	8010dd4 <_svfprintf_r+0x85c>
 8010a08:	a820      	add	r0, sp, #128	@ 0x80
 8010a0a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8010a0e:	f001 f8bf 	bl	8011b90 <frexp>
 8010a12:	2200      	movs	r2, #0
 8010a14:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010a18:	ec51 0b10 	vmov	r0, r1, d0
 8010a1c:	f7ef fdf4 	bl	8000608 <__aeabi_dmul>
 8010a20:	4602      	mov	r2, r0
 8010a22:	460b      	mov	r3, r1
 8010a24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	f7f0 f854 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a30:	b108      	cbz	r0, 8010a36 <_svfprintf_r+0x4be>
 8010a32:	2301      	movs	r3, #1
 8010a34:	9320      	str	r3, [sp, #128]	@ 0x80
 8010a36:	4a36      	ldr	r2, [pc, #216]	@ (8010b10 <_svfprintf_r+0x598>)
 8010a38:	4b36      	ldr	r3, [pc, #216]	@ (8010b14 <_svfprintf_r+0x59c>)
 8010a3a:	9906      	ldr	r1, [sp, #24]
 8010a3c:	2961      	cmp	r1, #97	@ 0x61
 8010a3e:	bf18      	it	ne
 8010a40:	461a      	movne	r2, r3
 8010a42:	9210      	str	r2, [sp, #64]	@ 0x40
 8010a44:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8010a48:	464e      	mov	r6, r9
 8010a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a4e:	4b32      	ldr	r3, [pc, #200]	@ (8010b18 <_svfprintf_r+0x5a0>)
 8010a50:	2200      	movs	r2, #0
 8010a52:	f7ef fdd9 	bl	8000608 <__aeabi_dmul>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a5e:	f7f0 f883 	bl	8000b68 <__aeabi_d2iz>
 8010a62:	9013      	str	r0, [sp, #76]	@ 0x4c
 8010a64:	f7ef fd66 	bl	8000534 <__aeabi_i2d>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a70:	f7ef fc12 	bl	8000298 <__aeabi_dsub>
 8010a74:	4602      	mov	r2, r0
 8010a76:	460b      	mov	r3, r1
 8010a78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a7c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010a7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a80:	5c9b      	ldrb	r3, [r3, r2]
 8010a82:	f806 3b01 	strb.w	r3, [r6], #1
 8010a86:	1c7a      	adds	r2, r7, #1
 8010a88:	d006      	beq.n	8010a98 <_svfprintf_r+0x520>
 8010a8a:	1e7b      	subs	r3, r7, #1
 8010a8c:	931d      	str	r3, [sp, #116]	@ 0x74
 8010a8e:	2200      	movs	r2, #0
 8010a90:	2300      	movs	r3, #0
 8010a92:	f7f0 f821 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a96:	b370      	cbz	r0, 8010af6 <_svfprintf_r+0x57e>
 8010a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8010b1c <_svfprintf_r+0x5a4>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f7f0 f842 	bl	8000b28 <__aeabi_dcmpgt>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d13b      	bne.n	8010b20 <_svfprintf_r+0x5a8>
 8010aa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010aac:	4b1b      	ldr	r3, [pc, #108]	@ (8010b1c <_svfprintf_r+0x5a4>)
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f7f0 f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ab4:	b110      	cbz	r0, 8010abc <_svfprintf_r+0x544>
 8010ab6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010ab8:	07db      	lsls	r3, r3, #31
 8010aba:	d431      	bmi.n	8010b20 <_svfprintf_r+0x5a8>
 8010abc:	4633      	mov	r3, r6
 8010abe:	19f1      	adds	r1, r6, r7
 8010ac0:	2030      	movs	r0, #48	@ 0x30
 8010ac2:	1aca      	subs	r2, r1, r3
 8010ac4:	2a00      	cmp	r2, #0
 8010ac6:	f280 8182 	bge.w	8010dce <_svfprintf_r+0x856>
 8010aca:	1c7b      	adds	r3, r7, #1
 8010acc:	3701      	adds	r7, #1
 8010ace:	bfb8      	it	lt
 8010ad0:	2300      	movlt	r3, #0
 8010ad2:	441e      	add	r6, r3
 8010ad4:	e038      	b.n	8010b48 <_svfprintf_r+0x5d0>
 8010ad6:	f04f 0a00 	mov.w	sl, #0
 8010ada:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8010ade:	e77e      	b.n	80109de <_svfprintf_r+0x466>
 8010ae0:	4682      	mov	sl, r0
 8010ae2:	e77c      	b.n	80109de <_svfprintf_r+0x466>
 8010ae4:	f04f 0806 	mov.w	r8, #6
 8010ae8:	e779      	b.n	80109de <_svfprintf_r+0x466>
 8010aea:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8010aee:	2300      	movs	r3, #0
 8010af0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8010af4:	e780      	b.n	80109f8 <_svfprintf_r+0x480>
 8010af6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8010af8:	e7a7      	b.n	8010a4a <_svfprintf_r+0x4d2>
 8010afa:	bf00      	nop
 8010afc:	7fefffff 	.word	0x7fefffff
 8010b00:	080146b9 	.word	0x080146b9
 8010b04:	080146bd 	.word	0x080146bd
 8010b08:	080146c1 	.word	0x080146c1
 8010b0c:	080146c5 	.word	0x080146c5
 8010b10:	080146c9 	.word	0x080146c9
 8010b14:	080146da 	.word	0x080146da
 8010b18:	40300000 	.word	0x40300000
 8010b1c:	3fe00000 	.word	0x3fe00000
 8010b20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b22:	9624      	str	r6, [sp, #144]	@ 0x90
 8010b24:	7bd9      	ldrb	r1, [r3, #15]
 8010b26:	2030      	movs	r0, #48	@ 0x30
 8010b28:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010b2a:	1e53      	subs	r3, r2, #1
 8010b2c:	9324      	str	r3, [sp, #144]	@ 0x90
 8010b2e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8010b32:	428b      	cmp	r3, r1
 8010b34:	f000 8148 	beq.w	8010dc8 <_svfprintf_r+0x850>
 8010b38:	2b39      	cmp	r3, #57	@ 0x39
 8010b3a:	bf0b      	itete	eq
 8010b3c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8010b3e:	3301      	addne	r3, #1
 8010b40:	7a9b      	ldrbeq	r3, [r3, #10]
 8010b42:	b2db      	uxtbne	r3, r3
 8010b44:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010b48:	eba6 0309 	sub.w	r3, r6, r9
 8010b4c:	9304      	str	r3, [sp, #16]
 8010b4e:	9b08      	ldr	r3, [sp, #32]
 8010b50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010b52:	2b47      	cmp	r3, #71	@ 0x47
 8010b54:	f040 8187 	bne.w	8010e66 <_svfprintf_r+0x8ee>
 8010b58:	1cf1      	adds	r1, r6, #3
 8010b5a:	db02      	blt.n	8010b62 <_svfprintf_r+0x5ea>
 8010b5c:	4546      	cmp	r6, r8
 8010b5e:	f340 81a5 	ble.w	8010eac <_svfprintf_r+0x934>
 8010b62:	9b06      	ldr	r3, [sp, #24]
 8010b64:	3b02      	subs	r3, #2
 8010b66:	9306      	str	r3, [sp, #24]
 8010b68:	9906      	ldr	r1, [sp, #24]
 8010b6a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8010b6e:	f021 0120 	bic.w	r1, r1, #32
 8010b72:	2941      	cmp	r1, #65	@ 0x41
 8010b74:	bf08      	it	eq
 8010b76:	320f      	addeq	r2, #15
 8010b78:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8010b7c:	bf06      	itte	eq
 8010b7e:	b2d2      	uxtbeq	r2, r2
 8010b80:	2101      	moveq	r1, #1
 8010b82:	2100      	movne	r1, #0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	9320      	str	r3, [sp, #128]	@ 0x80
 8010b88:	bfb8      	it	lt
 8010b8a:	f1c6 0301 	rsblt	r3, r6, #1
 8010b8e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8010b92:	bfb4      	ite	lt
 8010b94:	222d      	movlt	r2, #45	@ 0x2d
 8010b96:	222b      	movge	r2, #43	@ 0x2b
 8010b98:	2b09      	cmp	r3, #9
 8010b9a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8010b9e:	f340 8178 	ble.w	8010e92 <_svfprintf_r+0x91a>
 8010ba2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8010ba6:	270a      	movs	r7, #10
 8010ba8:	4602      	mov	r2, r0
 8010baa:	fbb3 f6f7 	udiv	r6, r3, r7
 8010bae:	fb07 3116 	mls	r1, r7, r6, r3
 8010bb2:	3130      	adds	r1, #48	@ 0x30
 8010bb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	2963      	cmp	r1, #99	@ 0x63
 8010bbc:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8010bc0:	4633      	mov	r3, r6
 8010bc2:	dcf1      	bgt.n	8010ba8 <_svfprintf_r+0x630>
 8010bc4:	3330      	adds	r3, #48	@ 0x30
 8010bc6:	1e91      	subs	r1, r2, #2
 8010bc8:	f800 3c01 	strb.w	r3, [r0, #-1]
 8010bcc:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8010bd6:	4283      	cmp	r3, r0
 8010bd8:	f0c0 8156 	bcc.w	8010e88 <_svfprintf_r+0x910>
 8010bdc:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8010be0:	1a9b      	subs	r3, r3, r2
 8010be2:	4281      	cmp	r1, r0
 8010be4:	bf88      	it	hi
 8010be6:	2300      	movhi	r3, #0
 8010be8:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8010bec:	441a      	add	r2, r3
 8010bee:	ab22      	add	r3, sp, #136	@ 0x88
 8010bf0:	1ad3      	subs	r3, r2, r3
 8010bf2:	9a04      	ldr	r2, [sp, #16]
 8010bf4:	9318      	str	r3, [sp, #96]	@ 0x60
 8010bf6:	2a01      	cmp	r2, #1
 8010bf8:	eb03 0802 	add.w	r8, r3, r2
 8010bfc:	dc01      	bgt.n	8010c02 <_svfprintf_r+0x68a>
 8010bfe:	07ea      	lsls	r2, r5, #31
 8010c00:	d501      	bpl.n	8010c06 <_svfprintf_r+0x68e>
 8010c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c04:	4498      	add	r8, r3
 8010c06:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010c0a:	2700      	movs	r7, #0
 8010c0c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8010c10:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c12:	9708      	str	r7, [sp, #32]
 8010c14:	463e      	mov	r6, r7
 8010c16:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f040 818f 	bne.w	8010f3c <_svfprintf_r+0x9c4>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010c22:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c26:	4543      	cmp	r3, r8
 8010c28:	bfb8      	it	lt
 8010c2a:	4643      	movlt	r3, r8
 8010c2c:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c2e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8010c32:	b113      	cbz	r3, 8010c3a <_svfprintf_r+0x6c2>
 8010c34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c36:	3301      	adds	r3, #1
 8010c38:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c3a:	f015 0302 	ands.w	r3, r5, #2
 8010c3e:	931c      	str	r3, [sp, #112]	@ 0x70
 8010c40:	bf1e      	ittt	ne
 8010c42:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8010c44:	3302      	addne	r3, #2
 8010c46:	9311      	strne	r3, [sp, #68]	@ 0x44
 8010c48:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8010c4c:	931d      	str	r3, [sp, #116]	@ 0x74
 8010c4e:	d122      	bne.n	8010c96 <_svfprintf_r+0x71e>
 8010c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c52:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010c54:	1a9b      	subs	r3, r3, r2
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c5a:	dd1c      	ble.n	8010c96 <_svfprintf_r+0x71e>
 8010c5c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010c5e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010c62:	2810      	cmp	r0, #16
 8010c64:	489e      	ldr	r0, [pc, #632]	@ (8010ee0 <_svfprintf_r+0x968>)
 8010c66:	6020      	str	r0, [r4, #0]
 8010c68:	f102 0201 	add.w	r2, r2, #1
 8010c6c:	f104 0108 	add.w	r1, r4, #8
 8010c70:	f300 8298 	bgt.w	80111a4 <_svfprintf_r+0xc2c>
 8010c74:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010c76:	6060      	str	r0, [r4, #4]
 8010c78:	4403      	add	r3, r0
 8010c7a:	2a07      	cmp	r2, #7
 8010c7c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010c80:	f340 82a5 	ble.w	80111ce <_svfprintf_r+0xc56>
 8010c84:	9803      	ldr	r0, [sp, #12]
 8010c86:	aa26      	add	r2, sp, #152	@ 0x98
 8010c88:	4659      	mov	r1, fp
 8010c8a:	f002 f961 	bl	8012f50 <__ssprint_r>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	f040 85ed 	bne.w	801186e <_svfprintf_r+0x12f6>
 8010c94:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c96:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8010c9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010c9c:	b16a      	cbz	r2, 8010cba <_svfprintf_r+0x742>
 8010c9e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8010ca2:	6022      	str	r2, [r4, #0]
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	4413      	add	r3, r2
 8010ca8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010caa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010cac:	6062      	str	r2, [r4, #4]
 8010cae:	4413      	add	r3, r2
 8010cb0:	2b07      	cmp	r3, #7
 8010cb2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010cb4:	f300 828d 	bgt.w	80111d2 <_svfprintf_r+0xc5a>
 8010cb8:	3408      	adds	r4, #8
 8010cba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010cbc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010cbe:	b162      	cbz	r2, 8010cda <_svfprintf_r+0x762>
 8010cc0:	aa1f      	add	r2, sp, #124	@ 0x7c
 8010cc2:	6022      	str	r2, [r4, #0]
 8010cc4:	2202      	movs	r2, #2
 8010cc6:	4413      	add	r3, r2
 8010cc8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010cca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010ccc:	6062      	str	r2, [r4, #4]
 8010cce:	3301      	adds	r3, #1
 8010cd0:	2b07      	cmp	r3, #7
 8010cd2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010cd4:	f300 8287 	bgt.w	80111e6 <_svfprintf_r+0xc6e>
 8010cd8:	3408      	adds	r4, #8
 8010cda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010cdc:	2b80      	cmp	r3, #128	@ 0x80
 8010cde:	d122      	bne.n	8010d26 <_svfprintf_r+0x7ae>
 8010ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ce2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010ce4:	1a9b      	subs	r3, r3, r2
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010cea:	dd1c      	ble.n	8010d26 <_svfprintf_r+0x7ae>
 8010cec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010cee:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010cf2:	2810      	cmp	r0, #16
 8010cf4:	487b      	ldr	r0, [pc, #492]	@ (8010ee4 <_svfprintf_r+0x96c>)
 8010cf6:	6020      	str	r0, [r4, #0]
 8010cf8:	f102 0201 	add.w	r2, r2, #1
 8010cfc:	f104 0108 	add.w	r1, r4, #8
 8010d00:	f300 827b 	bgt.w	80111fa <_svfprintf_r+0xc82>
 8010d04:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010d06:	6060      	str	r0, [r4, #4]
 8010d08:	4403      	add	r3, r0
 8010d0a:	2a07      	cmp	r2, #7
 8010d0c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010d10:	f340 8288 	ble.w	8011224 <_svfprintf_r+0xcac>
 8010d14:	9803      	ldr	r0, [sp, #12]
 8010d16:	aa26      	add	r2, sp, #152	@ 0x98
 8010d18:	4659      	mov	r1, fp
 8010d1a:	f002 f919 	bl	8012f50 <__ssprint_r>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	f040 85a5 	bne.w	801186e <_svfprintf_r+0x12f6>
 8010d24:	ac29      	add	r4, sp, #164	@ 0xa4
 8010d26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d28:	eba3 0308 	sub.w	r3, r3, r8
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d30:	dd1c      	ble.n	8010d6c <_svfprintf_r+0x7f4>
 8010d32:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010d34:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010d38:	2810      	cmp	r0, #16
 8010d3a:	486a      	ldr	r0, [pc, #424]	@ (8010ee4 <_svfprintf_r+0x96c>)
 8010d3c:	6020      	str	r0, [r4, #0]
 8010d3e:	f102 0201 	add.w	r2, r2, #1
 8010d42:	f104 0108 	add.w	r1, r4, #8
 8010d46:	f300 826f 	bgt.w	8011228 <_svfprintf_r+0xcb0>
 8010d4a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010d4c:	6060      	str	r0, [r4, #4]
 8010d4e:	4403      	add	r3, r0
 8010d50:	2a07      	cmp	r2, #7
 8010d52:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010d56:	f340 827c 	ble.w	8011252 <_svfprintf_r+0xcda>
 8010d5a:	9803      	ldr	r0, [sp, #12]
 8010d5c:	aa26      	add	r2, sp, #152	@ 0x98
 8010d5e:	4659      	mov	r1, fp
 8010d60:	f002 f8f6 	bl	8012f50 <__ssprint_r>
 8010d64:	2800      	cmp	r0, #0
 8010d66:	f040 8582 	bne.w	801186e <_svfprintf_r+0x12f6>
 8010d6a:	ac29      	add	r4, sp, #164	@ 0xa4
 8010d6c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010d6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d70:	05ea      	lsls	r2, r5, #23
 8010d72:	f100 8275 	bmi.w	8011260 <_svfprintf_r+0xce8>
 8010d76:	4443      	add	r3, r8
 8010d78:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010d7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	2b07      	cmp	r3, #7
 8010d80:	e9c4 9800 	strd	r9, r8, [r4]
 8010d84:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010d86:	f300 82b1 	bgt.w	80112ec <_svfprintf_r+0xd74>
 8010d8a:	3408      	adds	r4, #8
 8010d8c:	076a      	lsls	r2, r5, #29
 8010d8e:	f100 8550 	bmi.w	8011832 <_svfprintf_r+0x12ba>
 8010d92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010d96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010d98:	428a      	cmp	r2, r1
 8010d9a:	bfac      	ite	ge
 8010d9c:	189b      	addge	r3, r3, r2
 8010d9e:	185b      	addlt	r3, r3, r1
 8010da0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010da2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010da4:	b13b      	cbz	r3, 8010db6 <_svfprintf_r+0x83e>
 8010da6:	9803      	ldr	r0, [sp, #12]
 8010da8:	aa26      	add	r2, sp, #152	@ 0x98
 8010daa:	4659      	mov	r1, fp
 8010dac:	f002 f8d0 	bl	8012f50 <__ssprint_r>
 8010db0:	2800      	cmp	r0, #0
 8010db2:	f040 855c 	bne.w	801186e <_svfprintf_r+0x12f6>
 8010db6:	2300      	movs	r3, #0
 8010db8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010dba:	f1ba 0f00 	cmp.w	sl, #0
 8010dbe:	f040 8572 	bne.w	80118a6 <_svfprintf_r+0x132e>
 8010dc2:	9e07      	ldr	r6, [sp, #28]
 8010dc4:	ac29      	add	r4, sp, #164	@ 0xa4
 8010dc6:	e0c6      	b.n	8010f56 <_svfprintf_r+0x9de>
 8010dc8:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010dcc:	e6ac      	b.n	8010b28 <_svfprintf_r+0x5b0>
 8010dce:	f803 0b01 	strb.w	r0, [r3], #1
 8010dd2:	e676      	b.n	8010ac2 <_svfprintf_r+0x54a>
 8010dd4:	9b08      	ldr	r3, [sp, #32]
 8010dd6:	2b46      	cmp	r3, #70	@ 0x46
 8010dd8:	d005      	beq.n	8010de6 <_svfprintf_r+0x86e>
 8010dda:	2b45      	cmp	r3, #69	@ 0x45
 8010ddc:	d11a      	bne.n	8010e14 <_svfprintf_r+0x89c>
 8010dde:	f108 0601 	add.w	r6, r8, #1
 8010de2:	2102      	movs	r1, #2
 8010de4:	e001      	b.n	8010dea <_svfprintf_r+0x872>
 8010de6:	4646      	mov	r6, r8
 8010de8:	2103      	movs	r1, #3
 8010dea:	ab24      	add	r3, sp, #144	@ 0x90
 8010dec:	9301      	str	r3, [sp, #4]
 8010dee:	ab21      	add	r3, sp, #132	@ 0x84
 8010df0:	9300      	str	r3, [sp, #0]
 8010df2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8010df6:	ab20      	add	r3, sp, #128	@ 0x80
 8010df8:	9803      	ldr	r0, [sp, #12]
 8010dfa:	4632      	mov	r2, r6
 8010dfc:	f000 ffc8 	bl	8011d90 <_dtoa_r>
 8010e00:	9b08      	ldr	r3, [sp, #32]
 8010e02:	2b47      	cmp	r3, #71	@ 0x47
 8010e04:	4681      	mov	r9, r0
 8010e06:	d119      	bne.n	8010e3c <_svfprintf_r+0x8c4>
 8010e08:	07e8      	lsls	r0, r5, #31
 8010e0a:	d405      	bmi.n	8010e18 <_svfprintf_r+0x8a0>
 8010e0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010e0e:	eba3 0309 	sub.w	r3, r3, r9
 8010e12:	e69b      	b.n	8010b4c <_svfprintf_r+0x5d4>
 8010e14:	4646      	mov	r6, r8
 8010e16:	e7e4      	b.n	8010de2 <_svfprintf_r+0x86a>
 8010e18:	eb09 0706 	add.w	r7, r9, r6
 8010e1c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010e20:	2200      	movs	r2, #0
 8010e22:	2300      	movs	r3, #0
 8010e24:	f7ef fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e28:	b100      	cbz	r0, 8010e2c <_svfprintf_r+0x8b4>
 8010e2a:	9724      	str	r7, [sp, #144]	@ 0x90
 8010e2c:	2230      	movs	r2, #48	@ 0x30
 8010e2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010e30:	429f      	cmp	r7, r3
 8010e32:	d9eb      	bls.n	8010e0c <_svfprintf_r+0x894>
 8010e34:	1c59      	adds	r1, r3, #1
 8010e36:	9124      	str	r1, [sp, #144]	@ 0x90
 8010e38:	701a      	strb	r2, [r3, #0]
 8010e3a:	e7f8      	b.n	8010e2e <_svfprintf_r+0x8b6>
 8010e3c:	9b08      	ldr	r3, [sp, #32]
 8010e3e:	2b46      	cmp	r3, #70	@ 0x46
 8010e40:	eb00 0706 	add.w	r7, r0, r6
 8010e44:	d1ea      	bne.n	8010e1c <_svfprintf_r+0x8a4>
 8010e46:	7803      	ldrb	r3, [r0, #0]
 8010e48:	2b30      	cmp	r3, #48	@ 0x30
 8010e4a:	d109      	bne.n	8010e60 <_svfprintf_r+0x8e8>
 8010e4c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010e50:	2200      	movs	r2, #0
 8010e52:	2300      	movs	r3, #0
 8010e54:	f7ef fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e58:	b910      	cbnz	r0, 8010e60 <_svfprintf_r+0x8e8>
 8010e5a:	f1c6 0601 	rsb	r6, r6, #1
 8010e5e:	9620      	str	r6, [sp, #128]	@ 0x80
 8010e60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010e62:	441f      	add	r7, r3
 8010e64:	e7da      	b.n	8010e1c <_svfprintf_r+0x8a4>
 8010e66:	9b08      	ldr	r3, [sp, #32]
 8010e68:	2b46      	cmp	r3, #70	@ 0x46
 8010e6a:	f47f ae7d 	bne.w	8010b68 <_svfprintf_r+0x5f0>
 8010e6e:	f005 0301 	and.w	r3, r5, #1
 8010e72:	2e00      	cmp	r6, #0
 8010e74:	ea43 0308 	orr.w	r3, r3, r8
 8010e78:	dd25      	ble.n	8010ec6 <_svfprintf_r+0x94e>
 8010e7a:	b37b      	cbz	r3, 8010edc <_svfprintf_r+0x964>
 8010e7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e7e:	18f3      	adds	r3, r6, r3
 8010e80:	4498      	add	r8, r3
 8010e82:	2366      	movs	r3, #102	@ 0x66
 8010e84:	9306      	str	r3, [sp, #24]
 8010e86:	e033      	b.n	8010ef0 <_svfprintf_r+0x978>
 8010e88:	f813 7b01 	ldrb.w	r7, [r3], #1
 8010e8c:	f806 7f01 	strb.w	r7, [r6, #1]!
 8010e90:	e6a1      	b.n	8010bd6 <_svfprintf_r+0x65e>
 8010e92:	b941      	cbnz	r1, 8010ea6 <_svfprintf_r+0x92e>
 8010e94:	2230      	movs	r2, #48	@ 0x30
 8010e96:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8010e9a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8010e9e:	3330      	adds	r3, #48	@ 0x30
 8010ea0:	f802 3b01 	strb.w	r3, [r2], #1
 8010ea4:	e6a3      	b.n	8010bee <_svfprintf_r+0x676>
 8010ea6:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8010eaa:	e7f8      	b.n	8010e9e <_svfprintf_r+0x926>
 8010eac:	9b04      	ldr	r3, [sp, #16]
 8010eae:	429e      	cmp	r6, r3
 8010eb0:	da0d      	bge.n	8010ece <_svfprintf_r+0x956>
 8010eb2:	9b04      	ldr	r3, [sp, #16]
 8010eb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010eb6:	2e00      	cmp	r6, #0
 8010eb8:	eb03 0802 	add.w	r8, r3, r2
 8010ebc:	dc0c      	bgt.n	8010ed8 <_svfprintf_r+0x960>
 8010ebe:	f1c6 0301 	rsb	r3, r6, #1
 8010ec2:	4498      	add	r8, r3
 8010ec4:	e008      	b.n	8010ed8 <_svfprintf_r+0x960>
 8010ec6:	b17b      	cbz	r3, 8010ee8 <_svfprintf_r+0x970>
 8010ec8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010eca:	3301      	adds	r3, #1
 8010ecc:	e7d8      	b.n	8010e80 <_svfprintf_r+0x908>
 8010ece:	07eb      	lsls	r3, r5, #31
 8010ed0:	d521      	bpl.n	8010f16 <_svfprintf_r+0x99e>
 8010ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ed4:	eb06 0803 	add.w	r8, r6, r3
 8010ed8:	2367      	movs	r3, #103	@ 0x67
 8010eda:	e7d3      	b.n	8010e84 <_svfprintf_r+0x90c>
 8010edc:	46b0      	mov	r8, r6
 8010ede:	e7d0      	b.n	8010e82 <_svfprintf_r+0x90a>
 8010ee0:	080146fd 	.word	0x080146fd
 8010ee4:	080146ed 	.word	0x080146ed
 8010ee8:	2366      	movs	r3, #102	@ 0x66
 8010eea:	9306      	str	r3, [sp, #24]
 8010eec:	f04f 0801 	mov.w	r8, #1
 8010ef0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8010ef4:	9308      	str	r3, [sp, #32]
 8010ef6:	d01f      	beq.n	8010f38 <_svfprintf_r+0x9c0>
 8010ef8:	2700      	movs	r7, #0
 8010efa:	2e00      	cmp	r6, #0
 8010efc:	9708      	str	r7, [sp, #32]
 8010efe:	f77f ae8a 	ble.w	8010c16 <_svfprintf_r+0x69e>
 8010f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	2bff      	cmp	r3, #255	@ 0xff
 8010f08:	d107      	bne.n	8010f1a <_svfprintf_r+0x9a2>
 8010f0a:	9b08      	ldr	r3, [sp, #32]
 8010f0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010f0e:	443b      	add	r3, r7
 8010f10:	fb02 8803 	mla	r8, r2, r3, r8
 8010f14:	e67f      	b.n	8010c16 <_svfprintf_r+0x69e>
 8010f16:	46b0      	mov	r8, r6
 8010f18:	e7de      	b.n	8010ed8 <_svfprintf_r+0x960>
 8010f1a:	42b3      	cmp	r3, r6
 8010f1c:	daf5      	bge.n	8010f0a <_svfprintf_r+0x992>
 8010f1e:	1af6      	subs	r6, r6, r3
 8010f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f22:	785b      	ldrb	r3, [r3, #1]
 8010f24:	b133      	cbz	r3, 8010f34 <_svfprintf_r+0x9bc>
 8010f26:	9b08      	ldr	r3, [sp, #32]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	9308      	str	r3, [sp, #32]
 8010f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f2e:	3301      	adds	r3, #1
 8010f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f32:	e7e6      	b.n	8010f02 <_svfprintf_r+0x98a>
 8010f34:	3701      	adds	r7, #1
 8010f36:	e7e4      	b.n	8010f02 <_svfprintf_r+0x98a>
 8010f38:	9f08      	ldr	r7, [sp, #32]
 8010f3a:	e66c      	b.n	8010c16 <_svfprintf_r+0x69e>
 8010f3c:	232d      	movs	r3, #45	@ 0x2d
 8010f3e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010f42:	e66c      	b.n	8010c1e <_svfprintf_r+0x6a6>
 8010f44:	06af      	lsls	r7, r5, #26
 8010f46:	d50a      	bpl.n	8010f5e <_svfprintf_r+0x9e6>
 8010f48:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f4a:	6833      	ldr	r3, [r6, #0]
 8010f4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010f4e:	17d2      	asrs	r2, r2, #31
 8010f50:	e9c3 1200 	strd	r1, r2, [r3]
 8010f54:	3604      	adds	r6, #4
 8010f56:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8010f5a:	f7ff bb46 	b.w	80105ea <_svfprintf_r+0x72>
 8010f5e:	06e8      	lsls	r0, r5, #27
 8010f60:	d503      	bpl.n	8010f6a <_svfprintf_r+0x9f2>
 8010f62:	6833      	ldr	r3, [r6, #0]
 8010f64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f66:	601a      	str	r2, [r3, #0]
 8010f68:	e7f4      	b.n	8010f54 <_svfprintf_r+0x9dc>
 8010f6a:	0669      	lsls	r1, r5, #25
 8010f6c:	d503      	bpl.n	8010f76 <_svfprintf_r+0x9fe>
 8010f6e:	6833      	ldr	r3, [r6, #0]
 8010f70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f72:	801a      	strh	r2, [r3, #0]
 8010f74:	e7ee      	b.n	8010f54 <_svfprintf_r+0x9dc>
 8010f76:	05aa      	lsls	r2, r5, #22
 8010f78:	d5f3      	bpl.n	8010f62 <_svfprintf_r+0x9ea>
 8010f7a:	6833      	ldr	r3, [r6, #0]
 8010f7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f7e:	701a      	strb	r2, [r3, #0]
 8010f80:	e7e8      	b.n	8010f54 <_svfprintf_r+0x9dc>
 8010f82:	f045 0510 	orr.w	r5, r5, #16
 8010f86:	f015 0320 	ands.w	r3, r5, #32
 8010f8a:	d020      	beq.n	8010fce <_svfprintf_r+0xa56>
 8010f8c:	3607      	adds	r6, #7
 8010f8e:	f026 0307 	bic.w	r3, r6, #7
 8010f92:	461a      	mov	r2, r3
 8010f94:	685f      	ldr	r7, [r3, #4]
 8010f96:	f852 6b08 	ldr.w	r6, [r2], #8
 8010f9a:	9207      	str	r2, [sp, #28]
 8010f9c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8010fa8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8010fac:	f000 848c 	beq.w	80118c8 <_svfprintf_r+0x1350>
 8010fb0:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8010fb4:	9208      	str	r2, [sp, #32]
 8010fb6:	ea56 0207 	orrs.w	r2, r6, r7
 8010fba:	f040 848a 	bne.w	80118d2 <_svfprintf_r+0x135a>
 8010fbe:	f1b8 0f00 	cmp.w	r8, #0
 8010fc2:	f000 80db 	beq.w	801117c <_svfprintf_r+0xc04>
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	f040 8486 	bne.w	80118d8 <_svfprintf_r+0x1360>
 8010fcc:	e083      	b.n	80110d6 <_svfprintf_r+0xb5e>
 8010fce:	4632      	mov	r2, r6
 8010fd0:	f015 0710 	ands.w	r7, r5, #16
 8010fd4:	f852 6b04 	ldr.w	r6, [r2], #4
 8010fd8:	9207      	str	r2, [sp, #28]
 8010fda:	d001      	beq.n	8010fe0 <_svfprintf_r+0xa68>
 8010fdc:	461f      	mov	r7, r3
 8010fde:	e7dd      	b.n	8010f9c <_svfprintf_r+0xa24>
 8010fe0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010fe4:	d001      	beq.n	8010fea <_svfprintf_r+0xa72>
 8010fe6:	b2b6      	uxth	r6, r6
 8010fe8:	e7d8      	b.n	8010f9c <_svfprintf_r+0xa24>
 8010fea:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010fee:	d0d5      	beq.n	8010f9c <_svfprintf_r+0xa24>
 8010ff0:	b2f6      	uxtb	r6, r6
 8010ff2:	e7f3      	b.n	8010fdc <_svfprintf_r+0xa64>
 8010ff4:	4633      	mov	r3, r6
 8010ff6:	2278      	movs	r2, #120	@ 0x78
 8010ff8:	f853 6b04 	ldr.w	r6, [r3], #4
 8010ffc:	9307      	str	r3, [sp, #28]
 8010ffe:	f647 0330 	movw	r3, #30768	@ 0x7830
 8011002:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8011006:	4b94      	ldr	r3, [pc, #592]	@ (8011258 <_svfprintf_r+0xce0>)
 8011008:	9319      	str	r3, [sp, #100]	@ 0x64
 801100a:	2700      	movs	r7, #0
 801100c:	f045 0502 	orr.w	r5, r5, #2
 8011010:	2302      	movs	r3, #2
 8011012:	9206      	str	r2, [sp, #24]
 8011014:	e7c5      	b.n	8010fa2 <_svfprintf_r+0xa2a>
 8011016:	4633      	mov	r3, r6
 8011018:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801101c:	f853 9b04 	ldr.w	r9, [r3], #4
 8011020:	9307      	str	r3, [sp, #28]
 8011022:	f04f 0600 	mov.w	r6, #0
 8011026:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801102a:	d00f      	beq.n	801104c <_svfprintf_r+0xad4>
 801102c:	4642      	mov	r2, r8
 801102e:	4631      	mov	r1, r6
 8011030:	4648      	mov	r0, r9
 8011032:	f7ef f8dd 	bl	80001f0 <memchr>
 8011036:	4682      	mov	sl, r0
 8011038:	2800      	cmp	r0, #0
 801103a:	f43f ac81 	beq.w	8010940 <_svfprintf_r+0x3c8>
 801103e:	eba0 0809 	sub.w	r8, r0, r9
 8011042:	46b2      	mov	sl, r6
 8011044:	9610      	str	r6, [sp, #64]	@ 0x40
 8011046:	4637      	mov	r7, r6
 8011048:	9608      	str	r6, [sp, #32]
 801104a:	e5eb      	b.n	8010c24 <_svfprintf_r+0x6ac>
 801104c:	4648      	mov	r0, r9
 801104e:	f7ef f8c7 	bl	80001e0 <strlen>
 8011052:	46b2      	mov	sl, r6
 8011054:	4680      	mov	r8, r0
 8011056:	e473      	b.n	8010940 <_svfprintf_r+0x3c8>
 8011058:	f045 0510 	orr.w	r5, r5, #16
 801105c:	f015 0320 	ands.w	r3, r5, #32
 8011060:	d009      	beq.n	8011076 <_svfprintf_r+0xafe>
 8011062:	3607      	adds	r6, #7
 8011064:	f026 0307 	bic.w	r3, r6, #7
 8011068:	461a      	mov	r2, r3
 801106a:	685f      	ldr	r7, [r3, #4]
 801106c:	f852 6b08 	ldr.w	r6, [r2], #8
 8011070:	9207      	str	r2, [sp, #28]
 8011072:	2301      	movs	r3, #1
 8011074:	e795      	b.n	8010fa2 <_svfprintf_r+0xa2a>
 8011076:	4632      	mov	r2, r6
 8011078:	f015 0710 	ands.w	r7, r5, #16
 801107c:	f852 6b04 	ldr.w	r6, [r2], #4
 8011080:	9207      	str	r2, [sp, #28]
 8011082:	d001      	beq.n	8011088 <_svfprintf_r+0xb10>
 8011084:	461f      	mov	r7, r3
 8011086:	e7f4      	b.n	8011072 <_svfprintf_r+0xafa>
 8011088:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801108c:	d001      	beq.n	8011092 <_svfprintf_r+0xb1a>
 801108e:	b2b6      	uxth	r6, r6
 8011090:	e7ef      	b.n	8011072 <_svfprintf_r+0xafa>
 8011092:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8011096:	d0ec      	beq.n	8011072 <_svfprintf_r+0xafa>
 8011098:	b2f6      	uxtb	r6, r6
 801109a:	e7f3      	b.n	8011084 <_svfprintf_r+0xb0c>
 801109c:	4b6f      	ldr	r3, [pc, #444]	@ (801125c <_svfprintf_r+0xce4>)
 801109e:	f7ff bb39 	b.w	8010714 <_svfprintf_r+0x19c>
 80110a2:	4632      	mov	r2, r6
 80110a4:	f015 0710 	ands.w	r7, r5, #16
 80110a8:	f852 6b04 	ldr.w	r6, [r2], #4
 80110ac:	9207      	str	r2, [sp, #28]
 80110ae:	d002      	beq.n	80110b6 <_svfprintf_r+0xb3e>
 80110b0:	461f      	mov	r7, r3
 80110b2:	f7ff bb3c 	b.w	801072e <_svfprintf_r+0x1b6>
 80110b6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80110ba:	d002      	beq.n	80110c2 <_svfprintf_r+0xb4a>
 80110bc:	b2b6      	uxth	r6, r6
 80110be:	f7ff bb36 	b.w	801072e <_svfprintf_r+0x1b6>
 80110c2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80110c6:	f43f ab32 	beq.w	801072e <_svfprintf_r+0x1b6>
 80110ca:	b2f6      	uxtb	r6, r6
 80110cc:	e7f0      	b.n	80110b0 <_svfprintf_r+0xb38>
 80110ce:	2e0a      	cmp	r6, #10
 80110d0:	f177 0300 	sbcs.w	r3, r7, #0
 80110d4:	d207      	bcs.n	80110e6 <_svfprintf_r+0xb6e>
 80110d6:	3630      	adds	r6, #48	@ 0x30
 80110d8:	b2f6      	uxtb	r6, r6
 80110da:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 80110de:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 80110e2:	f000 bc15 	b.w	8011910 <_svfprintf_r+0x1398>
 80110e6:	2300      	movs	r3, #0
 80110e8:	9304      	str	r3, [sp, #16]
 80110ea:	9b08      	ldr	r3, [sp, #32]
 80110ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80110f0:	ad52      	add	r5, sp, #328	@ 0x148
 80110f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80110f4:	220a      	movs	r2, #10
 80110f6:	2300      	movs	r3, #0
 80110f8:	4630      	mov	r0, r6
 80110fa:	4639      	mov	r1, r7
 80110fc:	f7ef fdfc 	bl	8000cf8 <__aeabi_uldivmod>
 8011100:	9b04      	ldr	r3, [sp, #16]
 8011102:	9011      	str	r0, [sp, #68]	@ 0x44
 8011104:	3301      	adds	r3, #1
 8011106:	9304      	str	r3, [sp, #16]
 8011108:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801110a:	3230      	adds	r2, #48	@ 0x30
 801110c:	468a      	mov	sl, r1
 801110e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8011112:	f805 2c01 	strb.w	r2, [r5, #-1]
 8011116:	b1d3      	cbz	r3, 801114e <_svfprintf_r+0xbd6>
 8011118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801111a:	9a04      	ldr	r2, [sp, #16]
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	429a      	cmp	r2, r3
 8011120:	d115      	bne.n	801114e <_svfprintf_r+0xbd6>
 8011122:	2aff      	cmp	r2, #255	@ 0xff
 8011124:	d013      	beq.n	801114e <_svfprintf_r+0xbd6>
 8011126:	2e0a      	cmp	r6, #10
 8011128:	f177 0300 	sbcs.w	r3, r7, #0
 801112c:	d30f      	bcc.n	801114e <_svfprintf_r+0xbd6>
 801112e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011130:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011132:	eba9 0903 	sub.w	r9, r9, r3
 8011136:	461a      	mov	r2, r3
 8011138:	4648      	mov	r0, r9
 801113a:	f000 fcfe 	bl	8011b3a <strncpy>
 801113e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011140:	785b      	ldrb	r3, [r3, #1]
 8011142:	b11b      	cbz	r3, 801114c <_svfprintf_r+0xbd4>
 8011144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011146:	3301      	adds	r3, #1
 8011148:	9309      	str	r3, [sp, #36]	@ 0x24
 801114a:	2300      	movs	r3, #0
 801114c:	9304      	str	r3, [sp, #16]
 801114e:	2e0a      	cmp	r6, #10
 8011150:	f177 0700 	sbcs.w	r7, r7, #0
 8011154:	f0c0 83dc 	bcc.w	8011910 <_svfprintf_r+0x1398>
 8011158:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801115a:	4657      	mov	r7, sl
 801115c:	464d      	mov	r5, r9
 801115e:	e7c9      	b.n	80110f4 <_svfprintf_r+0xb7c>
 8011160:	f006 030f 	and.w	r3, r6, #15
 8011164:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011166:	0936      	lsrs	r6, r6, #4
 8011168:	5cd3      	ldrb	r3, [r2, r3]
 801116a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801116e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8011172:	093f      	lsrs	r7, r7, #4
 8011174:	ea56 0307 	orrs.w	r3, r6, r7
 8011178:	d1f2      	bne.n	8011160 <_svfprintf_r+0xbe8>
 801117a:	e3c9      	b.n	8011910 <_svfprintf_r+0x1398>
 801117c:	b91b      	cbnz	r3, 8011186 <_svfprintf_r+0xc0e>
 801117e:	07e9      	lsls	r1, r5, #31
 8011180:	d501      	bpl.n	8011186 <_svfprintf_r+0xc0e>
 8011182:	2630      	movs	r6, #48	@ 0x30
 8011184:	e7a9      	b.n	80110da <_svfprintf_r+0xb62>
 8011186:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801118a:	e3c1      	b.n	8011910 <_svfprintf_r+0x1398>
 801118c:	9b06      	ldr	r3, [sp, #24]
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 838f 	beq.w	80118b2 <_svfprintf_r+0x133a>
 8011194:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8011198:	2300      	movs	r3, #0
 801119a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801119e:	9607      	str	r6, [sp, #28]
 80111a0:	f7ff bb63 	b.w	801086a <_svfprintf_r+0x2f2>
 80111a4:	2010      	movs	r0, #16
 80111a6:	4403      	add	r3, r0
 80111a8:	2a07      	cmp	r2, #7
 80111aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80111ae:	6060      	str	r0, [r4, #4]
 80111b0:	dd08      	ble.n	80111c4 <_svfprintf_r+0xc4c>
 80111b2:	9803      	ldr	r0, [sp, #12]
 80111b4:	aa26      	add	r2, sp, #152	@ 0x98
 80111b6:	4659      	mov	r1, fp
 80111b8:	f001 feca 	bl	8012f50 <__ssprint_r>
 80111bc:	2800      	cmp	r0, #0
 80111be:	f040 8356 	bne.w	801186e <_svfprintf_r+0x12f6>
 80111c2:	a929      	add	r1, sp, #164	@ 0xa4
 80111c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80111c6:	3b10      	subs	r3, #16
 80111c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80111ca:	460c      	mov	r4, r1
 80111cc:	e546      	b.n	8010c5c <_svfprintf_r+0x6e4>
 80111ce:	460c      	mov	r4, r1
 80111d0:	e561      	b.n	8010c96 <_svfprintf_r+0x71e>
 80111d2:	9803      	ldr	r0, [sp, #12]
 80111d4:	aa26      	add	r2, sp, #152	@ 0x98
 80111d6:	4659      	mov	r1, fp
 80111d8:	f001 feba 	bl	8012f50 <__ssprint_r>
 80111dc:	2800      	cmp	r0, #0
 80111de:	f040 8346 	bne.w	801186e <_svfprintf_r+0x12f6>
 80111e2:	ac29      	add	r4, sp, #164	@ 0xa4
 80111e4:	e569      	b.n	8010cba <_svfprintf_r+0x742>
 80111e6:	9803      	ldr	r0, [sp, #12]
 80111e8:	aa26      	add	r2, sp, #152	@ 0x98
 80111ea:	4659      	mov	r1, fp
 80111ec:	f001 feb0 	bl	8012f50 <__ssprint_r>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	f040 833c 	bne.w	801186e <_svfprintf_r+0x12f6>
 80111f6:	ac29      	add	r4, sp, #164	@ 0xa4
 80111f8:	e56f      	b.n	8010cda <_svfprintf_r+0x762>
 80111fa:	2010      	movs	r0, #16
 80111fc:	4403      	add	r3, r0
 80111fe:	2a07      	cmp	r2, #7
 8011200:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011204:	6060      	str	r0, [r4, #4]
 8011206:	dd08      	ble.n	801121a <_svfprintf_r+0xca2>
 8011208:	9803      	ldr	r0, [sp, #12]
 801120a:	aa26      	add	r2, sp, #152	@ 0x98
 801120c:	4659      	mov	r1, fp
 801120e:	f001 fe9f 	bl	8012f50 <__ssprint_r>
 8011212:	2800      	cmp	r0, #0
 8011214:	f040 832b 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011218:	a929      	add	r1, sp, #164	@ 0xa4
 801121a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801121c:	3b10      	subs	r3, #16
 801121e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011220:	460c      	mov	r4, r1
 8011222:	e563      	b.n	8010cec <_svfprintf_r+0x774>
 8011224:	460c      	mov	r4, r1
 8011226:	e57e      	b.n	8010d26 <_svfprintf_r+0x7ae>
 8011228:	2010      	movs	r0, #16
 801122a:	4403      	add	r3, r0
 801122c:	2a07      	cmp	r2, #7
 801122e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011232:	6060      	str	r0, [r4, #4]
 8011234:	dd08      	ble.n	8011248 <_svfprintf_r+0xcd0>
 8011236:	9803      	ldr	r0, [sp, #12]
 8011238:	aa26      	add	r2, sp, #152	@ 0x98
 801123a:	4659      	mov	r1, fp
 801123c:	f001 fe88 	bl	8012f50 <__ssprint_r>
 8011240:	2800      	cmp	r0, #0
 8011242:	f040 8314 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011246:	a929      	add	r1, sp, #164	@ 0xa4
 8011248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801124a:	3b10      	subs	r3, #16
 801124c:	9310      	str	r3, [sp, #64]	@ 0x40
 801124e:	460c      	mov	r4, r1
 8011250:	e56f      	b.n	8010d32 <_svfprintf_r+0x7ba>
 8011252:	460c      	mov	r4, r1
 8011254:	e58a      	b.n	8010d6c <_svfprintf_r+0x7f4>
 8011256:	bf00      	nop
 8011258:	080146c9 	.word	0x080146c9
 801125c:	080146da 	.word	0x080146da
 8011260:	9b06      	ldr	r3, [sp, #24]
 8011262:	2b65      	cmp	r3, #101	@ 0x65
 8011264:	f340 8246 	ble.w	80116f4 <_svfprintf_r+0x117c>
 8011268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801126c:	2200      	movs	r2, #0
 801126e:	2300      	movs	r3, #0
 8011270:	f7ef fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8011274:	2800      	cmp	r0, #0
 8011276:	d06a      	beq.n	801134e <_svfprintf_r+0xdd6>
 8011278:	4b73      	ldr	r3, [pc, #460]	@ (8011448 <_svfprintf_r+0xed0>)
 801127a:	6023      	str	r3, [r4, #0]
 801127c:	2301      	movs	r3, #1
 801127e:	6063      	str	r3, [r4, #4]
 8011280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011282:	3301      	adds	r3, #1
 8011284:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011286:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011288:	3301      	adds	r3, #1
 801128a:	2b07      	cmp	r3, #7
 801128c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801128e:	dc37      	bgt.n	8011300 <_svfprintf_r+0xd88>
 8011290:	3408      	adds	r4, #8
 8011292:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011294:	9a04      	ldr	r2, [sp, #16]
 8011296:	4293      	cmp	r3, r2
 8011298:	db02      	blt.n	80112a0 <_svfprintf_r+0xd28>
 801129a:	07ef      	lsls	r7, r5, #31
 801129c:	f57f ad76 	bpl.w	8010d8c <_svfprintf_r+0x814>
 80112a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80112a2:	6023      	str	r3, [r4, #0]
 80112a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80112a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80112a8:	6063      	str	r3, [r4, #4]
 80112aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80112ac:	4413      	add	r3, r2
 80112ae:	9328      	str	r3, [sp, #160]	@ 0xa0
 80112b0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80112b2:	3301      	adds	r3, #1
 80112b4:	2b07      	cmp	r3, #7
 80112b6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80112b8:	dc2c      	bgt.n	8011314 <_svfprintf_r+0xd9c>
 80112ba:	3408      	adds	r4, #8
 80112bc:	9b04      	ldr	r3, [sp, #16]
 80112be:	1e5e      	subs	r6, r3, #1
 80112c0:	2e00      	cmp	r6, #0
 80112c2:	f77f ad63 	ble.w	8010d8c <_svfprintf_r+0x814>
 80112c6:	4f61      	ldr	r7, [pc, #388]	@ (801144c <_svfprintf_r+0xed4>)
 80112c8:	f04f 0810 	mov.w	r8, #16
 80112cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80112d0:	2e10      	cmp	r6, #16
 80112d2:	f103 0301 	add.w	r3, r3, #1
 80112d6:	f104 0108 	add.w	r1, r4, #8
 80112da:	6027      	str	r7, [r4, #0]
 80112dc:	dc24      	bgt.n	8011328 <_svfprintf_r+0xdb0>
 80112de:	6066      	str	r6, [r4, #4]
 80112e0:	2b07      	cmp	r3, #7
 80112e2:	4416      	add	r6, r2
 80112e4:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80112e8:	f340 82a0 	ble.w	801182c <_svfprintf_r+0x12b4>
 80112ec:	9803      	ldr	r0, [sp, #12]
 80112ee:	aa26      	add	r2, sp, #152	@ 0x98
 80112f0:	4659      	mov	r1, fp
 80112f2:	f001 fe2d 	bl	8012f50 <__ssprint_r>
 80112f6:	2800      	cmp	r0, #0
 80112f8:	f040 82b9 	bne.w	801186e <_svfprintf_r+0x12f6>
 80112fc:	ac29      	add	r4, sp, #164	@ 0xa4
 80112fe:	e545      	b.n	8010d8c <_svfprintf_r+0x814>
 8011300:	9803      	ldr	r0, [sp, #12]
 8011302:	aa26      	add	r2, sp, #152	@ 0x98
 8011304:	4659      	mov	r1, fp
 8011306:	f001 fe23 	bl	8012f50 <__ssprint_r>
 801130a:	2800      	cmp	r0, #0
 801130c:	f040 82af 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011310:	ac29      	add	r4, sp, #164	@ 0xa4
 8011312:	e7be      	b.n	8011292 <_svfprintf_r+0xd1a>
 8011314:	9803      	ldr	r0, [sp, #12]
 8011316:	aa26      	add	r2, sp, #152	@ 0x98
 8011318:	4659      	mov	r1, fp
 801131a:	f001 fe19 	bl	8012f50 <__ssprint_r>
 801131e:	2800      	cmp	r0, #0
 8011320:	f040 82a5 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011324:	ac29      	add	r4, sp, #164	@ 0xa4
 8011326:	e7c9      	b.n	80112bc <_svfprintf_r+0xd44>
 8011328:	3210      	adds	r2, #16
 801132a:	2b07      	cmp	r3, #7
 801132c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011330:	f8c4 8004 	str.w	r8, [r4, #4]
 8011334:	dd08      	ble.n	8011348 <_svfprintf_r+0xdd0>
 8011336:	9803      	ldr	r0, [sp, #12]
 8011338:	aa26      	add	r2, sp, #152	@ 0x98
 801133a:	4659      	mov	r1, fp
 801133c:	f001 fe08 	bl	8012f50 <__ssprint_r>
 8011340:	2800      	cmp	r0, #0
 8011342:	f040 8294 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011346:	a929      	add	r1, sp, #164	@ 0xa4
 8011348:	3e10      	subs	r6, #16
 801134a:	460c      	mov	r4, r1
 801134c:	e7be      	b.n	80112cc <_svfprintf_r+0xd54>
 801134e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011350:	2b00      	cmp	r3, #0
 8011352:	dc7d      	bgt.n	8011450 <_svfprintf_r+0xed8>
 8011354:	4b3c      	ldr	r3, [pc, #240]	@ (8011448 <_svfprintf_r+0xed0>)
 8011356:	6023      	str	r3, [r4, #0]
 8011358:	2301      	movs	r3, #1
 801135a:	6063      	str	r3, [r4, #4]
 801135c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801135e:	3301      	adds	r3, #1
 8011360:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011362:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011364:	3301      	adds	r3, #1
 8011366:	2b07      	cmp	r3, #7
 8011368:	9327      	str	r3, [sp, #156]	@ 0x9c
 801136a:	dc46      	bgt.n	80113fa <_svfprintf_r+0xe82>
 801136c:	3408      	adds	r4, #8
 801136e:	9904      	ldr	r1, [sp, #16]
 8011370:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011372:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8011374:	430b      	orrs	r3, r1
 8011376:	f005 0101 	and.w	r1, r5, #1
 801137a:	430b      	orrs	r3, r1
 801137c:	f43f ad06 	beq.w	8010d8c <_svfprintf_r+0x814>
 8011380:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011382:	6023      	str	r3, [r4, #0]
 8011384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011386:	6063      	str	r3, [r4, #4]
 8011388:	441a      	add	r2, r3
 801138a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801138c:	9228      	str	r2, [sp, #160]	@ 0xa0
 801138e:	3301      	adds	r3, #1
 8011390:	2b07      	cmp	r3, #7
 8011392:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011394:	dc3b      	bgt.n	801140e <_svfprintf_r+0xe96>
 8011396:	f104 0308 	add.w	r3, r4, #8
 801139a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801139c:	2e00      	cmp	r6, #0
 801139e:	da1b      	bge.n	80113d8 <_svfprintf_r+0xe60>
 80113a0:	4f2a      	ldr	r7, [pc, #168]	@ (801144c <_svfprintf_r+0xed4>)
 80113a2:	4276      	negs	r6, r6
 80113a4:	461a      	mov	r2, r3
 80113a6:	2410      	movs	r4, #16
 80113a8:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80113ac:	2e10      	cmp	r6, #16
 80113ae:	f101 0101 	add.w	r1, r1, #1
 80113b2:	f103 0308 	add.w	r3, r3, #8
 80113b6:	6017      	str	r7, [r2, #0]
 80113b8:	dc33      	bgt.n	8011422 <_svfprintf_r+0xeaa>
 80113ba:	6056      	str	r6, [r2, #4]
 80113bc:	2907      	cmp	r1, #7
 80113be:	4406      	add	r6, r0
 80113c0:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80113c4:	dd08      	ble.n	80113d8 <_svfprintf_r+0xe60>
 80113c6:	9803      	ldr	r0, [sp, #12]
 80113c8:	aa26      	add	r2, sp, #152	@ 0x98
 80113ca:	4659      	mov	r1, fp
 80113cc:	f001 fdc0 	bl	8012f50 <__ssprint_r>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	f040 824c 	bne.w	801186e <_svfprintf_r+0x12f6>
 80113d6:	ab29      	add	r3, sp, #164	@ 0xa4
 80113d8:	9a04      	ldr	r2, [sp, #16]
 80113da:	9904      	ldr	r1, [sp, #16]
 80113dc:	605a      	str	r2, [r3, #4]
 80113de:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80113e0:	f8c3 9000 	str.w	r9, [r3]
 80113e4:	440a      	add	r2, r1
 80113e6:	9228      	str	r2, [sp, #160]	@ 0xa0
 80113e8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80113ea:	3201      	adds	r2, #1
 80113ec:	2a07      	cmp	r2, #7
 80113ee:	9227      	str	r2, [sp, #156]	@ 0x9c
 80113f0:	f73f af7c 	bgt.w	80112ec <_svfprintf_r+0xd74>
 80113f4:	f103 0408 	add.w	r4, r3, #8
 80113f8:	e4c8      	b.n	8010d8c <_svfprintf_r+0x814>
 80113fa:	9803      	ldr	r0, [sp, #12]
 80113fc:	aa26      	add	r2, sp, #152	@ 0x98
 80113fe:	4659      	mov	r1, fp
 8011400:	f001 fda6 	bl	8012f50 <__ssprint_r>
 8011404:	2800      	cmp	r0, #0
 8011406:	f040 8232 	bne.w	801186e <_svfprintf_r+0x12f6>
 801140a:	ac29      	add	r4, sp, #164	@ 0xa4
 801140c:	e7af      	b.n	801136e <_svfprintf_r+0xdf6>
 801140e:	9803      	ldr	r0, [sp, #12]
 8011410:	aa26      	add	r2, sp, #152	@ 0x98
 8011412:	4659      	mov	r1, fp
 8011414:	f001 fd9c 	bl	8012f50 <__ssprint_r>
 8011418:	2800      	cmp	r0, #0
 801141a:	f040 8228 	bne.w	801186e <_svfprintf_r+0x12f6>
 801141e:	ab29      	add	r3, sp, #164	@ 0xa4
 8011420:	e7bb      	b.n	801139a <_svfprintf_r+0xe22>
 8011422:	3010      	adds	r0, #16
 8011424:	2907      	cmp	r1, #7
 8011426:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801142a:	6054      	str	r4, [r2, #4]
 801142c:	dd08      	ble.n	8011440 <_svfprintf_r+0xec8>
 801142e:	9803      	ldr	r0, [sp, #12]
 8011430:	aa26      	add	r2, sp, #152	@ 0x98
 8011432:	4659      	mov	r1, fp
 8011434:	f001 fd8c 	bl	8012f50 <__ssprint_r>
 8011438:	2800      	cmp	r0, #0
 801143a:	f040 8218 	bne.w	801186e <_svfprintf_r+0x12f6>
 801143e:	ab29      	add	r3, sp, #164	@ 0xa4
 8011440:	3e10      	subs	r6, #16
 8011442:	461a      	mov	r2, r3
 8011444:	e7b0      	b.n	80113a8 <_svfprintf_r+0xe30>
 8011446:	bf00      	nop
 8011448:	080146eb 	.word	0x080146eb
 801144c:	080146ed 	.word	0x080146ed
 8011450:	9b04      	ldr	r3, [sp, #16]
 8011452:	444b      	add	r3, r9
 8011454:	9306      	str	r3, [sp, #24]
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	42b3      	cmp	r3, r6
 801145a:	bfa8      	it	ge
 801145c:	4633      	movge	r3, r6
 801145e:	2b00      	cmp	r3, #0
 8011460:	4698      	mov	r8, r3
 8011462:	dd0b      	ble.n	801147c <_svfprintf_r+0xf04>
 8011464:	e9c4 9300 	strd	r9, r3, [r4]
 8011468:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801146a:	4443      	add	r3, r8
 801146c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801146e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011470:	3301      	adds	r3, #1
 8011472:	2b07      	cmp	r3, #7
 8011474:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011476:	f300 8089 	bgt.w	801158c <_svfprintf_r+0x1014>
 801147a:	3408      	adds	r4, #8
 801147c:	4643      	mov	r3, r8
 801147e:	2b00      	cmp	r3, #0
 8011480:	bfac      	ite	ge
 8011482:	eba6 0808 	subge.w	r8, r6, r8
 8011486:	46b0      	movlt	r8, r6
 8011488:	f1b8 0f00 	cmp.w	r8, #0
 801148c:	dd1b      	ble.n	80114c6 <_svfprintf_r+0xf4e>
 801148e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8011492:	4897      	ldr	r0, [pc, #604]	@ (80116f0 <_svfprintf_r+0x1178>)
 8011494:	6020      	str	r0, [r4, #0]
 8011496:	f1b8 0f10 	cmp.w	r8, #16
 801149a:	f102 0201 	add.w	r2, r2, #1
 801149e:	f104 0108 	add.w	r1, r4, #8
 80114a2:	dc7d      	bgt.n	80115a0 <_svfprintf_r+0x1028>
 80114a4:	4443      	add	r3, r8
 80114a6:	2a07      	cmp	r2, #7
 80114a8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80114ac:	f8c4 8004 	str.w	r8, [r4, #4]
 80114b0:	f340 808a 	ble.w	80115c8 <_svfprintf_r+0x1050>
 80114b4:	9803      	ldr	r0, [sp, #12]
 80114b6:	aa26      	add	r2, sp, #152	@ 0x98
 80114b8:	4659      	mov	r1, fp
 80114ba:	f001 fd49 	bl	8012f50 <__ssprint_r>
 80114be:	2800      	cmp	r0, #0
 80114c0:	f040 81d5 	bne.w	801186e <_svfprintf_r+0x12f6>
 80114c4:	ac29      	add	r4, sp, #164	@ 0xa4
 80114c6:	eb09 0806 	add.w	r8, r9, r6
 80114ca:	056e      	lsls	r6, r5, #21
 80114cc:	d508      	bpl.n	80114e0 <_svfprintf_r+0xf68>
 80114ce:	9b08      	ldr	r3, [sp, #32]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d17b      	bne.n	80115cc <_svfprintf_r+0x1054>
 80114d4:	2f00      	cmp	r7, #0
 80114d6:	d17b      	bne.n	80115d0 <_svfprintf_r+0x1058>
 80114d8:	9b06      	ldr	r3, [sp, #24]
 80114da:	4598      	cmp	r8, r3
 80114dc:	bf28      	it	cs
 80114de:	4698      	movcs	r8, r3
 80114e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80114e2:	9a04      	ldr	r2, [sp, #16]
 80114e4:	4293      	cmp	r3, r2
 80114e6:	db01      	blt.n	80114ec <_svfprintf_r+0xf74>
 80114e8:	07e8      	lsls	r0, r5, #31
 80114ea:	d50e      	bpl.n	801150a <_svfprintf_r+0xf92>
 80114ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80114ee:	6023      	str	r3, [r4, #0]
 80114f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80114f4:	6063      	str	r3, [r4, #4]
 80114f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80114f8:	4413      	add	r3, r2
 80114fa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80114fc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80114fe:	3301      	adds	r3, #1
 8011500:	2b07      	cmp	r3, #7
 8011502:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011504:	f300 80df 	bgt.w	80116c6 <_svfprintf_r+0x114e>
 8011508:	3408      	adds	r4, #8
 801150a:	9b04      	ldr	r3, [sp, #16]
 801150c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801150e:	1bdf      	subs	r7, r3, r7
 8011510:	9b06      	ldr	r3, [sp, #24]
 8011512:	eba3 0308 	sub.w	r3, r3, r8
 8011516:	429f      	cmp	r7, r3
 8011518:	bfa8      	it	ge
 801151a:	461f      	movge	r7, r3
 801151c:	2f00      	cmp	r7, #0
 801151e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011520:	dd0a      	ble.n	8011538 <_svfprintf_r+0xfc0>
 8011522:	443b      	add	r3, r7
 8011524:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011526:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011528:	3301      	adds	r3, #1
 801152a:	2b07      	cmp	r3, #7
 801152c:	e9c4 8700 	strd	r8, r7, [r4]
 8011530:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011532:	f300 80d2 	bgt.w	80116da <_svfprintf_r+0x1162>
 8011536:	3408      	adds	r4, #8
 8011538:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801153a:	9b04      	ldr	r3, [sp, #16]
 801153c:	2f00      	cmp	r7, #0
 801153e:	eba3 0606 	sub.w	r6, r3, r6
 8011542:	bfa8      	it	ge
 8011544:	1bf6      	subge	r6, r6, r7
 8011546:	2e00      	cmp	r6, #0
 8011548:	f77f ac20 	ble.w	8010d8c <_svfprintf_r+0x814>
 801154c:	4f68      	ldr	r7, [pc, #416]	@ (80116f0 <_svfprintf_r+0x1178>)
 801154e:	f04f 0810 	mov.w	r8, #16
 8011552:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8011556:	2e10      	cmp	r6, #16
 8011558:	f103 0301 	add.w	r3, r3, #1
 801155c:	f104 0108 	add.w	r1, r4, #8
 8011560:	6027      	str	r7, [r4, #0]
 8011562:	f77f aebc 	ble.w	80112de <_svfprintf_r+0xd66>
 8011566:	3210      	adds	r2, #16
 8011568:	2b07      	cmp	r3, #7
 801156a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801156e:	f8c4 8004 	str.w	r8, [r4, #4]
 8011572:	dd08      	ble.n	8011586 <_svfprintf_r+0x100e>
 8011574:	9803      	ldr	r0, [sp, #12]
 8011576:	aa26      	add	r2, sp, #152	@ 0x98
 8011578:	4659      	mov	r1, fp
 801157a:	f001 fce9 	bl	8012f50 <__ssprint_r>
 801157e:	2800      	cmp	r0, #0
 8011580:	f040 8175 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011584:	a929      	add	r1, sp, #164	@ 0xa4
 8011586:	3e10      	subs	r6, #16
 8011588:	460c      	mov	r4, r1
 801158a:	e7e2      	b.n	8011552 <_svfprintf_r+0xfda>
 801158c:	9803      	ldr	r0, [sp, #12]
 801158e:	aa26      	add	r2, sp, #152	@ 0x98
 8011590:	4659      	mov	r1, fp
 8011592:	f001 fcdd 	bl	8012f50 <__ssprint_r>
 8011596:	2800      	cmp	r0, #0
 8011598:	f040 8169 	bne.w	801186e <_svfprintf_r+0x12f6>
 801159c:	ac29      	add	r4, sp, #164	@ 0xa4
 801159e:	e76d      	b.n	801147c <_svfprintf_r+0xf04>
 80115a0:	2010      	movs	r0, #16
 80115a2:	4403      	add	r3, r0
 80115a4:	2a07      	cmp	r2, #7
 80115a6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80115aa:	6060      	str	r0, [r4, #4]
 80115ac:	dd08      	ble.n	80115c0 <_svfprintf_r+0x1048>
 80115ae:	9803      	ldr	r0, [sp, #12]
 80115b0:	aa26      	add	r2, sp, #152	@ 0x98
 80115b2:	4659      	mov	r1, fp
 80115b4:	f001 fccc 	bl	8012f50 <__ssprint_r>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	f040 8158 	bne.w	801186e <_svfprintf_r+0x12f6>
 80115be:	a929      	add	r1, sp, #164	@ 0xa4
 80115c0:	f1a8 0810 	sub.w	r8, r8, #16
 80115c4:	460c      	mov	r4, r1
 80115c6:	e762      	b.n	801148e <_svfprintf_r+0xf16>
 80115c8:	460c      	mov	r4, r1
 80115ca:	e77c      	b.n	80114c6 <_svfprintf_r+0xf4e>
 80115cc:	2f00      	cmp	r7, #0
 80115ce:	d04a      	beq.n	8011666 <_svfprintf_r+0x10ee>
 80115d0:	3f01      	subs	r7, #1
 80115d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80115d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80115da:	6063      	str	r3, [r4, #4]
 80115dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80115de:	4413      	add	r3, r2
 80115e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80115e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80115e4:	3301      	adds	r3, #1
 80115e6:	2b07      	cmp	r3, #7
 80115e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80115ea:	dc43      	bgt.n	8011674 <_svfprintf_r+0x10fc>
 80115ec:	3408      	adds	r4, #8
 80115ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115f0:	781a      	ldrb	r2, [r3, #0]
 80115f2:	9b06      	ldr	r3, [sp, #24]
 80115f4:	eba3 0308 	sub.w	r3, r3, r8
 80115f8:	429a      	cmp	r2, r3
 80115fa:	bfa8      	it	ge
 80115fc:	461a      	movge	r2, r3
 80115fe:	2a00      	cmp	r2, #0
 8011600:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011602:	4691      	mov	r9, r2
 8011604:	dd09      	ble.n	801161a <_svfprintf_r+0x10a2>
 8011606:	4413      	add	r3, r2
 8011608:	9328      	str	r3, [sp, #160]	@ 0xa0
 801160a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801160c:	3301      	adds	r3, #1
 801160e:	2b07      	cmp	r3, #7
 8011610:	e9c4 8200 	strd	r8, r2, [r4]
 8011614:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011616:	dc37      	bgt.n	8011688 <_svfprintf_r+0x1110>
 8011618:	3408      	adds	r4, #8
 801161a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801161c:	781e      	ldrb	r6, [r3, #0]
 801161e:	f1b9 0f00 	cmp.w	r9, #0
 8011622:	bfa8      	it	ge
 8011624:	eba6 0609 	subge.w	r6, r6, r9
 8011628:	2e00      	cmp	r6, #0
 801162a:	dd18      	ble.n	801165e <_svfprintf_r+0x10e6>
 801162c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8011630:	482f      	ldr	r0, [pc, #188]	@ (80116f0 <_svfprintf_r+0x1178>)
 8011632:	6020      	str	r0, [r4, #0]
 8011634:	2e10      	cmp	r6, #16
 8011636:	f103 0301 	add.w	r3, r3, #1
 801163a:	f104 0108 	add.w	r1, r4, #8
 801163e:	dc2d      	bgt.n	801169c <_svfprintf_r+0x1124>
 8011640:	6066      	str	r6, [r4, #4]
 8011642:	2b07      	cmp	r3, #7
 8011644:	4416      	add	r6, r2
 8011646:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801164a:	dd3a      	ble.n	80116c2 <_svfprintf_r+0x114a>
 801164c:	9803      	ldr	r0, [sp, #12]
 801164e:	aa26      	add	r2, sp, #152	@ 0x98
 8011650:	4659      	mov	r1, fp
 8011652:	f001 fc7d 	bl	8012f50 <__ssprint_r>
 8011656:	2800      	cmp	r0, #0
 8011658:	f040 8109 	bne.w	801186e <_svfprintf_r+0x12f6>
 801165c:	ac29      	add	r4, sp, #164	@ 0xa4
 801165e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	4498      	add	r8, r3
 8011664:	e733      	b.n	80114ce <_svfprintf_r+0xf56>
 8011666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011668:	3b01      	subs	r3, #1
 801166a:	9309      	str	r3, [sp, #36]	@ 0x24
 801166c:	9b08      	ldr	r3, [sp, #32]
 801166e:	3b01      	subs	r3, #1
 8011670:	9308      	str	r3, [sp, #32]
 8011672:	e7ae      	b.n	80115d2 <_svfprintf_r+0x105a>
 8011674:	9803      	ldr	r0, [sp, #12]
 8011676:	aa26      	add	r2, sp, #152	@ 0x98
 8011678:	4659      	mov	r1, fp
 801167a:	f001 fc69 	bl	8012f50 <__ssprint_r>
 801167e:	2800      	cmp	r0, #0
 8011680:	f040 80f5 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011684:	ac29      	add	r4, sp, #164	@ 0xa4
 8011686:	e7b2      	b.n	80115ee <_svfprintf_r+0x1076>
 8011688:	9803      	ldr	r0, [sp, #12]
 801168a:	aa26      	add	r2, sp, #152	@ 0x98
 801168c:	4659      	mov	r1, fp
 801168e:	f001 fc5f 	bl	8012f50 <__ssprint_r>
 8011692:	2800      	cmp	r0, #0
 8011694:	f040 80eb 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011698:	ac29      	add	r4, sp, #164	@ 0xa4
 801169a:	e7be      	b.n	801161a <_svfprintf_r+0x10a2>
 801169c:	2010      	movs	r0, #16
 801169e:	4402      	add	r2, r0
 80116a0:	2b07      	cmp	r3, #7
 80116a2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80116a6:	6060      	str	r0, [r4, #4]
 80116a8:	dd08      	ble.n	80116bc <_svfprintf_r+0x1144>
 80116aa:	9803      	ldr	r0, [sp, #12]
 80116ac:	aa26      	add	r2, sp, #152	@ 0x98
 80116ae:	4659      	mov	r1, fp
 80116b0:	f001 fc4e 	bl	8012f50 <__ssprint_r>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	f040 80da 	bne.w	801186e <_svfprintf_r+0x12f6>
 80116ba:	a929      	add	r1, sp, #164	@ 0xa4
 80116bc:	3e10      	subs	r6, #16
 80116be:	460c      	mov	r4, r1
 80116c0:	e7b4      	b.n	801162c <_svfprintf_r+0x10b4>
 80116c2:	460c      	mov	r4, r1
 80116c4:	e7cb      	b.n	801165e <_svfprintf_r+0x10e6>
 80116c6:	9803      	ldr	r0, [sp, #12]
 80116c8:	aa26      	add	r2, sp, #152	@ 0x98
 80116ca:	4659      	mov	r1, fp
 80116cc:	f001 fc40 	bl	8012f50 <__ssprint_r>
 80116d0:	2800      	cmp	r0, #0
 80116d2:	f040 80cc 	bne.w	801186e <_svfprintf_r+0x12f6>
 80116d6:	ac29      	add	r4, sp, #164	@ 0xa4
 80116d8:	e717      	b.n	801150a <_svfprintf_r+0xf92>
 80116da:	9803      	ldr	r0, [sp, #12]
 80116dc:	aa26      	add	r2, sp, #152	@ 0x98
 80116de:	4659      	mov	r1, fp
 80116e0:	f001 fc36 	bl	8012f50 <__ssprint_r>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	f040 80c2 	bne.w	801186e <_svfprintf_r+0x12f6>
 80116ea:	ac29      	add	r4, sp, #164	@ 0xa4
 80116ec:	e724      	b.n	8011538 <_svfprintf_r+0xfc0>
 80116ee:	bf00      	nop
 80116f0:	080146ed 	.word	0x080146ed
 80116f4:	9904      	ldr	r1, [sp, #16]
 80116f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80116f8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80116fa:	2901      	cmp	r1, #1
 80116fc:	f103 0301 	add.w	r3, r3, #1
 8011700:	f102 0201 	add.w	r2, r2, #1
 8011704:	f104 0608 	add.w	r6, r4, #8
 8011708:	dc02      	bgt.n	8011710 <_svfprintf_r+0x1198>
 801170a:	07e9      	lsls	r1, r5, #31
 801170c:	f140 8083 	bpl.w	8011816 <_svfprintf_r+0x129e>
 8011710:	2101      	movs	r1, #1
 8011712:	2a07      	cmp	r2, #7
 8011714:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011718:	f8c4 9000 	str.w	r9, [r4]
 801171c:	6061      	str	r1, [r4, #4]
 801171e:	dd08      	ble.n	8011732 <_svfprintf_r+0x11ba>
 8011720:	9803      	ldr	r0, [sp, #12]
 8011722:	aa26      	add	r2, sp, #152	@ 0x98
 8011724:	4659      	mov	r1, fp
 8011726:	f001 fc13 	bl	8012f50 <__ssprint_r>
 801172a:	2800      	cmp	r0, #0
 801172c:	f040 809f 	bne.w	801186e <_svfprintf_r+0x12f6>
 8011730:	ae29      	add	r6, sp, #164	@ 0xa4
 8011732:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011734:	6033      	str	r3, [r6, #0]
 8011736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801173a:	6073      	str	r3, [r6, #4]
 801173c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801173e:	4413      	add	r3, r2
 8011740:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011742:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011744:	3301      	adds	r3, #1
 8011746:	2b07      	cmp	r3, #7
 8011748:	9327      	str	r3, [sp, #156]	@ 0x9c
 801174a:	dc33      	bgt.n	80117b4 <_svfprintf_r+0x123c>
 801174c:	3608      	adds	r6, #8
 801174e:	9b04      	ldr	r3, [sp, #16]
 8011750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011754:	1e5c      	subs	r4, r3, #1
 8011756:	2200      	movs	r2, #0
 8011758:	2300      	movs	r3, #0
 801175a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801175e:	f7ef f9bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8011762:	2800      	cmp	r0, #0
 8011764:	d12f      	bne.n	80117c6 <_svfprintf_r+0x124e>
 8011766:	f109 0201 	add.w	r2, r9, #1
 801176a:	e9c6 2400 	strd	r2, r4, [r6]
 801176e:	9a04      	ldr	r2, [sp, #16]
 8011770:	f108 0301 	add.w	r3, r8, #1
 8011774:	3f01      	subs	r7, #1
 8011776:	4417      	add	r7, r2
 8011778:	2b07      	cmp	r3, #7
 801177a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801177e:	dd53      	ble.n	8011828 <_svfprintf_r+0x12b0>
 8011780:	9803      	ldr	r0, [sp, #12]
 8011782:	aa26      	add	r2, sp, #152	@ 0x98
 8011784:	4659      	mov	r1, fp
 8011786:	f001 fbe3 	bl	8012f50 <__ssprint_r>
 801178a:	2800      	cmp	r0, #0
 801178c:	d16f      	bne.n	801186e <_svfprintf_r+0x12f6>
 801178e:	ae29      	add	r6, sp, #164	@ 0xa4
 8011790:	ab22      	add	r3, sp, #136	@ 0x88
 8011792:	6033      	str	r3, [r6, #0]
 8011794:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011796:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011798:	6073      	str	r3, [r6, #4]
 801179a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801179c:	4413      	add	r3, r2
 801179e:	9328      	str	r3, [sp, #160]	@ 0xa0
 80117a0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80117a2:	3301      	adds	r3, #1
 80117a4:	2b07      	cmp	r3, #7
 80117a6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80117a8:	f73f ada0 	bgt.w	80112ec <_svfprintf_r+0xd74>
 80117ac:	f106 0408 	add.w	r4, r6, #8
 80117b0:	f7ff baec 	b.w	8010d8c <_svfprintf_r+0x814>
 80117b4:	9803      	ldr	r0, [sp, #12]
 80117b6:	aa26      	add	r2, sp, #152	@ 0x98
 80117b8:	4659      	mov	r1, fp
 80117ba:	f001 fbc9 	bl	8012f50 <__ssprint_r>
 80117be:	2800      	cmp	r0, #0
 80117c0:	d155      	bne.n	801186e <_svfprintf_r+0x12f6>
 80117c2:	ae29      	add	r6, sp, #164	@ 0xa4
 80117c4:	e7c3      	b.n	801174e <_svfprintf_r+0x11d6>
 80117c6:	9b04      	ldr	r3, [sp, #16]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	dde1      	ble.n	8011790 <_svfprintf_r+0x1218>
 80117cc:	4f57      	ldr	r7, [pc, #348]	@ (801192c <_svfprintf_r+0x13b4>)
 80117ce:	f04f 0810 	mov.w	r8, #16
 80117d2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80117d6:	2c10      	cmp	r4, #16
 80117d8:	f103 0301 	add.w	r3, r3, #1
 80117dc:	f106 0108 	add.w	r1, r6, #8
 80117e0:	6037      	str	r7, [r6, #0]
 80117e2:	dc07      	bgt.n	80117f4 <_svfprintf_r+0x127c>
 80117e4:	6074      	str	r4, [r6, #4]
 80117e6:	2b07      	cmp	r3, #7
 80117e8:	4414      	add	r4, r2
 80117ea:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80117ee:	dcc7      	bgt.n	8011780 <_svfprintf_r+0x1208>
 80117f0:	460e      	mov	r6, r1
 80117f2:	e7cd      	b.n	8011790 <_svfprintf_r+0x1218>
 80117f4:	3210      	adds	r2, #16
 80117f6:	2b07      	cmp	r3, #7
 80117f8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80117fc:	f8c6 8004 	str.w	r8, [r6, #4]
 8011800:	dd06      	ble.n	8011810 <_svfprintf_r+0x1298>
 8011802:	9803      	ldr	r0, [sp, #12]
 8011804:	aa26      	add	r2, sp, #152	@ 0x98
 8011806:	4659      	mov	r1, fp
 8011808:	f001 fba2 	bl	8012f50 <__ssprint_r>
 801180c:	bb78      	cbnz	r0, 801186e <_svfprintf_r+0x12f6>
 801180e:	a929      	add	r1, sp, #164	@ 0xa4
 8011810:	3c10      	subs	r4, #16
 8011812:	460e      	mov	r6, r1
 8011814:	e7dd      	b.n	80117d2 <_svfprintf_r+0x125a>
 8011816:	2101      	movs	r1, #1
 8011818:	2a07      	cmp	r2, #7
 801181a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801181e:	f8c4 9000 	str.w	r9, [r4]
 8011822:	6061      	str	r1, [r4, #4]
 8011824:	ddb4      	ble.n	8011790 <_svfprintf_r+0x1218>
 8011826:	e7ab      	b.n	8011780 <_svfprintf_r+0x1208>
 8011828:	3608      	adds	r6, #8
 801182a:	e7b1      	b.n	8011790 <_svfprintf_r+0x1218>
 801182c:	460c      	mov	r4, r1
 801182e:	f7ff baad 	b.w	8010d8c <_svfprintf_r+0x814>
 8011832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011834:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011836:	1a9d      	subs	r5, r3, r2
 8011838:	2d00      	cmp	r5, #0
 801183a:	f77f aaaa 	ble.w	8010d92 <_svfprintf_r+0x81a>
 801183e:	4e3c      	ldr	r6, [pc, #240]	@ (8011930 <_svfprintf_r+0x13b8>)
 8011840:	2710      	movs	r7, #16
 8011842:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8011846:	2d10      	cmp	r5, #16
 8011848:	f103 0301 	add.w	r3, r3, #1
 801184c:	6026      	str	r6, [r4, #0]
 801184e:	dc18      	bgt.n	8011882 <_svfprintf_r+0x130a>
 8011850:	442a      	add	r2, r5
 8011852:	2b07      	cmp	r3, #7
 8011854:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011858:	6065      	str	r5, [r4, #4]
 801185a:	f77f aa9a 	ble.w	8010d92 <_svfprintf_r+0x81a>
 801185e:	9803      	ldr	r0, [sp, #12]
 8011860:	aa26      	add	r2, sp, #152	@ 0x98
 8011862:	4659      	mov	r1, fp
 8011864:	f001 fb74 	bl	8012f50 <__ssprint_r>
 8011868:	2800      	cmp	r0, #0
 801186a:	f43f aa92 	beq.w	8010d92 <_svfprintf_r+0x81a>
 801186e:	f1ba 0f00 	cmp.w	sl, #0
 8011872:	f43f a89a 	beq.w	80109aa <_svfprintf_r+0x432>
 8011876:	9803      	ldr	r0, [sp, #12]
 8011878:	4651      	mov	r1, sl
 801187a:	f7fe fdbb 	bl	80103f4 <_free_r>
 801187e:	f7ff b894 	b.w	80109aa <_svfprintf_r+0x432>
 8011882:	3210      	adds	r2, #16
 8011884:	2b07      	cmp	r3, #7
 8011886:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801188a:	6067      	str	r7, [r4, #4]
 801188c:	dc02      	bgt.n	8011894 <_svfprintf_r+0x131c>
 801188e:	3408      	adds	r4, #8
 8011890:	3d10      	subs	r5, #16
 8011892:	e7d6      	b.n	8011842 <_svfprintf_r+0x12ca>
 8011894:	9803      	ldr	r0, [sp, #12]
 8011896:	aa26      	add	r2, sp, #152	@ 0x98
 8011898:	4659      	mov	r1, fp
 801189a:	f001 fb59 	bl	8012f50 <__ssprint_r>
 801189e:	2800      	cmp	r0, #0
 80118a0:	d1e5      	bne.n	801186e <_svfprintf_r+0x12f6>
 80118a2:	ac29      	add	r4, sp, #164	@ 0xa4
 80118a4:	e7f4      	b.n	8011890 <_svfprintf_r+0x1318>
 80118a6:	9803      	ldr	r0, [sp, #12]
 80118a8:	4651      	mov	r1, sl
 80118aa:	f7fe fda3 	bl	80103f4 <_free_r>
 80118ae:	f7ff ba88 	b.w	8010dc2 <_svfprintf_r+0x84a>
 80118b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f43f a878 	beq.w	80109aa <_svfprintf_r+0x432>
 80118ba:	9803      	ldr	r0, [sp, #12]
 80118bc:	aa26      	add	r2, sp, #152	@ 0x98
 80118be:	4659      	mov	r1, fp
 80118c0:	f001 fb46 	bl	8012f50 <__ssprint_r>
 80118c4:	f7ff b871 	b.w	80109aa <_svfprintf_r+0x432>
 80118c8:	ea56 0207 	orrs.w	r2, r6, r7
 80118cc:	9508      	str	r5, [sp, #32]
 80118ce:	f43f ab7a 	beq.w	8010fc6 <_svfprintf_r+0xa4e>
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	f43f abfb 	beq.w	80110ce <_svfprintf_r+0xb56>
 80118d8:	2b02      	cmp	r3, #2
 80118da:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80118de:	f43f ac3f 	beq.w	8011160 <_svfprintf_r+0xbe8>
 80118e2:	f006 0307 	and.w	r3, r6, #7
 80118e6:	08f6      	lsrs	r6, r6, #3
 80118e8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80118ec:	08ff      	lsrs	r7, r7, #3
 80118ee:	3330      	adds	r3, #48	@ 0x30
 80118f0:	ea56 0107 	orrs.w	r1, r6, r7
 80118f4:	464a      	mov	r2, r9
 80118f6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80118fa:	d1f2      	bne.n	80118e2 <_svfprintf_r+0x136a>
 80118fc:	9908      	ldr	r1, [sp, #32]
 80118fe:	07c8      	lsls	r0, r1, #31
 8011900:	d506      	bpl.n	8011910 <_svfprintf_r+0x1398>
 8011902:	2b30      	cmp	r3, #48	@ 0x30
 8011904:	d004      	beq.n	8011910 <_svfprintf_r+0x1398>
 8011906:	2330      	movs	r3, #48	@ 0x30
 8011908:	f809 3c01 	strb.w	r3, [r9, #-1]
 801190c:	f1a2 0902 	sub.w	r9, r2, #2
 8011910:	ab52      	add	r3, sp, #328	@ 0x148
 8011912:	9d08      	ldr	r5, [sp, #32]
 8011914:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8011918:	f04f 0a00 	mov.w	sl, #0
 801191c:	eba3 0809 	sub.w	r8, r3, r9
 8011920:	4657      	mov	r7, sl
 8011922:	f8cd a020 	str.w	sl, [sp, #32]
 8011926:	4656      	mov	r6, sl
 8011928:	f7ff b97c 	b.w	8010c24 <_svfprintf_r+0x6ac>
 801192c:	080146ed 	.word	0x080146ed
 8011930:	080146fd 	.word	0x080146fd

08011934 <_fclose_r>:
 8011934:	b570      	push	{r4, r5, r6, lr}
 8011936:	4605      	mov	r5, r0
 8011938:	460c      	mov	r4, r1
 801193a:	b1b1      	cbz	r1, 801196a <_fclose_r+0x36>
 801193c:	b118      	cbz	r0, 8011946 <_fclose_r+0x12>
 801193e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011940:	b90b      	cbnz	r3, 8011946 <_fclose_r+0x12>
 8011942:	f7fe faed 	bl	800ff20 <__sinit>
 8011946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011948:	07de      	lsls	r6, r3, #31
 801194a:	d405      	bmi.n	8011958 <_fclose_r+0x24>
 801194c:	89a3      	ldrh	r3, [r4, #12]
 801194e:	0598      	lsls	r0, r3, #22
 8011950:	d402      	bmi.n	8011958 <_fclose_r+0x24>
 8011952:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011954:	f7fe fccc 	bl	80102f0 <__retarget_lock_acquire_recursive>
 8011958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801195c:	b943      	cbnz	r3, 8011970 <_fclose_r+0x3c>
 801195e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011960:	07d9      	lsls	r1, r3, #31
 8011962:	d402      	bmi.n	801196a <_fclose_r+0x36>
 8011964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011966:	f7fe fcc4 	bl	80102f2 <__retarget_lock_release_recursive>
 801196a:	2600      	movs	r6, #0
 801196c:	4630      	mov	r0, r6
 801196e:	bd70      	pop	{r4, r5, r6, pc}
 8011970:	4621      	mov	r1, r4
 8011972:	4628      	mov	r0, r5
 8011974:	f000 f834 	bl	80119e0 <__sflush_r>
 8011978:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801197a:	4606      	mov	r6, r0
 801197c:	b133      	cbz	r3, 801198c <_fclose_r+0x58>
 801197e:	69e1      	ldr	r1, [r4, #28]
 8011980:	4628      	mov	r0, r5
 8011982:	4798      	blx	r3
 8011984:	2800      	cmp	r0, #0
 8011986:	bfb8      	it	lt
 8011988:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	061a      	lsls	r2, r3, #24
 8011990:	d503      	bpl.n	801199a <_fclose_r+0x66>
 8011992:	6921      	ldr	r1, [r4, #16]
 8011994:	4628      	mov	r0, r5
 8011996:	f7fe fd2d 	bl	80103f4 <_free_r>
 801199a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801199c:	b141      	cbz	r1, 80119b0 <_fclose_r+0x7c>
 801199e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80119a2:	4299      	cmp	r1, r3
 80119a4:	d002      	beq.n	80119ac <_fclose_r+0x78>
 80119a6:	4628      	mov	r0, r5
 80119a8:	f7fe fd24 	bl	80103f4 <_free_r>
 80119ac:	2300      	movs	r3, #0
 80119ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80119b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80119b2:	b121      	cbz	r1, 80119be <_fclose_r+0x8a>
 80119b4:	4628      	mov	r0, r5
 80119b6:	f7fe fd1d 	bl	80103f4 <_free_r>
 80119ba:	2300      	movs	r3, #0
 80119bc:	6463      	str	r3, [r4, #68]	@ 0x44
 80119be:	f7fe faa3 	bl	800ff08 <__sfp_lock_acquire>
 80119c2:	2300      	movs	r3, #0
 80119c4:	81a3      	strh	r3, [r4, #12]
 80119c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119c8:	07db      	lsls	r3, r3, #31
 80119ca:	d402      	bmi.n	80119d2 <_fclose_r+0x9e>
 80119cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119ce:	f7fe fc90 	bl	80102f2 <__retarget_lock_release_recursive>
 80119d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119d4:	f7fe fc8b 	bl	80102ee <__retarget_lock_close_recursive>
 80119d8:	f7fe fa9c 	bl	800ff14 <__sfp_lock_release>
 80119dc:	e7c6      	b.n	801196c <_fclose_r+0x38>
	...

080119e0 <__sflush_r>:
 80119e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119e4:	4605      	mov	r5, r0
 80119e6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80119ea:	0706      	lsls	r6, r0, #28
 80119ec:	460c      	mov	r4, r1
 80119ee:	d457      	bmi.n	8011aa0 <__sflush_r+0xc0>
 80119f0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 80119f4:	818b      	strh	r3, [r1, #12]
 80119f6:	684b      	ldr	r3, [r1, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	dc02      	bgt.n	8011a02 <__sflush_r+0x22>
 80119fc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	dd4c      	ble.n	8011a9c <__sflush_r+0xbc>
 8011a02:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011a04:	2e00      	cmp	r6, #0
 8011a06:	d049      	beq.n	8011a9c <__sflush_r+0xbc>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8011a0e:	682f      	ldr	r7, [r5, #0]
 8011a10:	69e1      	ldr	r1, [r4, #28]
 8011a12:	602b      	str	r3, [r5, #0]
 8011a14:	d034      	beq.n	8011a80 <__sflush_r+0xa0>
 8011a16:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8011a18:	89a3      	ldrh	r3, [r4, #12]
 8011a1a:	0759      	lsls	r1, r3, #29
 8011a1c:	d505      	bpl.n	8011a2a <__sflush_r+0x4a>
 8011a1e:	6863      	ldr	r3, [r4, #4]
 8011a20:	1ad2      	subs	r2, r2, r3
 8011a22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a24:	b10b      	cbz	r3, 8011a2a <__sflush_r+0x4a>
 8011a26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011a28:	1ad2      	subs	r2, r2, r3
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011a2e:	69e1      	ldr	r1, [r4, #28]
 8011a30:	4628      	mov	r0, r5
 8011a32:	47b0      	blx	r6
 8011a34:	1c43      	adds	r3, r0, #1
 8011a36:	d106      	bne.n	8011a46 <__sflush_r+0x66>
 8011a38:	682a      	ldr	r2, [r5, #0]
 8011a3a:	2a1d      	cmp	r2, #29
 8011a3c:	d848      	bhi.n	8011ad0 <__sflush_r+0xf0>
 8011a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8011aec <__sflush_r+0x10c>)
 8011a40:	4113      	asrs	r3, r2
 8011a42:	07de      	lsls	r6, r3, #31
 8011a44:	d444      	bmi.n	8011ad0 <__sflush_r+0xf0>
 8011a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a4a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011a4e:	81a2      	strh	r2, [r4, #12]
 8011a50:	2200      	movs	r2, #0
 8011a52:	6062      	str	r2, [r4, #4]
 8011a54:	04d9      	lsls	r1, r3, #19
 8011a56:	6922      	ldr	r2, [r4, #16]
 8011a58:	6022      	str	r2, [r4, #0]
 8011a5a:	d504      	bpl.n	8011a66 <__sflush_r+0x86>
 8011a5c:	1c42      	adds	r2, r0, #1
 8011a5e:	d101      	bne.n	8011a64 <__sflush_r+0x84>
 8011a60:	682b      	ldr	r3, [r5, #0]
 8011a62:	b903      	cbnz	r3, 8011a66 <__sflush_r+0x86>
 8011a64:	6520      	str	r0, [r4, #80]	@ 0x50
 8011a66:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011a68:	602f      	str	r7, [r5, #0]
 8011a6a:	b1b9      	cbz	r1, 8011a9c <__sflush_r+0xbc>
 8011a6c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011a70:	4299      	cmp	r1, r3
 8011a72:	d002      	beq.n	8011a7a <__sflush_r+0x9a>
 8011a74:	4628      	mov	r0, r5
 8011a76:	f7fe fcbd 	bl	80103f4 <_free_r>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a7e:	e00d      	b.n	8011a9c <__sflush_r+0xbc>
 8011a80:	2301      	movs	r3, #1
 8011a82:	4628      	mov	r0, r5
 8011a84:	47b0      	blx	r6
 8011a86:	4602      	mov	r2, r0
 8011a88:	1c50      	adds	r0, r2, #1
 8011a8a:	d1c5      	bne.n	8011a18 <__sflush_r+0x38>
 8011a8c:	682b      	ldr	r3, [r5, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d0c2      	beq.n	8011a18 <__sflush_r+0x38>
 8011a92:	2b1d      	cmp	r3, #29
 8011a94:	d001      	beq.n	8011a9a <__sflush_r+0xba>
 8011a96:	2b16      	cmp	r3, #22
 8011a98:	d11a      	bne.n	8011ad0 <__sflush_r+0xf0>
 8011a9a:	602f      	str	r7, [r5, #0]
 8011a9c:	2000      	movs	r0, #0
 8011a9e:	e01e      	b.n	8011ade <__sflush_r+0xfe>
 8011aa0:	690f      	ldr	r7, [r1, #16]
 8011aa2:	2f00      	cmp	r7, #0
 8011aa4:	d0fa      	beq.n	8011a9c <__sflush_r+0xbc>
 8011aa6:	0783      	lsls	r3, r0, #30
 8011aa8:	680e      	ldr	r6, [r1, #0]
 8011aaa:	bf08      	it	eq
 8011aac:	694b      	ldreq	r3, [r1, #20]
 8011aae:	600f      	str	r7, [r1, #0]
 8011ab0:	bf18      	it	ne
 8011ab2:	2300      	movne	r3, #0
 8011ab4:	eba6 0807 	sub.w	r8, r6, r7
 8011ab8:	608b      	str	r3, [r1, #8]
 8011aba:	f1b8 0f00 	cmp.w	r8, #0
 8011abe:	dded      	ble.n	8011a9c <__sflush_r+0xbc>
 8011ac0:	69e1      	ldr	r1, [r4, #28]
 8011ac2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8011ac4:	4643      	mov	r3, r8
 8011ac6:	463a      	mov	r2, r7
 8011ac8:	4628      	mov	r0, r5
 8011aca:	47b0      	blx	r6
 8011acc:	2800      	cmp	r0, #0
 8011ace:	dc08      	bgt.n	8011ae2 <__sflush_r+0x102>
 8011ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ad8:	81a3      	strh	r3, [r4, #12]
 8011ada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae2:	4407      	add	r7, r0
 8011ae4:	eba8 0800 	sub.w	r8, r8, r0
 8011ae8:	e7e7      	b.n	8011aba <__sflush_r+0xda>
 8011aea:	bf00      	nop
 8011aec:	dfbffffe 	.word	0xdfbffffe

08011af0 <_fflush_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	460c      	mov	r4, r1
 8011af4:	4605      	mov	r5, r0
 8011af6:	b118      	cbz	r0, 8011b00 <_fflush_r+0x10>
 8011af8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011afa:	b90b      	cbnz	r3, 8011b00 <_fflush_r+0x10>
 8011afc:	f7fe fa10 	bl	800ff20 <__sinit>
 8011b00:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8011b04:	b1b8      	cbz	r0, 8011b36 <_fflush_r+0x46>
 8011b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b08:	07db      	lsls	r3, r3, #31
 8011b0a:	d404      	bmi.n	8011b16 <_fflush_r+0x26>
 8011b0c:	0581      	lsls	r1, r0, #22
 8011b0e:	d402      	bmi.n	8011b16 <_fflush_r+0x26>
 8011b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b12:	f7fe fbed 	bl	80102f0 <__retarget_lock_acquire_recursive>
 8011b16:	4628      	mov	r0, r5
 8011b18:	4621      	mov	r1, r4
 8011b1a:	f7ff ff61 	bl	80119e0 <__sflush_r>
 8011b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b20:	07da      	lsls	r2, r3, #31
 8011b22:	4605      	mov	r5, r0
 8011b24:	d405      	bmi.n	8011b32 <_fflush_r+0x42>
 8011b26:	89a3      	ldrh	r3, [r4, #12]
 8011b28:	059b      	lsls	r3, r3, #22
 8011b2a:	d402      	bmi.n	8011b32 <_fflush_r+0x42>
 8011b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b2e:	f7fe fbe0 	bl	80102f2 <__retarget_lock_release_recursive>
 8011b32:	4628      	mov	r0, r5
 8011b34:	bd38      	pop	{r3, r4, r5, pc}
 8011b36:	4605      	mov	r5, r0
 8011b38:	e7fb      	b.n	8011b32 <_fflush_r+0x42>

08011b3a <strncpy>:
 8011b3a:	b510      	push	{r4, lr}
 8011b3c:	3901      	subs	r1, #1
 8011b3e:	4603      	mov	r3, r0
 8011b40:	b132      	cbz	r2, 8011b50 <strncpy+0x16>
 8011b42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011b46:	f803 4b01 	strb.w	r4, [r3], #1
 8011b4a:	3a01      	subs	r2, #1
 8011b4c:	2c00      	cmp	r4, #0
 8011b4e:	d1f7      	bne.n	8011b40 <strncpy+0x6>
 8011b50:	441a      	add	r2, r3
 8011b52:	2100      	movs	r1, #0
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d100      	bne.n	8011b5a <strncpy+0x20>
 8011b58:	bd10      	pop	{r4, pc}
 8011b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8011b5e:	e7f9      	b.n	8011b54 <strncpy+0x1a>

08011b60 <_localeconv_r>:
 8011b60:	4800      	ldr	r0, [pc, #0]	@ (8011b64 <_localeconv_r+0x4>)
 8011b62:	4770      	bx	lr
 8011b64:	20000744 	.word	0x20000744

08011b68 <__libc_fini_array>:
 8011b68:	b538      	push	{r3, r4, r5, lr}
 8011b6a:	4d07      	ldr	r5, [pc, #28]	@ (8011b88 <__libc_fini_array+0x20>)
 8011b6c:	4c07      	ldr	r4, [pc, #28]	@ (8011b8c <__libc_fini_array+0x24>)
 8011b6e:	1b64      	subs	r4, r4, r5
 8011b70:	10a4      	asrs	r4, r4, #2
 8011b72:	b91c      	cbnz	r4, 8011b7c <__libc_fini_array+0x14>
 8011b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b78:	f002 bc8e 	b.w	8014498 <_fini>
 8011b7c:	3c01      	subs	r4, #1
 8011b7e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011b82:	4798      	blx	r3
 8011b84:	e7f5      	b.n	8011b72 <__libc_fini_array+0xa>
 8011b86:	bf00      	nop
 8011b88:	08014958 	.word	0x08014958
 8011b8c:	0801495c 	.word	0x0801495c

08011b90 <frexp>:
 8011b90:	b570      	push	{r4, r5, r6, lr}
 8011b92:	2100      	movs	r1, #0
 8011b94:	ec55 4b10 	vmov	r4, r5, d0
 8011b98:	6001      	str	r1, [r0, #0]
 8011b9a:	4915      	ldr	r1, [pc, #84]	@ (8011bf0 <frexp+0x60>)
 8011b9c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011ba0:	428a      	cmp	r2, r1
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	462b      	mov	r3, r5
 8011ba6:	d820      	bhi.n	8011bea <frexp+0x5a>
 8011ba8:	4621      	mov	r1, r4
 8011baa:	4311      	orrs	r1, r2
 8011bac:	d01d      	beq.n	8011bea <frexp+0x5a>
 8011bae:	4911      	ldr	r1, [pc, #68]	@ (8011bf4 <frexp+0x64>)
 8011bb0:	4029      	ands	r1, r5
 8011bb2:	b961      	cbnz	r1, 8011bce <frexp+0x3e>
 8011bb4:	4b10      	ldr	r3, [pc, #64]	@ (8011bf8 <frexp+0x68>)
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	4620      	mov	r0, r4
 8011bba:	4629      	mov	r1, r5
 8011bbc:	f7ee fd24 	bl	8000608 <__aeabi_dmul>
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8011bc6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8011bca:	4604      	mov	r4, r0
 8011bcc:	6031      	str	r1, [r6, #0]
 8011bce:	6831      	ldr	r1, [r6, #0]
 8011bd0:	1512      	asrs	r2, r2, #20
 8011bd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011bd6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8011bda:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011bde:	4411      	add	r1, r2
 8011be0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8011be4:	6031      	str	r1, [r6, #0]
 8011be6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8011bea:	ec45 4b10 	vmov	d0, r4, r5
 8011bee:	bd70      	pop	{r4, r5, r6, pc}
 8011bf0:	7fefffff 	.word	0x7fefffff
 8011bf4:	7ff00000 	.word	0x7ff00000
 8011bf8:	43500000 	.word	0x43500000

08011bfc <__register_exitproc>:
 8011bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c00:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8011c78 <__register_exitproc+0x7c>
 8011c04:	4606      	mov	r6, r0
 8011c06:	f8da 0000 	ldr.w	r0, [sl]
 8011c0a:	4698      	mov	r8, r3
 8011c0c:	460f      	mov	r7, r1
 8011c0e:	4691      	mov	r9, r2
 8011c10:	f7fe fb6e 	bl	80102f0 <__retarget_lock_acquire_recursive>
 8011c14:	4b16      	ldr	r3, [pc, #88]	@ (8011c70 <__register_exitproc+0x74>)
 8011c16:	681c      	ldr	r4, [r3, #0]
 8011c18:	b90c      	cbnz	r4, 8011c1e <__register_exitproc+0x22>
 8011c1a:	4c16      	ldr	r4, [pc, #88]	@ (8011c74 <__register_exitproc+0x78>)
 8011c1c:	601c      	str	r4, [r3, #0]
 8011c1e:	6865      	ldr	r5, [r4, #4]
 8011c20:	f8da 0000 	ldr.w	r0, [sl]
 8011c24:	2d1f      	cmp	r5, #31
 8011c26:	dd05      	ble.n	8011c34 <__register_exitproc+0x38>
 8011c28:	f7fe fb63 	bl	80102f2 <__retarget_lock_release_recursive>
 8011c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c34:	b19e      	cbz	r6, 8011c5e <__register_exitproc+0x62>
 8011c36:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8011c40:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8011c44:	40aa      	lsls	r2, r5
 8011c46:	4313      	orrs	r3, r2
 8011c48:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8011c4c:	2e02      	cmp	r6, #2
 8011c4e:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8011c52:	bf02      	ittt	eq
 8011c54:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8011c58:	4313      	orreq	r3, r2
 8011c5a:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8011c5e:	1c6b      	adds	r3, r5, #1
 8011c60:	3502      	adds	r5, #2
 8011c62:	6063      	str	r3, [r4, #4]
 8011c64:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8011c68:	f7fe fb43 	bl	80102f2 <__retarget_lock_release_recursive>
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	e7df      	b.n	8011c30 <__register_exitproc+0x34>
 8011c70:	20002094 	.word	0x20002094
 8011c74:	20002098 	.word	0x20002098
 8011c78:	20000650 	.word	0x20000650

08011c7c <quorem>:
 8011c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c80:	6903      	ldr	r3, [r0, #16]
 8011c82:	690c      	ldr	r4, [r1, #16]
 8011c84:	42a3      	cmp	r3, r4
 8011c86:	4607      	mov	r7, r0
 8011c88:	db7e      	blt.n	8011d88 <quorem+0x10c>
 8011c8a:	3c01      	subs	r4, #1
 8011c8c:	f101 0814 	add.w	r8, r1, #20
 8011c90:	00a3      	lsls	r3, r4, #2
 8011c92:	f100 0514 	add.w	r5, r0, #20
 8011c96:	9300      	str	r3, [sp, #0]
 8011c98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ca2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011cae:	fbb2 f6f3 	udiv	r6, r2, r3
 8011cb2:	d32e      	bcc.n	8011d12 <quorem+0x96>
 8011cb4:	f04f 0a00 	mov.w	sl, #0
 8011cb8:	46c4      	mov	ip, r8
 8011cba:	46ae      	mov	lr, r5
 8011cbc:	46d3      	mov	fp, sl
 8011cbe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011cc2:	b298      	uxth	r0, r3
 8011cc4:	fb06 a000 	mla	r0, r6, r0, sl
 8011cc8:	0c02      	lsrs	r2, r0, #16
 8011cca:	0c1b      	lsrs	r3, r3, #16
 8011ccc:	fb06 2303 	mla	r3, r6, r3, r2
 8011cd0:	f8de 2000 	ldr.w	r2, [lr]
 8011cd4:	b280      	uxth	r0, r0
 8011cd6:	b292      	uxth	r2, r2
 8011cd8:	1a12      	subs	r2, r2, r0
 8011cda:	445a      	add	r2, fp
 8011cdc:	f8de 0000 	ldr.w	r0, [lr]
 8011ce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011cea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011cee:	b292      	uxth	r2, r2
 8011cf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011cf4:	45e1      	cmp	r9, ip
 8011cf6:	f84e 2b04 	str.w	r2, [lr], #4
 8011cfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011cfe:	d2de      	bcs.n	8011cbe <quorem+0x42>
 8011d00:	9b00      	ldr	r3, [sp, #0]
 8011d02:	58eb      	ldr	r3, [r5, r3]
 8011d04:	b92b      	cbnz	r3, 8011d12 <quorem+0x96>
 8011d06:	9b01      	ldr	r3, [sp, #4]
 8011d08:	3b04      	subs	r3, #4
 8011d0a:	429d      	cmp	r5, r3
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	d32f      	bcc.n	8011d70 <quorem+0xf4>
 8011d10:	613c      	str	r4, [r7, #16]
 8011d12:	4638      	mov	r0, r7
 8011d14:	f001 f814 	bl	8012d40 <__mcmp>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	db25      	blt.n	8011d68 <quorem+0xec>
 8011d1c:	4629      	mov	r1, r5
 8011d1e:	2000      	movs	r0, #0
 8011d20:	f858 2b04 	ldr.w	r2, [r8], #4
 8011d24:	f8d1 c000 	ldr.w	ip, [r1]
 8011d28:	fa1f fe82 	uxth.w	lr, r2
 8011d2c:	fa1f f38c 	uxth.w	r3, ip
 8011d30:	eba3 030e 	sub.w	r3, r3, lr
 8011d34:	4403      	add	r3, r0
 8011d36:	0c12      	lsrs	r2, r2, #16
 8011d38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011d3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d46:	45c1      	cmp	r9, r8
 8011d48:	f841 3b04 	str.w	r3, [r1], #4
 8011d4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011d50:	d2e6      	bcs.n	8011d20 <quorem+0xa4>
 8011d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d5a:	b922      	cbnz	r2, 8011d66 <quorem+0xea>
 8011d5c:	3b04      	subs	r3, #4
 8011d5e:	429d      	cmp	r5, r3
 8011d60:	461a      	mov	r2, r3
 8011d62:	d30b      	bcc.n	8011d7c <quorem+0x100>
 8011d64:	613c      	str	r4, [r7, #16]
 8011d66:	3601      	adds	r6, #1
 8011d68:	4630      	mov	r0, r6
 8011d6a:	b003      	add	sp, #12
 8011d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d70:	6812      	ldr	r2, [r2, #0]
 8011d72:	3b04      	subs	r3, #4
 8011d74:	2a00      	cmp	r2, #0
 8011d76:	d1cb      	bne.n	8011d10 <quorem+0x94>
 8011d78:	3c01      	subs	r4, #1
 8011d7a:	e7c6      	b.n	8011d0a <quorem+0x8e>
 8011d7c:	6812      	ldr	r2, [r2, #0]
 8011d7e:	3b04      	subs	r3, #4
 8011d80:	2a00      	cmp	r2, #0
 8011d82:	d1ef      	bne.n	8011d64 <quorem+0xe8>
 8011d84:	3c01      	subs	r4, #1
 8011d86:	e7ea      	b.n	8011d5e <quorem+0xe2>
 8011d88:	2000      	movs	r0, #0
 8011d8a:	e7ee      	b.n	8011d6a <quorem+0xee>
 8011d8c:	0000      	movs	r0, r0
	...

08011d90 <_dtoa_r>:
 8011d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d94:	b099      	sub	sp, #100	@ 0x64
 8011d96:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011d9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d9c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8011d9e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011da2:	ec55 4b10 	vmov	r4, r5, d0
 8011da6:	4683      	mov	fp, r0
 8011da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011daa:	b149      	cbz	r1, 8011dc0 <_dtoa_r+0x30>
 8011dac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011dae:	604a      	str	r2, [r1, #4]
 8011db0:	2301      	movs	r3, #1
 8011db2:	4093      	lsls	r3, r2
 8011db4:	608b      	str	r3, [r1, #8]
 8011db6:	f000 fdbc 	bl	8012932 <_Bfree>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8011dc0:	1e2b      	subs	r3, r5, #0
 8011dc2:	bfb9      	ittee	lt
 8011dc4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011dc8:	9303      	strlt	r3, [sp, #12]
 8011dca:	2300      	movge	r3, #0
 8011dcc:	6033      	strge	r3, [r6, #0]
 8011dce:	9f03      	ldr	r7, [sp, #12]
 8011dd0:	4b97      	ldr	r3, [pc, #604]	@ (8012030 <_dtoa_r+0x2a0>)
 8011dd2:	bfbc      	itt	lt
 8011dd4:	2201      	movlt	r2, #1
 8011dd6:	6032      	strlt	r2, [r6, #0]
 8011dd8:	43bb      	bics	r3, r7
 8011dda:	d114      	bne.n	8011e06 <_dtoa_r+0x76>
 8011ddc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011dde:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011de2:	6013      	str	r3, [r2, #0]
 8011de4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011de8:	4323      	orrs	r3, r4
 8011dea:	f000 854c 	beq.w	8012886 <_dtoa_r+0xaf6>
 8011dee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011df0:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012048 <_dtoa_r+0x2b8>
 8011df4:	b11b      	cbz	r3, 8011dfe <_dtoa_r+0x6e>
 8011df6:	f10a 0303 	add.w	r3, sl, #3
 8011dfa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	4650      	mov	r0, sl
 8011e00:	b019      	add	sp, #100	@ 0x64
 8011e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	ec51 0b17 	vmov	r0, r1, d7
 8011e10:	2300      	movs	r3, #0
 8011e12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011e16:	f7ee fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8011e1a:	4680      	mov	r8, r0
 8011e1c:	b150      	cbz	r0, 8011e34 <_dtoa_r+0xa4>
 8011e1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011e20:	2301      	movs	r3, #1
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e26:	b113      	cbz	r3, 8011e2e <_dtoa_r+0x9e>
 8011e28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011e2a:	4b82      	ldr	r3, [pc, #520]	@ (8012034 <_dtoa_r+0x2a4>)
 8011e2c:	6013      	str	r3, [r2, #0]
 8011e2e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801204c <_dtoa_r+0x2bc>
 8011e32:	e7e4      	b.n	8011dfe <_dtoa_r+0x6e>
 8011e34:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011e38:	aa16      	add	r2, sp, #88	@ 0x58
 8011e3a:	a917      	add	r1, sp, #92	@ 0x5c
 8011e3c:	4658      	mov	r0, fp
 8011e3e:	f001 f82f 	bl	8012ea0 <__d2b>
 8011e42:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011e46:	4681      	mov	r9, r0
 8011e48:	2e00      	cmp	r6, #0
 8011e4a:	d077      	beq.n	8011f3c <_dtoa_r+0x1ac>
 8011e4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e4e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e5a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011e5e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011e62:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011e66:	4619      	mov	r1, r3
 8011e68:	2200      	movs	r2, #0
 8011e6a:	4b73      	ldr	r3, [pc, #460]	@ (8012038 <_dtoa_r+0x2a8>)
 8011e6c:	f7ee fa14 	bl	8000298 <__aeabi_dsub>
 8011e70:	a369      	add	r3, pc, #420	@ (adr r3, 8012018 <_dtoa_r+0x288>)
 8011e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e76:	f7ee fbc7 	bl	8000608 <__aeabi_dmul>
 8011e7a:	a369      	add	r3, pc, #420	@ (adr r3, 8012020 <_dtoa_r+0x290>)
 8011e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e80:	f7ee fa0c 	bl	800029c <__adddf3>
 8011e84:	4604      	mov	r4, r0
 8011e86:	4630      	mov	r0, r6
 8011e88:	460d      	mov	r5, r1
 8011e8a:	f7ee fb53 	bl	8000534 <__aeabi_i2d>
 8011e8e:	a366      	add	r3, pc, #408	@ (adr r3, 8012028 <_dtoa_r+0x298>)
 8011e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e94:	f7ee fbb8 	bl	8000608 <__aeabi_dmul>
 8011e98:	4602      	mov	r2, r0
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	f7ee f9fc 	bl	800029c <__adddf3>
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	460d      	mov	r5, r1
 8011ea8:	f7ee fe5e 	bl	8000b68 <__aeabi_d2iz>
 8011eac:	2200      	movs	r2, #0
 8011eae:	4607      	mov	r7, r0
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	4629      	mov	r1, r5
 8011eb6:	f7ee fe19 	bl	8000aec <__aeabi_dcmplt>
 8011eba:	b140      	cbz	r0, 8011ece <_dtoa_r+0x13e>
 8011ebc:	4638      	mov	r0, r7
 8011ebe:	f7ee fb39 	bl	8000534 <__aeabi_i2d>
 8011ec2:	4622      	mov	r2, r4
 8011ec4:	462b      	mov	r3, r5
 8011ec6:	f7ee fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 8011eca:	b900      	cbnz	r0, 8011ece <_dtoa_r+0x13e>
 8011ecc:	3f01      	subs	r7, #1
 8011ece:	2f16      	cmp	r7, #22
 8011ed0:	d851      	bhi.n	8011f76 <_dtoa_r+0x1e6>
 8011ed2:	4b5a      	ldr	r3, [pc, #360]	@ (801203c <_dtoa_r+0x2ac>)
 8011ed4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011edc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ee0:	f7ee fe04 	bl	8000aec <__aeabi_dcmplt>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d048      	beq.n	8011f7a <_dtoa_r+0x1ea>
 8011ee8:	3f01      	subs	r7, #1
 8011eea:	2300      	movs	r3, #0
 8011eec:	9312      	str	r3, [sp, #72]	@ 0x48
 8011eee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011ef0:	1b9b      	subs	r3, r3, r6
 8011ef2:	1e5a      	subs	r2, r3, #1
 8011ef4:	bf44      	itt	mi
 8011ef6:	f1c3 0801 	rsbmi	r8, r3, #1
 8011efa:	2300      	movmi	r3, #0
 8011efc:	9208      	str	r2, [sp, #32]
 8011efe:	bf54      	ite	pl
 8011f00:	f04f 0800 	movpl.w	r8, #0
 8011f04:	9308      	strmi	r3, [sp, #32]
 8011f06:	2f00      	cmp	r7, #0
 8011f08:	db39      	blt.n	8011f7e <_dtoa_r+0x1ee>
 8011f0a:	9b08      	ldr	r3, [sp, #32]
 8011f0c:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011f0e:	443b      	add	r3, r7
 8011f10:	9308      	str	r3, [sp, #32]
 8011f12:	2300      	movs	r3, #0
 8011f14:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f18:	2b09      	cmp	r3, #9
 8011f1a:	d865      	bhi.n	8011fe8 <_dtoa_r+0x258>
 8011f1c:	2b05      	cmp	r3, #5
 8011f1e:	bfc4      	itt	gt
 8011f20:	3b04      	subgt	r3, #4
 8011f22:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f26:	f1a3 0302 	sub.w	r3, r3, #2
 8011f2a:	bfcc      	ite	gt
 8011f2c:	2400      	movgt	r4, #0
 8011f2e:	2401      	movle	r4, #1
 8011f30:	2b03      	cmp	r3, #3
 8011f32:	d864      	bhi.n	8011ffe <_dtoa_r+0x26e>
 8011f34:	e8df f003 	tbb	[pc, r3]
 8011f38:	5635372a 	.word	0x5635372a
 8011f3c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011f40:	441e      	add	r6, r3
 8011f42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011f46:	2b20      	cmp	r3, #32
 8011f48:	bfc1      	itttt	gt
 8011f4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011f4e:	409f      	lslgt	r7, r3
 8011f50:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011f54:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011f58:	bfd6      	itet	le
 8011f5a:	f1c3 0320 	rsble	r3, r3, #32
 8011f5e:	ea47 0003 	orrgt.w	r0, r7, r3
 8011f62:	fa04 f003 	lslle.w	r0, r4, r3
 8011f66:	f7ee fad5 	bl	8000514 <__aeabi_ui2d>
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011f70:	3e01      	subs	r6, #1
 8011f72:	9214      	str	r2, [sp, #80]	@ 0x50
 8011f74:	e777      	b.n	8011e66 <_dtoa_r+0xd6>
 8011f76:	2301      	movs	r3, #1
 8011f78:	e7b8      	b.n	8011eec <_dtoa_r+0x15c>
 8011f7a:	9012      	str	r0, [sp, #72]	@ 0x48
 8011f7c:	e7b7      	b.n	8011eee <_dtoa_r+0x15e>
 8011f7e:	427b      	negs	r3, r7
 8011f80:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f82:	2300      	movs	r3, #0
 8011f84:	eba8 0807 	sub.w	r8, r8, r7
 8011f88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011f8a:	e7c4      	b.n	8011f16 <_dtoa_r+0x186>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	dc36      	bgt.n	8012004 <_dtoa_r+0x274>
 8011f96:	2301      	movs	r3, #1
 8011f98:	9300      	str	r3, [sp, #0]
 8011f9a:	9307      	str	r3, [sp, #28]
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011fa0:	e00b      	b.n	8011fba <_dtoa_r+0x22a>
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	e7f3      	b.n	8011f8e <_dtoa_r+0x1fe>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fac:	18fb      	adds	r3, r7, r3
 8011fae:	9300      	str	r3, [sp, #0]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	9307      	str	r3, [sp, #28]
 8011fb6:	bfb8      	it	lt
 8011fb8:	2301      	movlt	r3, #1
 8011fba:	2100      	movs	r1, #0
 8011fbc:	2204      	movs	r2, #4
 8011fbe:	f102 0014 	add.w	r0, r2, #20
 8011fc2:	4298      	cmp	r0, r3
 8011fc4:	d922      	bls.n	801200c <_dtoa_r+0x27c>
 8011fc6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8011fca:	4658      	mov	r0, fp
 8011fcc:	f000 fc8c 	bl	80128e8 <_Balloc>
 8011fd0:	4682      	mov	sl, r0
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d13c      	bne.n	8012050 <_dtoa_r+0x2c0>
 8011fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8012040 <_dtoa_r+0x2b0>)
 8011fd8:	4602      	mov	r2, r0
 8011fda:	f240 11af 	movw	r1, #431	@ 0x1af
 8011fde:	4819      	ldr	r0, [pc, #100]	@ (8012044 <_dtoa_r+0x2b4>)
 8011fe0:	f001 f83a 	bl	8013058 <__assert_func>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	e7df      	b.n	8011fa8 <_dtoa_r+0x218>
 8011fe8:	2401      	movs	r4, #1
 8011fea:	2300      	movs	r3, #0
 8011fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	9307      	str	r3, [sp, #28]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	2312      	movs	r3, #18
 8011ffc:	e7cf      	b.n	8011f9e <_dtoa_r+0x20e>
 8011ffe:	2301      	movs	r3, #1
 8012000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012002:	e7f5      	b.n	8011ff0 <_dtoa_r+0x260>
 8012004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	9307      	str	r3, [sp, #28]
 801200a:	e7d6      	b.n	8011fba <_dtoa_r+0x22a>
 801200c:	3101      	adds	r1, #1
 801200e:	0052      	lsls	r2, r2, #1
 8012010:	e7d5      	b.n	8011fbe <_dtoa_r+0x22e>
 8012012:	bf00      	nop
 8012014:	f3af 8000 	nop.w
 8012018:	636f4361 	.word	0x636f4361
 801201c:	3fd287a7 	.word	0x3fd287a7
 8012020:	8b60c8b3 	.word	0x8b60c8b3
 8012024:	3fc68a28 	.word	0x3fc68a28
 8012028:	509f79fb 	.word	0x509f79fb
 801202c:	3fd34413 	.word	0x3fd34413
 8012030:	7ff00000 	.word	0x7ff00000
 8012034:	080146ec 	.word	0x080146ec
 8012038:	3ff80000 	.word	0x3ff80000
 801203c:	08014810 	.word	0x08014810
 8012040:	0801471a 	.word	0x0801471a
 8012044:	0801472b 	.word	0x0801472b
 8012048:	08014716 	.word	0x08014716
 801204c:	080146eb 	.word	0x080146eb
 8012050:	9b07      	ldr	r3, [sp, #28]
 8012052:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8012056:	2b0e      	cmp	r3, #14
 8012058:	f200 80a4 	bhi.w	80121a4 <_dtoa_r+0x414>
 801205c:	2c00      	cmp	r4, #0
 801205e:	f000 80a1 	beq.w	80121a4 <_dtoa_r+0x414>
 8012062:	2f00      	cmp	r7, #0
 8012064:	dd33      	ble.n	80120ce <_dtoa_r+0x33e>
 8012066:	4bae      	ldr	r3, [pc, #696]	@ (8012320 <_dtoa_r+0x590>)
 8012068:	f007 020f 	and.w	r2, r7, #15
 801206c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012070:	ed93 7b00 	vldr	d7, [r3]
 8012074:	05f8      	lsls	r0, r7, #23
 8012076:	ed8d 7b04 	vstr	d7, [sp, #16]
 801207a:	ea4f 1427 	mov.w	r4, r7, asr #4
 801207e:	d516      	bpl.n	80120ae <_dtoa_r+0x31e>
 8012080:	4ba8      	ldr	r3, [pc, #672]	@ (8012324 <_dtoa_r+0x594>)
 8012082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012086:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801208a:	f7ee fbe7 	bl	800085c <__aeabi_ddiv>
 801208e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012092:	f004 040f 	and.w	r4, r4, #15
 8012096:	2603      	movs	r6, #3
 8012098:	4da2      	ldr	r5, [pc, #648]	@ (8012324 <_dtoa_r+0x594>)
 801209a:	b954      	cbnz	r4, 80120b2 <_dtoa_r+0x322>
 801209c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120a4:	f7ee fbda 	bl	800085c <__aeabi_ddiv>
 80120a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120ac:	e028      	b.n	8012100 <_dtoa_r+0x370>
 80120ae:	2602      	movs	r6, #2
 80120b0:	e7f2      	b.n	8012098 <_dtoa_r+0x308>
 80120b2:	07e1      	lsls	r1, r4, #31
 80120b4:	d508      	bpl.n	80120c8 <_dtoa_r+0x338>
 80120b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120be:	f7ee faa3 	bl	8000608 <__aeabi_dmul>
 80120c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80120c6:	3601      	adds	r6, #1
 80120c8:	1064      	asrs	r4, r4, #1
 80120ca:	3508      	adds	r5, #8
 80120cc:	e7e5      	b.n	801209a <_dtoa_r+0x30a>
 80120ce:	f000 80d2 	beq.w	8012276 <_dtoa_r+0x4e6>
 80120d2:	427c      	negs	r4, r7
 80120d4:	4b92      	ldr	r3, [pc, #584]	@ (8012320 <_dtoa_r+0x590>)
 80120d6:	4d93      	ldr	r5, [pc, #588]	@ (8012324 <_dtoa_r+0x594>)
 80120d8:	f004 020f 	and.w	r2, r4, #15
 80120dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80120e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120e8:	f7ee fa8e 	bl	8000608 <__aeabi_dmul>
 80120ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120f0:	1124      	asrs	r4, r4, #4
 80120f2:	2300      	movs	r3, #0
 80120f4:	2602      	movs	r6, #2
 80120f6:	2c00      	cmp	r4, #0
 80120f8:	f040 80b2 	bne.w	8012260 <_dtoa_r+0x4d0>
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1d3      	bne.n	80120a8 <_dtoa_r+0x318>
 8012100:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012102:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 80b7 	beq.w	801227a <_dtoa_r+0x4ea>
 801210c:	4b86      	ldr	r3, [pc, #536]	@ (8012328 <_dtoa_r+0x598>)
 801210e:	2200      	movs	r2, #0
 8012110:	4620      	mov	r0, r4
 8012112:	4629      	mov	r1, r5
 8012114:	f7ee fcea 	bl	8000aec <__aeabi_dcmplt>
 8012118:	2800      	cmp	r0, #0
 801211a:	f000 80ae 	beq.w	801227a <_dtoa_r+0x4ea>
 801211e:	9b07      	ldr	r3, [sp, #28]
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 80aa 	beq.w	801227a <_dtoa_r+0x4ea>
 8012126:	9b00      	ldr	r3, [sp, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	dd37      	ble.n	801219c <_dtoa_r+0x40c>
 801212c:	1e7b      	subs	r3, r7, #1
 801212e:	9304      	str	r3, [sp, #16]
 8012130:	4620      	mov	r0, r4
 8012132:	4b7e      	ldr	r3, [pc, #504]	@ (801232c <_dtoa_r+0x59c>)
 8012134:	2200      	movs	r2, #0
 8012136:	4629      	mov	r1, r5
 8012138:	f7ee fa66 	bl	8000608 <__aeabi_dmul>
 801213c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012140:	9c00      	ldr	r4, [sp, #0]
 8012142:	3601      	adds	r6, #1
 8012144:	4630      	mov	r0, r6
 8012146:	f7ee f9f5 	bl	8000534 <__aeabi_i2d>
 801214a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801214e:	f7ee fa5b 	bl	8000608 <__aeabi_dmul>
 8012152:	4b77      	ldr	r3, [pc, #476]	@ (8012330 <_dtoa_r+0x5a0>)
 8012154:	2200      	movs	r2, #0
 8012156:	f7ee f8a1 	bl	800029c <__adddf3>
 801215a:	4605      	mov	r5, r0
 801215c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012160:	2c00      	cmp	r4, #0
 8012162:	f040 808d 	bne.w	8012280 <_dtoa_r+0x4f0>
 8012166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801216a:	4b72      	ldr	r3, [pc, #456]	@ (8012334 <_dtoa_r+0x5a4>)
 801216c:	2200      	movs	r2, #0
 801216e:	f7ee f893 	bl	8000298 <__aeabi_dsub>
 8012172:	4602      	mov	r2, r0
 8012174:	460b      	mov	r3, r1
 8012176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801217a:	462a      	mov	r2, r5
 801217c:	4633      	mov	r3, r6
 801217e:	f7ee fcd3 	bl	8000b28 <__aeabi_dcmpgt>
 8012182:	2800      	cmp	r0, #0
 8012184:	f040 828c 	bne.w	80126a0 <_dtoa_r+0x910>
 8012188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801218c:	462a      	mov	r2, r5
 801218e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012192:	f7ee fcab 	bl	8000aec <__aeabi_dcmplt>
 8012196:	2800      	cmp	r0, #0
 8012198:	f040 8129 	bne.w	80123ee <_dtoa_r+0x65e>
 801219c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80121a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80121a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f2c0 815b 	blt.w	8012462 <_dtoa_r+0x6d2>
 80121ac:	2f0e      	cmp	r7, #14
 80121ae:	f300 8158 	bgt.w	8012462 <_dtoa_r+0x6d2>
 80121b2:	4b5b      	ldr	r3, [pc, #364]	@ (8012320 <_dtoa_r+0x590>)
 80121b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80121b8:	ed93 7b00 	vldr	d7, [r3]
 80121bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121be:	2b00      	cmp	r3, #0
 80121c0:	ed8d 7b00 	vstr	d7, [sp]
 80121c4:	da03      	bge.n	80121ce <_dtoa_r+0x43e>
 80121c6:	9b07      	ldr	r3, [sp, #28]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	f340 8102 	ble.w	80123d2 <_dtoa_r+0x642>
 80121ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80121d2:	4656      	mov	r6, sl
 80121d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121d8:	4620      	mov	r0, r4
 80121da:	4629      	mov	r1, r5
 80121dc:	f7ee fb3e 	bl	800085c <__aeabi_ddiv>
 80121e0:	f7ee fcc2 	bl	8000b68 <__aeabi_d2iz>
 80121e4:	4680      	mov	r8, r0
 80121e6:	f7ee f9a5 	bl	8000534 <__aeabi_i2d>
 80121ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121ee:	f7ee fa0b 	bl	8000608 <__aeabi_dmul>
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	4620      	mov	r0, r4
 80121f8:	4629      	mov	r1, r5
 80121fa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80121fe:	f7ee f84b 	bl	8000298 <__aeabi_dsub>
 8012202:	f806 4b01 	strb.w	r4, [r6], #1
 8012206:	9d07      	ldr	r5, [sp, #28]
 8012208:	eba6 040a 	sub.w	r4, r6, sl
 801220c:	42a5      	cmp	r5, r4
 801220e:	4602      	mov	r2, r0
 8012210:	460b      	mov	r3, r1
 8012212:	f040 8118 	bne.w	8012446 <_dtoa_r+0x6b6>
 8012216:	f7ee f841 	bl	800029c <__adddf3>
 801221a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801221e:	4604      	mov	r4, r0
 8012220:	460d      	mov	r5, r1
 8012222:	f7ee fc81 	bl	8000b28 <__aeabi_dcmpgt>
 8012226:	2800      	cmp	r0, #0
 8012228:	f040 80fa 	bne.w	8012420 <_dtoa_r+0x690>
 801222c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012230:	4620      	mov	r0, r4
 8012232:	4629      	mov	r1, r5
 8012234:	f7ee fc50 	bl	8000ad8 <__aeabi_dcmpeq>
 8012238:	b118      	cbz	r0, 8012242 <_dtoa_r+0x4b2>
 801223a:	f018 0f01 	tst.w	r8, #1
 801223e:	f040 80ef 	bne.w	8012420 <_dtoa_r+0x690>
 8012242:	4649      	mov	r1, r9
 8012244:	4658      	mov	r0, fp
 8012246:	f000 fb74 	bl	8012932 <_Bfree>
 801224a:	2300      	movs	r3, #0
 801224c:	7033      	strb	r3, [r6, #0]
 801224e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012250:	3701      	adds	r7, #1
 8012252:	601f      	str	r7, [r3, #0]
 8012254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012256:	2b00      	cmp	r3, #0
 8012258:	f43f add1 	beq.w	8011dfe <_dtoa_r+0x6e>
 801225c:	601e      	str	r6, [r3, #0]
 801225e:	e5ce      	b.n	8011dfe <_dtoa_r+0x6e>
 8012260:	07e2      	lsls	r2, r4, #31
 8012262:	d505      	bpl.n	8012270 <_dtoa_r+0x4e0>
 8012264:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012268:	f7ee f9ce 	bl	8000608 <__aeabi_dmul>
 801226c:	3601      	adds	r6, #1
 801226e:	2301      	movs	r3, #1
 8012270:	1064      	asrs	r4, r4, #1
 8012272:	3508      	adds	r5, #8
 8012274:	e73f      	b.n	80120f6 <_dtoa_r+0x366>
 8012276:	2602      	movs	r6, #2
 8012278:	e742      	b.n	8012100 <_dtoa_r+0x370>
 801227a:	9c07      	ldr	r4, [sp, #28]
 801227c:	9704      	str	r7, [sp, #16]
 801227e:	e761      	b.n	8012144 <_dtoa_r+0x3b4>
 8012280:	4b27      	ldr	r3, [pc, #156]	@ (8012320 <_dtoa_r+0x590>)
 8012282:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012288:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801228c:	4454      	add	r4, sl
 801228e:	2900      	cmp	r1, #0
 8012290:	d054      	beq.n	801233c <_dtoa_r+0x5ac>
 8012292:	4929      	ldr	r1, [pc, #164]	@ (8012338 <_dtoa_r+0x5a8>)
 8012294:	2000      	movs	r0, #0
 8012296:	f7ee fae1 	bl	800085c <__aeabi_ddiv>
 801229a:	4633      	mov	r3, r6
 801229c:	462a      	mov	r2, r5
 801229e:	f7ed fffb 	bl	8000298 <__aeabi_dsub>
 80122a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80122a6:	4656      	mov	r6, sl
 80122a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122ac:	f7ee fc5c 	bl	8000b68 <__aeabi_d2iz>
 80122b0:	4605      	mov	r5, r0
 80122b2:	f7ee f93f 	bl	8000534 <__aeabi_i2d>
 80122b6:	4602      	mov	r2, r0
 80122b8:	460b      	mov	r3, r1
 80122ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122be:	f7ed ffeb 	bl	8000298 <__aeabi_dsub>
 80122c2:	3530      	adds	r5, #48	@ 0x30
 80122c4:	4602      	mov	r2, r0
 80122c6:	460b      	mov	r3, r1
 80122c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80122cc:	f806 5b01 	strb.w	r5, [r6], #1
 80122d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80122d4:	f7ee fc0a 	bl	8000aec <__aeabi_dcmplt>
 80122d8:	2800      	cmp	r0, #0
 80122da:	d172      	bne.n	80123c2 <_dtoa_r+0x632>
 80122dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122e0:	4911      	ldr	r1, [pc, #68]	@ (8012328 <_dtoa_r+0x598>)
 80122e2:	2000      	movs	r0, #0
 80122e4:	f7ed ffd8 	bl	8000298 <__aeabi_dsub>
 80122e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80122ec:	f7ee fbfe 	bl	8000aec <__aeabi_dcmplt>
 80122f0:	2800      	cmp	r0, #0
 80122f2:	f040 8096 	bne.w	8012422 <_dtoa_r+0x692>
 80122f6:	42a6      	cmp	r6, r4
 80122f8:	f43f af50 	beq.w	801219c <_dtoa_r+0x40c>
 80122fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012300:	4b0a      	ldr	r3, [pc, #40]	@ (801232c <_dtoa_r+0x59c>)
 8012302:	2200      	movs	r2, #0
 8012304:	f7ee f980 	bl	8000608 <__aeabi_dmul>
 8012308:	4b08      	ldr	r3, [pc, #32]	@ (801232c <_dtoa_r+0x59c>)
 801230a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801230e:	2200      	movs	r2, #0
 8012310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012314:	f7ee f978 	bl	8000608 <__aeabi_dmul>
 8012318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801231c:	e7c4      	b.n	80122a8 <_dtoa_r+0x518>
 801231e:	bf00      	nop
 8012320:	08014810 	.word	0x08014810
 8012324:	080147e8 	.word	0x080147e8
 8012328:	3ff00000 	.word	0x3ff00000
 801232c:	40240000 	.word	0x40240000
 8012330:	401c0000 	.word	0x401c0000
 8012334:	40140000 	.word	0x40140000
 8012338:	3fe00000 	.word	0x3fe00000
 801233c:	4631      	mov	r1, r6
 801233e:	4628      	mov	r0, r5
 8012340:	f7ee f962 	bl	8000608 <__aeabi_dmul>
 8012344:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012348:	9415      	str	r4, [sp, #84]	@ 0x54
 801234a:	4656      	mov	r6, sl
 801234c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012350:	f7ee fc0a 	bl	8000b68 <__aeabi_d2iz>
 8012354:	4605      	mov	r5, r0
 8012356:	f7ee f8ed 	bl	8000534 <__aeabi_i2d>
 801235a:	4602      	mov	r2, r0
 801235c:	460b      	mov	r3, r1
 801235e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012362:	f7ed ff99 	bl	8000298 <__aeabi_dsub>
 8012366:	3530      	adds	r5, #48	@ 0x30
 8012368:	f806 5b01 	strb.w	r5, [r6], #1
 801236c:	4602      	mov	r2, r0
 801236e:	460b      	mov	r3, r1
 8012370:	42a6      	cmp	r6, r4
 8012372:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012376:	f04f 0200 	mov.w	r2, #0
 801237a:	d124      	bne.n	80123c6 <_dtoa_r+0x636>
 801237c:	4bac      	ldr	r3, [pc, #688]	@ (8012630 <_dtoa_r+0x8a0>)
 801237e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012382:	f7ed ff8b 	bl	800029c <__adddf3>
 8012386:	4602      	mov	r2, r0
 8012388:	460b      	mov	r3, r1
 801238a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801238e:	f7ee fbcb 	bl	8000b28 <__aeabi_dcmpgt>
 8012392:	2800      	cmp	r0, #0
 8012394:	d145      	bne.n	8012422 <_dtoa_r+0x692>
 8012396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801239a:	49a5      	ldr	r1, [pc, #660]	@ (8012630 <_dtoa_r+0x8a0>)
 801239c:	2000      	movs	r0, #0
 801239e:	f7ed ff7b 	bl	8000298 <__aeabi_dsub>
 80123a2:	4602      	mov	r2, r0
 80123a4:	460b      	mov	r3, r1
 80123a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123aa:	f7ee fb9f 	bl	8000aec <__aeabi_dcmplt>
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f43f aef4 	beq.w	801219c <_dtoa_r+0x40c>
 80123b4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80123b6:	1e73      	subs	r3, r6, #1
 80123b8:	9315      	str	r3, [sp, #84]	@ 0x54
 80123ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80123be:	2b30      	cmp	r3, #48	@ 0x30
 80123c0:	d0f8      	beq.n	80123b4 <_dtoa_r+0x624>
 80123c2:	9f04      	ldr	r7, [sp, #16]
 80123c4:	e73d      	b.n	8012242 <_dtoa_r+0x4b2>
 80123c6:	4b9b      	ldr	r3, [pc, #620]	@ (8012634 <_dtoa_r+0x8a4>)
 80123c8:	f7ee f91e 	bl	8000608 <__aeabi_dmul>
 80123cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123d0:	e7bc      	b.n	801234c <_dtoa_r+0x5bc>
 80123d2:	d10c      	bne.n	80123ee <_dtoa_r+0x65e>
 80123d4:	4b98      	ldr	r3, [pc, #608]	@ (8012638 <_dtoa_r+0x8a8>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123dc:	f7ee f914 	bl	8000608 <__aeabi_dmul>
 80123e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123e4:	f7ee fb96 	bl	8000b14 <__aeabi_dcmpge>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f000 8157 	beq.w	801269c <_dtoa_r+0x90c>
 80123ee:	2400      	movs	r4, #0
 80123f0:	4625      	mov	r5, r4
 80123f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123f4:	43db      	mvns	r3, r3
 80123f6:	9304      	str	r3, [sp, #16]
 80123f8:	4656      	mov	r6, sl
 80123fa:	2700      	movs	r7, #0
 80123fc:	4621      	mov	r1, r4
 80123fe:	4658      	mov	r0, fp
 8012400:	f000 fa97 	bl	8012932 <_Bfree>
 8012404:	2d00      	cmp	r5, #0
 8012406:	d0dc      	beq.n	80123c2 <_dtoa_r+0x632>
 8012408:	b12f      	cbz	r7, 8012416 <_dtoa_r+0x686>
 801240a:	42af      	cmp	r7, r5
 801240c:	d003      	beq.n	8012416 <_dtoa_r+0x686>
 801240e:	4639      	mov	r1, r7
 8012410:	4658      	mov	r0, fp
 8012412:	f000 fa8e 	bl	8012932 <_Bfree>
 8012416:	4629      	mov	r1, r5
 8012418:	4658      	mov	r0, fp
 801241a:	f000 fa8a 	bl	8012932 <_Bfree>
 801241e:	e7d0      	b.n	80123c2 <_dtoa_r+0x632>
 8012420:	9704      	str	r7, [sp, #16]
 8012422:	4633      	mov	r3, r6
 8012424:	461e      	mov	r6, r3
 8012426:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801242a:	2a39      	cmp	r2, #57	@ 0x39
 801242c:	d107      	bne.n	801243e <_dtoa_r+0x6ae>
 801242e:	459a      	cmp	sl, r3
 8012430:	d1f8      	bne.n	8012424 <_dtoa_r+0x694>
 8012432:	9a04      	ldr	r2, [sp, #16]
 8012434:	3201      	adds	r2, #1
 8012436:	9204      	str	r2, [sp, #16]
 8012438:	2230      	movs	r2, #48	@ 0x30
 801243a:	f88a 2000 	strb.w	r2, [sl]
 801243e:	781a      	ldrb	r2, [r3, #0]
 8012440:	3201      	adds	r2, #1
 8012442:	701a      	strb	r2, [r3, #0]
 8012444:	e7bd      	b.n	80123c2 <_dtoa_r+0x632>
 8012446:	4b7b      	ldr	r3, [pc, #492]	@ (8012634 <_dtoa_r+0x8a4>)
 8012448:	2200      	movs	r2, #0
 801244a:	f7ee f8dd 	bl	8000608 <__aeabi_dmul>
 801244e:	2200      	movs	r2, #0
 8012450:	2300      	movs	r3, #0
 8012452:	4604      	mov	r4, r0
 8012454:	460d      	mov	r5, r1
 8012456:	f7ee fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 801245a:	2800      	cmp	r0, #0
 801245c:	f43f aeba 	beq.w	80121d4 <_dtoa_r+0x444>
 8012460:	e6ef      	b.n	8012242 <_dtoa_r+0x4b2>
 8012462:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012464:	2a00      	cmp	r2, #0
 8012466:	f000 80db 	beq.w	8012620 <_dtoa_r+0x890>
 801246a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801246c:	2a01      	cmp	r2, #1
 801246e:	f300 80bf 	bgt.w	80125f0 <_dtoa_r+0x860>
 8012472:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012474:	2a00      	cmp	r2, #0
 8012476:	f000 80b7 	beq.w	80125e8 <_dtoa_r+0x858>
 801247a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801247e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012480:	4646      	mov	r6, r8
 8012482:	9a08      	ldr	r2, [sp, #32]
 8012484:	2101      	movs	r1, #1
 8012486:	441a      	add	r2, r3
 8012488:	4658      	mov	r0, fp
 801248a:	4498      	add	r8, r3
 801248c:	9208      	str	r2, [sp, #32]
 801248e:	f000 faeb 	bl	8012a68 <__i2b>
 8012492:	4605      	mov	r5, r0
 8012494:	b15e      	cbz	r6, 80124ae <_dtoa_r+0x71e>
 8012496:	9b08      	ldr	r3, [sp, #32]
 8012498:	2b00      	cmp	r3, #0
 801249a:	dd08      	ble.n	80124ae <_dtoa_r+0x71e>
 801249c:	42b3      	cmp	r3, r6
 801249e:	9a08      	ldr	r2, [sp, #32]
 80124a0:	bfa8      	it	ge
 80124a2:	4633      	movge	r3, r6
 80124a4:	eba8 0803 	sub.w	r8, r8, r3
 80124a8:	1af6      	subs	r6, r6, r3
 80124aa:	1ad3      	subs	r3, r2, r3
 80124ac:	9308      	str	r3, [sp, #32]
 80124ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124b0:	b1f3      	cbz	r3, 80124f0 <_dtoa_r+0x760>
 80124b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 80b7 	beq.w	8012628 <_dtoa_r+0x898>
 80124ba:	b18c      	cbz	r4, 80124e0 <_dtoa_r+0x750>
 80124bc:	4629      	mov	r1, r5
 80124be:	4622      	mov	r2, r4
 80124c0:	4658      	mov	r0, fp
 80124c2:	f000 fb91 	bl	8012be8 <__pow5mult>
 80124c6:	464a      	mov	r2, r9
 80124c8:	4601      	mov	r1, r0
 80124ca:	4605      	mov	r5, r0
 80124cc:	4658      	mov	r0, fp
 80124ce:	f000 fae1 	bl	8012a94 <__multiply>
 80124d2:	4649      	mov	r1, r9
 80124d4:	9004      	str	r0, [sp, #16]
 80124d6:	4658      	mov	r0, fp
 80124d8:	f000 fa2b 	bl	8012932 <_Bfree>
 80124dc:	9b04      	ldr	r3, [sp, #16]
 80124de:	4699      	mov	r9, r3
 80124e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124e2:	1b1a      	subs	r2, r3, r4
 80124e4:	d004      	beq.n	80124f0 <_dtoa_r+0x760>
 80124e6:	4649      	mov	r1, r9
 80124e8:	4658      	mov	r0, fp
 80124ea:	f000 fb7d 	bl	8012be8 <__pow5mult>
 80124ee:	4681      	mov	r9, r0
 80124f0:	2101      	movs	r1, #1
 80124f2:	4658      	mov	r0, fp
 80124f4:	f000 fab8 	bl	8012a68 <__i2b>
 80124f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124fa:	4604      	mov	r4, r0
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 81cc 	beq.w	801289a <_dtoa_r+0xb0a>
 8012502:	461a      	mov	r2, r3
 8012504:	4601      	mov	r1, r0
 8012506:	4658      	mov	r0, fp
 8012508:	f000 fb6e 	bl	8012be8 <__pow5mult>
 801250c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801250e:	2b01      	cmp	r3, #1
 8012510:	4604      	mov	r4, r0
 8012512:	f300 8095 	bgt.w	8012640 <_dtoa_r+0x8b0>
 8012516:	9b02      	ldr	r3, [sp, #8]
 8012518:	2b00      	cmp	r3, #0
 801251a:	f040 8087 	bne.w	801262c <_dtoa_r+0x89c>
 801251e:	9b03      	ldr	r3, [sp, #12]
 8012520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012524:	2b00      	cmp	r3, #0
 8012526:	f040 8089 	bne.w	801263c <_dtoa_r+0x8ac>
 801252a:	9b03      	ldr	r3, [sp, #12]
 801252c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012530:	0d1b      	lsrs	r3, r3, #20
 8012532:	051b      	lsls	r3, r3, #20
 8012534:	b12b      	cbz	r3, 8012542 <_dtoa_r+0x7b2>
 8012536:	9b08      	ldr	r3, [sp, #32]
 8012538:	3301      	adds	r3, #1
 801253a:	9308      	str	r3, [sp, #32]
 801253c:	f108 0801 	add.w	r8, r8, #1
 8012540:	2301      	movs	r3, #1
 8012542:	930a      	str	r3, [sp, #40]	@ 0x28
 8012544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012546:	2b00      	cmp	r3, #0
 8012548:	f000 81ad 	beq.w	80128a6 <_dtoa_r+0xb16>
 801254c:	6923      	ldr	r3, [r4, #16]
 801254e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012552:	6918      	ldr	r0, [r3, #16]
 8012554:	f000 fa3c 	bl	80129d0 <__hi0bits>
 8012558:	f1c0 0020 	rsb	r0, r0, #32
 801255c:	9b08      	ldr	r3, [sp, #32]
 801255e:	4418      	add	r0, r3
 8012560:	f010 001f 	ands.w	r0, r0, #31
 8012564:	d077      	beq.n	8012656 <_dtoa_r+0x8c6>
 8012566:	f1c0 0320 	rsb	r3, r0, #32
 801256a:	2b04      	cmp	r3, #4
 801256c:	dd6b      	ble.n	8012646 <_dtoa_r+0x8b6>
 801256e:	9b08      	ldr	r3, [sp, #32]
 8012570:	f1c0 001c 	rsb	r0, r0, #28
 8012574:	4403      	add	r3, r0
 8012576:	4480      	add	r8, r0
 8012578:	4406      	add	r6, r0
 801257a:	9308      	str	r3, [sp, #32]
 801257c:	f1b8 0f00 	cmp.w	r8, #0
 8012580:	dd05      	ble.n	801258e <_dtoa_r+0x7fe>
 8012582:	4649      	mov	r1, r9
 8012584:	4642      	mov	r2, r8
 8012586:	4658      	mov	r0, fp
 8012588:	f000 fb6e 	bl	8012c68 <__lshift>
 801258c:	4681      	mov	r9, r0
 801258e:	9b08      	ldr	r3, [sp, #32]
 8012590:	2b00      	cmp	r3, #0
 8012592:	dd05      	ble.n	80125a0 <_dtoa_r+0x810>
 8012594:	4621      	mov	r1, r4
 8012596:	461a      	mov	r2, r3
 8012598:	4658      	mov	r0, fp
 801259a:	f000 fb65 	bl	8012c68 <__lshift>
 801259e:	4604      	mov	r4, r0
 80125a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d059      	beq.n	801265a <_dtoa_r+0x8ca>
 80125a6:	4621      	mov	r1, r4
 80125a8:	4648      	mov	r0, r9
 80125aa:	f000 fbc9 	bl	8012d40 <__mcmp>
 80125ae:	2800      	cmp	r0, #0
 80125b0:	da53      	bge.n	801265a <_dtoa_r+0x8ca>
 80125b2:	1e7b      	subs	r3, r7, #1
 80125b4:	9304      	str	r3, [sp, #16]
 80125b6:	4649      	mov	r1, r9
 80125b8:	2300      	movs	r3, #0
 80125ba:	220a      	movs	r2, #10
 80125bc:	4658      	mov	r0, fp
 80125be:	f000 f9c1 	bl	8012944 <__multadd>
 80125c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125c4:	4681      	mov	r9, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f000 816f 	beq.w	80128aa <_dtoa_r+0xb1a>
 80125cc:	2300      	movs	r3, #0
 80125ce:	4629      	mov	r1, r5
 80125d0:	220a      	movs	r2, #10
 80125d2:	4658      	mov	r0, fp
 80125d4:	f000 f9b6 	bl	8012944 <__multadd>
 80125d8:	9b00      	ldr	r3, [sp, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	4605      	mov	r5, r0
 80125de:	dc67      	bgt.n	80126b0 <_dtoa_r+0x920>
 80125e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125e2:	2b02      	cmp	r3, #2
 80125e4:	dc41      	bgt.n	801266a <_dtoa_r+0x8da>
 80125e6:	e063      	b.n	80126b0 <_dtoa_r+0x920>
 80125e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80125ea:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80125ee:	e746      	b.n	801247e <_dtoa_r+0x6ee>
 80125f0:	9b07      	ldr	r3, [sp, #28]
 80125f2:	1e5c      	subs	r4, r3, #1
 80125f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125f6:	42a3      	cmp	r3, r4
 80125f8:	bfbf      	itttt	lt
 80125fa:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80125fc:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80125fe:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012600:	1ae3      	sublt	r3, r4, r3
 8012602:	bfb4      	ite	lt
 8012604:	18d2      	addlt	r2, r2, r3
 8012606:	1b1c      	subge	r4, r3, r4
 8012608:	9b07      	ldr	r3, [sp, #28]
 801260a:	bfbc      	itt	lt
 801260c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801260e:	2400      	movlt	r4, #0
 8012610:	2b00      	cmp	r3, #0
 8012612:	bfb5      	itete	lt
 8012614:	eba8 0603 	sublt.w	r6, r8, r3
 8012618:	9b07      	ldrge	r3, [sp, #28]
 801261a:	2300      	movlt	r3, #0
 801261c:	4646      	movge	r6, r8
 801261e:	e730      	b.n	8012482 <_dtoa_r+0x6f2>
 8012620:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012622:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012624:	4646      	mov	r6, r8
 8012626:	e735      	b.n	8012494 <_dtoa_r+0x704>
 8012628:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801262a:	e75c      	b.n	80124e6 <_dtoa_r+0x756>
 801262c:	2300      	movs	r3, #0
 801262e:	e788      	b.n	8012542 <_dtoa_r+0x7b2>
 8012630:	3fe00000 	.word	0x3fe00000
 8012634:	40240000 	.word	0x40240000
 8012638:	40140000 	.word	0x40140000
 801263c:	9b02      	ldr	r3, [sp, #8]
 801263e:	e780      	b.n	8012542 <_dtoa_r+0x7b2>
 8012640:	2300      	movs	r3, #0
 8012642:	930a      	str	r3, [sp, #40]	@ 0x28
 8012644:	e782      	b.n	801254c <_dtoa_r+0x7bc>
 8012646:	d099      	beq.n	801257c <_dtoa_r+0x7ec>
 8012648:	9a08      	ldr	r2, [sp, #32]
 801264a:	331c      	adds	r3, #28
 801264c:	441a      	add	r2, r3
 801264e:	4498      	add	r8, r3
 8012650:	441e      	add	r6, r3
 8012652:	9208      	str	r2, [sp, #32]
 8012654:	e792      	b.n	801257c <_dtoa_r+0x7ec>
 8012656:	4603      	mov	r3, r0
 8012658:	e7f6      	b.n	8012648 <_dtoa_r+0x8b8>
 801265a:	9b07      	ldr	r3, [sp, #28]
 801265c:	9704      	str	r7, [sp, #16]
 801265e:	2b00      	cmp	r3, #0
 8012660:	dc20      	bgt.n	80126a4 <_dtoa_r+0x914>
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012666:	2b02      	cmp	r3, #2
 8012668:	dd1e      	ble.n	80126a8 <_dtoa_r+0x918>
 801266a:	9b00      	ldr	r3, [sp, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	f47f aec0 	bne.w	80123f2 <_dtoa_r+0x662>
 8012672:	4621      	mov	r1, r4
 8012674:	2205      	movs	r2, #5
 8012676:	4658      	mov	r0, fp
 8012678:	f000 f964 	bl	8012944 <__multadd>
 801267c:	4601      	mov	r1, r0
 801267e:	4604      	mov	r4, r0
 8012680:	4648      	mov	r0, r9
 8012682:	f000 fb5d 	bl	8012d40 <__mcmp>
 8012686:	2800      	cmp	r0, #0
 8012688:	f77f aeb3 	ble.w	80123f2 <_dtoa_r+0x662>
 801268c:	4656      	mov	r6, sl
 801268e:	2331      	movs	r3, #49	@ 0x31
 8012690:	f806 3b01 	strb.w	r3, [r6], #1
 8012694:	9b04      	ldr	r3, [sp, #16]
 8012696:	3301      	adds	r3, #1
 8012698:	9304      	str	r3, [sp, #16]
 801269a:	e6ae      	b.n	80123fa <_dtoa_r+0x66a>
 801269c:	9c07      	ldr	r4, [sp, #28]
 801269e:	9704      	str	r7, [sp, #16]
 80126a0:	4625      	mov	r5, r4
 80126a2:	e7f3      	b.n	801268c <_dtoa_r+0x8fc>
 80126a4:	9b07      	ldr	r3, [sp, #28]
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 8101 	beq.w	80128b2 <_dtoa_r+0xb22>
 80126b0:	2e00      	cmp	r6, #0
 80126b2:	dd05      	ble.n	80126c0 <_dtoa_r+0x930>
 80126b4:	4629      	mov	r1, r5
 80126b6:	4632      	mov	r2, r6
 80126b8:	4658      	mov	r0, fp
 80126ba:	f000 fad5 	bl	8012c68 <__lshift>
 80126be:	4605      	mov	r5, r0
 80126c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d059      	beq.n	801277a <_dtoa_r+0x9ea>
 80126c6:	6869      	ldr	r1, [r5, #4]
 80126c8:	4658      	mov	r0, fp
 80126ca:	f000 f90d 	bl	80128e8 <_Balloc>
 80126ce:	4606      	mov	r6, r0
 80126d0:	b920      	cbnz	r0, 80126dc <_dtoa_r+0x94c>
 80126d2:	4b83      	ldr	r3, [pc, #524]	@ (80128e0 <_dtoa_r+0xb50>)
 80126d4:	4602      	mov	r2, r0
 80126d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80126da:	e480      	b.n	8011fde <_dtoa_r+0x24e>
 80126dc:	692a      	ldr	r2, [r5, #16]
 80126de:	3202      	adds	r2, #2
 80126e0:	0092      	lsls	r2, r2, #2
 80126e2:	f105 010c 	add.w	r1, r5, #12
 80126e6:	300c      	adds	r0, #12
 80126e8:	f7fd fe10 	bl	801030c <memcpy>
 80126ec:	2201      	movs	r2, #1
 80126ee:	4631      	mov	r1, r6
 80126f0:	4658      	mov	r0, fp
 80126f2:	f000 fab9 	bl	8012c68 <__lshift>
 80126f6:	f10a 0301 	add.w	r3, sl, #1
 80126fa:	9307      	str	r3, [sp, #28]
 80126fc:	9b00      	ldr	r3, [sp, #0]
 80126fe:	4453      	add	r3, sl
 8012700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012702:	9b02      	ldr	r3, [sp, #8]
 8012704:	f003 0301 	and.w	r3, r3, #1
 8012708:	462f      	mov	r7, r5
 801270a:	930a      	str	r3, [sp, #40]	@ 0x28
 801270c:	4605      	mov	r5, r0
 801270e:	9b07      	ldr	r3, [sp, #28]
 8012710:	4621      	mov	r1, r4
 8012712:	3b01      	subs	r3, #1
 8012714:	4648      	mov	r0, r9
 8012716:	9300      	str	r3, [sp, #0]
 8012718:	f7ff fab0 	bl	8011c7c <quorem>
 801271c:	4639      	mov	r1, r7
 801271e:	9002      	str	r0, [sp, #8]
 8012720:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012724:	4648      	mov	r0, r9
 8012726:	f000 fb0b 	bl	8012d40 <__mcmp>
 801272a:	462a      	mov	r2, r5
 801272c:	9008      	str	r0, [sp, #32]
 801272e:	4621      	mov	r1, r4
 8012730:	4658      	mov	r0, fp
 8012732:	f000 fb21 	bl	8012d78 <__mdiff>
 8012736:	68c2      	ldr	r2, [r0, #12]
 8012738:	4606      	mov	r6, r0
 801273a:	bb02      	cbnz	r2, 801277e <_dtoa_r+0x9ee>
 801273c:	4601      	mov	r1, r0
 801273e:	4648      	mov	r0, r9
 8012740:	f000 fafe 	bl	8012d40 <__mcmp>
 8012744:	4602      	mov	r2, r0
 8012746:	4631      	mov	r1, r6
 8012748:	4658      	mov	r0, fp
 801274a:	920e      	str	r2, [sp, #56]	@ 0x38
 801274c:	f000 f8f1 	bl	8012932 <_Bfree>
 8012750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012754:	9e07      	ldr	r6, [sp, #28]
 8012756:	ea43 0102 	orr.w	r1, r3, r2
 801275a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801275c:	4319      	orrs	r1, r3
 801275e:	d110      	bne.n	8012782 <_dtoa_r+0x9f2>
 8012760:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012764:	d029      	beq.n	80127ba <_dtoa_r+0xa2a>
 8012766:	9b08      	ldr	r3, [sp, #32]
 8012768:	2b00      	cmp	r3, #0
 801276a:	dd02      	ble.n	8012772 <_dtoa_r+0x9e2>
 801276c:	9b02      	ldr	r3, [sp, #8]
 801276e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012772:	9b00      	ldr	r3, [sp, #0]
 8012774:	f883 8000 	strb.w	r8, [r3]
 8012778:	e640      	b.n	80123fc <_dtoa_r+0x66c>
 801277a:	4628      	mov	r0, r5
 801277c:	e7bb      	b.n	80126f6 <_dtoa_r+0x966>
 801277e:	2201      	movs	r2, #1
 8012780:	e7e1      	b.n	8012746 <_dtoa_r+0x9b6>
 8012782:	9b08      	ldr	r3, [sp, #32]
 8012784:	2b00      	cmp	r3, #0
 8012786:	db04      	blt.n	8012792 <_dtoa_r+0xa02>
 8012788:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801278a:	430b      	orrs	r3, r1
 801278c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801278e:	430b      	orrs	r3, r1
 8012790:	d120      	bne.n	80127d4 <_dtoa_r+0xa44>
 8012792:	2a00      	cmp	r2, #0
 8012794:	dded      	ble.n	8012772 <_dtoa_r+0x9e2>
 8012796:	4649      	mov	r1, r9
 8012798:	2201      	movs	r2, #1
 801279a:	4658      	mov	r0, fp
 801279c:	f000 fa64 	bl	8012c68 <__lshift>
 80127a0:	4621      	mov	r1, r4
 80127a2:	4681      	mov	r9, r0
 80127a4:	f000 facc 	bl	8012d40 <__mcmp>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	dc03      	bgt.n	80127b4 <_dtoa_r+0xa24>
 80127ac:	d1e1      	bne.n	8012772 <_dtoa_r+0x9e2>
 80127ae:	f018 0f01 	tst.w	r8, #1
 80127b2:	d0de      	beq.n	8012772 <_dtoa_r+0x9e2>
 80127b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80127b8:	d1d8      	bne.n	801276c <_dtoa_r+0x9dc>
 80127ba:	9a00      	ldr	r2, [sp, #0]
 80127bc:	2339      	movs	r3, #57	@ 0x39
 80127be:	7013      	strb	r3, [r2, #0]
 80127c0:	4633      	mov	r3, r6
 80127c2:	461e      	mov	r6, r3
 80127c4:	3b01      	subs	r3, #1
 80127c6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80127ca:	2a39      	cmp	r2, #57	@ 0x39
 80127cc:	d052      	beq.n	8012874 <_dtoa_r+0xae4>
 80127ce:	3201      	adds	r2, #1
 80127d0:	701a      	strb	r2, [r3, #0]
 80127d2:	e613      	b.n	80123fc <_dtoa_r+0x66c>
 80127d4:	2a00      	cmp	r2, #0
 80127d6:	dd07      	ble.n	80127e8 <_dtoa_r+0xa58>
 80127d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80127dc:	d0ed      	beq.n	80127ba <_dtoa_r+0xa2a>
 80127de:	9a00      	ldr	r2, [sp, #0]
 80127e0:	f108 0301 	add.w	r3, r8, #1
 80127e4:	7013      	strb	r3, [r2, #0]
 80127e6:	e609      	b.n	80123fc <_dtoa_r+0x66c>
 80127e8:	9b07      	ldr	r3, [sp, #28]
 80127ea:	9a07      	ldr	r2, [sp, #28]
 80127ec:	f803 8c01 	strb.w	r8, [r3, #-1]
 80127f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d028      	beq.n	8012848 <_dtoa_r+0xab8>
 80127f6:	4649      	mov	r1, r9
 80127f8:	2300      	movs	r3, #0
 80127fa:	220a      	movs	r2, #10
 80127fc:	4658      	mov	r0, fp
 80127fe:	f000 f8a1 	bl	8012944 <__multadd>
 8012802:	42af      	cmp	r7, r5
 8012804:	4681      	mov	r9, r0
 8012806:	f04f 0300 	mov.w	r3, #0
 801280a:	f04f 020a 	mov.w	r2, #10
 801280e:	4639      	mov	r1, r7
 8012810:	4658      	mov	r0, fp
 8012812:	d107      	bne.n	8012824 <_dtoa_r+0xa94>
 8012814:	f000 f896 	bl	8012944 <__multadd>
 8012818:	4607      	mov	r7, r0
 801281a:	4605      	mov	r5, r0
 801281c:	9b07      	ldr	r3, [sp, #28]
 801281e:	3301      	adds	r3, #1
 8012820:	9307      	str	r3, [sp, #28]
 8012822:	e774      	b.n	801270e <_dtoa_r+0x97e>
 8012824:	f000 f88e 	bl	8012944 <__multadd>
 8012828:	4629      	mov	r1, r5
 801282a:	4607      	mov	r7, r0
 801282c:	2300      	movs	r3, #0
 801282e:	220a      	movs	r2, #10
 8012830:	4658      	mov	r0, fp
 8012832:	f000 f887 	bl	8012944 <__multadd>
 8012836:	4605      	mov	r5, r0
 8012838:	e7f0      	b.n	801281c <_dtoa_r+0xa8c>
 801283a:	9b00      	ldr	r3, [sp, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	bfcc      	ite	gt
 8012840:	461e      	movgt	r6, r3
 8012842:	2601      	movle	r6, #1
 8012844:	4456      	add	r6, sl
 8012846:	2700      	movs	r7, #0
 8012848:	4649      	mov	r1, r9
 801284a:	2201      	movs	r2, #1
 801284c:	4658      	mov	r0, fp
 801284e:	f000 fa0b 	bl	8012c68 <__lshift>
 8012852:	4621      	mov	r1, r4
 8012854:	4681      	mov	r9, r0
 8012856:	f000 fa73 	bl	8012d40 <__mcmp>
 801285a:	2800      	cmp	r0, #0
 801285c:	dcb0      	bgt.n	80127c0 <_dtoa_r+0xa30>
 801285e:	d102      	bne.n	8012866 <_dtoa_r+0xad6>
 8012860:	f018 0f01 	tst.w	r8, #1
 8012864:	d1ac      	bne.n	80127c0 <_dtoa_r+0xa30>
 8012866:	4633      	mov	r3, r6
 8012868:	461e      	mov	r6, r3
 801286a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801286e:	2a30      	cmp	r2, #48	@ 0x30
 8012870:	d0fa      	beq.n	8012868 <_dtoa_r+0xad8>
 8012872:	e5c3      	b.n	80123fc <_dtoa_r+0x66c>
 8012874:	459a      	cmp	sl, r3
 8012876:	d1a4      	bne.n	80127c2 <_dtoa_r+0xa32>
 8012878:	9b04      	ldr	r3, [sp, #16]
 801287a:	3301      	adds	r3, #1
 801287c:	9304      	str	r3, [sp, #16]
 801287e:	2331      	movs	r3, #49	@ 0x31
 8012880:	f88a 3000 	strb.w	r3, [sl]
 8012884:	e5ba      	b.n	80123fc <_dtoa_r+0x66c>
 8012886:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012888:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80128e4 <_dtoa_r+0xb54>
 801288c:	2b00      	cmp	r3, #0
 801288e:	f43f aab6 	beq.w	8011dfe <_dtoa_r+0x6e>
 8012892:	f10a 0308 	add.w	r3, sl, #8
 8012896:	f7ff bab0 	b.w	8011dfa <_dtoa_r+0x6a>
 801289a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801289c:	2b01      	cmp	r3, #1
 801289e:	f77f ae3a 	ble.w	8012516 <_dtoa_r+0x786>
 80128a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80128a6:	2001      	movs	r0, #1
 80128a8:	e658      	b.n	801255c <_dtoa_r+0x7cc>
 80128aa:	9b00      	ldr	r3, [sp, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	f77f aed9 	ble.w	8012664 <_dtoa_r+0x8d4>
 80128b2:	4656      	mov	r6, sl
 80128b4:	4621      	mov	r1, r4
 80128b6:	4648      	mov	r0, r9
 80128b8:	f7ff f9e0 	bl	8011c7c <quorem>
 80128bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80128c0:	f806 8b01 	strb.w	r8, [r6], #1
 80128c4:	9b00      	ldr	r3, [sp, #0]
 80128c6:	eba6 020a 	sub.w	r2, r6, sl
 80128ca:	4293      	cmp	r3, r2
 80128cc:	ddb5      	ble.n	801283a <_dtoa_r+0xaaa>
 80128ce:	4649      	mov	r1, r9
 80128d0:	2300      	movs	r3, #0
 80128d2:	220a      	movs	r2, #10
 80128d4:	4658      	mov	r0, fp
 80128d6:	f000 f835 	bl	8012944 <__multadd>
 80128da:	4681      	mov	r9, r0
 80128dc:	e7ea      	b.n	80128b4 <_dtoa_r+0xb24>
 80128de:	bf00      	nop
 80128e0:	0801471a 	.word	0x0801471a
 80128e4:	0801470d 	.word	0x0801470d

080128e8 <_Balloc>:
 80128e8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80128ea:	b570      	push	{r4, r5, r6, lr}
 80128ec:	4605      	mov	r5, r0
 80128ee:	460c      	mov	r4, r1
 80128f0:	b17b      	cbz	r3, 8012912 <_Balloc+0x2a>
 80128f2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80128f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80128f8:	b9a0      	cbnz	r0, 8012924 <_Balloc+0x3c>
 80128fa:	2101      	movs	r1, #1
 80128fc:	fa01 f604 	lsl.w	r6, r1, r4
 8012900:	1d72      	adds	r2, r6, #5
 8012902:	0092      	lsls	r2, r2, #2
 8012904:	4628      	mov	r0, r5
 8012906:	f000 fbc5 	bl	8013094 <_calloc_r>
 801290a:	b148      	cbz	r0, 8012920 <_Balloc+0x38>
 801290c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8012910:	e00b      	b.n	801292a <_Balloc+0x42>
 8012912:	2221      	movs	r2, #33	@ 0x21
 8012914:	2104      	movs	r1, #4
 8012916:	f000 fbbd 	bl	8013094 <_calloc_r>
 801291a:	6468      	str	r0, [r5, #68]	@ 0x44
 801291c:	2800      	cmp	r0, #0
 801291e:	d1e8      	bne.n	80128f2 <_Balloc+0xa>
 8012920:	2000      	movs	r0, #0
 8012922:	bd70      	pop	{r4, r5, r6, pc}
 8012924:	6802      	ldr	r2, [r0, #0]
 8012926:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801292a:	2300      	movs	r3, #0
 801292c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012930:	e7f7      	b.n	8012922 <_Balloc+0x3a>

08012932 <_Bfree>:
 8012932:	b131      	cbz	r1, 8012942 <_Bfree+0x10>
 8012934:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012936:	684a      	ldr	r2, [r1, #4]
 8012938:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801293c:	6008      	str	r0, [r1, #0]
 801293e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012942:	4770      	bx	lr

08012944 <__multadd>:
 8012944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012948:	690d      	ldr	r5, [r1, #16]
 801294a:	4607      	mov	r7, r0
 801294c:	460c      	mov	r4, r1
 801294e:	461e      	mov	r6, r3
 8012950:	f101 0c14 	add.w	ip, r1, #20
 8012954:	2000      	movs	r0, #0
 8012956:	f8dc 3000 	ldr.w	r3, [ip]
 801295a:	b299      	uxth	r1, r3
 801295c:	fb02 6101 	mla	r1, r2, r1, r6
 8012960:	0c1e      	lsrs	r6, r3, #16
 8012962:	0c0b      	lsrs	r3, r1, #16
 8012964:	fb02 3306 	mla	r3, r2, r6, r3
 8012968:	b289      	uxth	r1, r1
 801296a:	3001      	adds	r0, #1
 801296c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012970:	4285      	cmp	r5, r0
 8012972:	f84c 1b04 	str.w	r1, [ip], #4
 8012976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801297a:	dcec      	bgt.n	8012956 <__multadd+0x12>
 801297c:	b30e      	cbz	r6, 80129c2 <__multadd+0x7e>
 801297e:	68a3      	ldr	r3, [r4, #8]
 8012980:	42ab      	cmp	r3, r5
 8012982:	dc19      	bgt.n	80129b8 <__multadd+0x74>
 8012984:	6861      	ldr	r1, [r4, #4]
 8012986:	4638      	mov	r0, r7
 8012988:	3101      	adds	r1, #1
 801298a:	f7ff ffad 	bl	80128e8 <_Balloc>
 801298e:	4680      	mov	r8, r0
 8012990:	b928      	cbnz	r0, 801299e <__multadd+0x5a>
 8012992:	4602      	mov	r2, r0
 8012994:	4b0c      	ldr	r3, [pc, #48]	@ (80129c8 <__multadd+0x84>)
 8012996:	480d      	ldr	r0, [pc, #52]	@ (80129cc <__multadd+0x88>)
 8012998:	21ba      	movs	r1, #186	@ 0xba
 801299a:	f000 fb5d 	bl	8013058 <__assert_func>
 801299e:	6922      	ldr	r2, [r4, #16]
 80129a0:	3202      	adds	r2, #2
 80129a2:	f104 010c 	add.w	r1, r4, #12
 80129a6:	0092      	lsls	r2, r2, #2
 80129a8:	300c      	adds	r0, #12
 80129aa:	f7fd fcaf 	bl	801030c <memcpy>
 80129ae:	4621      	mov	r1, r4
 80129b0:	4638      	mov	r0, r7
 80129b2:	f7ff ffbe 	bl	8012932 <_Bfree>
 80129b6:	4644      	mov	r4, r8
 80129b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80129bc:	3501      	adds	r5, #1
 80129be:	615e      	str	r6, [r3, #20]
 80129c0:	6125      	str	r5, [r4, #16]
 80129c2:	4620      	mov	r0, r4
 80129c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129c8:	0801471a 	.word	0x0801471a
 80129cc:	08014783 	.word	0x08014783

080129d0 <__hi0bits>:
 80129d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80129d4:	4603      	mov	r3, r0
 80129d6:	bf36      	itet	cc
 80129d8:	0403      	lslcc	r3, r0, #16
 80129da:	2000      	movcs	r0, #0
 80129dc:	2010      	movcc	r0, #16
 80129de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129e2:	bf3c      	itt	cc
 80129e4:	021b      	lslcc	r3, r3, #8
 80129e6:	3008      	addcc	r0, #8
 80129e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129ec:	bf3c      	itt	cc
 80129ee:	011b      	lslcc	r3, r3, #4
 80129f0:	3004      	addcc	r0, #4
 80129f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80129f6:	bf3c      	itt	cc
 80129f8:	009b      	lslcc	r3, r3, #2
 80129fa:	3002      	addcc	r0, #2
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	db05      	blt.n	8012a0c <__hi0bits+0x3c>
 8012a00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012a04:	f100 0001 	add.w	r0, r0, #1
 8012a08:	bf08      	it	eq
 8012a0a:	2020      	moveq	r0, #32
 8012a0c:	4770      	bx	lr

08012a0e <__lo0bits>:
 8012a0e:	6803      	ldr	r3, [r0, #0]
 8012a10:	4602      	mov	r2, r0
 8012a12:	f013 0007 	ands.w	r0, r3, #7
 8012a16:	d00b      	beq.n	8012a30 <__lo0bits+0x22>
 8012a18:	07d9      	lsls	r1, r3, #31
 8012a1a:	d421      	bmi.n	8012a60 <__lo0bits+0x52>
 8012a1c:	0798      	lsls	r0, r3, #30
 8012a1e:	bf49      	itett	mi
 8012a20:	085b      	lsrmi	r3, r3, #1
 8012a22:	089b      	lsrpl	r3, r3, #2
 8012a24:	2001      	movmi	r0, #1
 8012a26:	6013      	strmi	r3, [r2, #0]
 8012a28:	bf5c      	itt	pl
 8012a2a:	6013      	strpl	r3, [r2, #0]
 8012a2c:	2002      	movpl	r0, #2
 8012a2e:	4770      	bx	lr
 8012a30:	b299      	uxth	r1, r3
 8012a32:	b909      	cbnz	r1, 8012a38 <__lo0bits+0x2a>
 8012a34:	0c1b      	lsrs	r3, r3, #16
 8012a36:	2010      	movs	r0, #16
 8012a38:	b2d9      	uxtb	r1, r3
 8012a3a:	b909      	cbnz	r1, 8012a40 <__lo0bits+0x32>
 8012a3c:	3008      	adds	r0, #8
 8012a3e:	0a1b      	lsrs	r3, r3, #8
 8012a40:	0719      	lsls	r1, r3, #28
 8012a42:	bf04      	itt	eq
 8012a44:	091b      	lsreq	r3, r3, #4
 8012a46:	3004      	addeq	r0, #4
 8012a48:	0799      	lsls	r1, r3, #30
 8012a4a:	bf04      	itt	eq
 8012a4c:	089b      	lsreq	r3, r3, #2
 8012a4e:	3002      	addeq	r0, #2
 8012a50:	07d9      	lsls	r1, r3, #31
 8012a52:	d403      	bmi.n	8012a5c <__lo0bits+0x4e>
 8012a54:	085b      	lsrs	r3, r3, #1
 8012a56:	f100 0001 	add.w	r0, r0, #1
 8012a5a:	d003      	beq.n	8012a64 <__lo0bits+0x56>
 8012a5c:	6013      	str	r3, [r2, #0]
 8012a5e:	4770      	bx	lr
 8012a60:	2000      	movs	r0, #0
 8012a62:	4770      	bx	lr
 8012a64:	2020      	movs	r0, #32
 8012a66:	4770      	bx	lr

08012a68 <__i2b>:
 8012a68:	b510      	push	{r4, lr}
 8012a6a:	460c      	mov	r4, r1
 8012a6c:	2101      	movs	r1, #1
 8012a6e:	f7ff ff3b 	bl	80128e8 <_Balloc>
 8012a72:	4602      	mov	r2, r0
 8012a74:	b928      	cbnz	r0, 8012a82 <__i2b+0x1a>
 8012a76:	4b05      	ldr	r3, [pc, #20]	@ (8012a8c <__i2b+0x24>)
 8012a78:	4805      	ldr	r0, [pc, #20]	@ (8012a90 <__i2b+0x28>)
 8012a7a:	f240 1145 	movw	r1, #325	@ 0x145
 8012a7e:	f000 faeb 	bl	8013058 <__assert_func>
 8012a82:	2301      	movs	r3, #1
 8012a84:	6144      	str	r4, [r0, #20]
 8012a86:	6103      	str	r3, [r0, #16]
 8012a88:	bd10      	pop	{r4, pc}
 8012a8a:	bf00      	nop
 8012a8c:	0801471a 	.word	0x0801471a
 8012a90:	08014783 	.word	0x08014783

08012a94 <__multiply>:
 8012a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a98:	4614      	mov	r4, r2
 8012a9a:	690a      	ldr	r2, [r1, #16]
 8012a9c:	6923      	ldr	r3, [r4, #16]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	bfa8      	it	ge
 8012aa2:	4623      	movge	r3, r4
 8012aa4:	460f      	mov	r7, r1
 8012aa6:	bfa4      	itt	ge
 8012aa8:	460c      	movge	r4, r1
 8012aaa:	461f      	movge	r7, r3
 8012aac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012ab0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012ab4:	68a3      	ldr	r3, [r4, #8]
 8012ab6:	6861      	ldr	r1, [r4, #4]
 8012ab8:	eb0a 0609 	add.w	r6, sl, r9
 8012abc:	42b3      	cmp	r3, r6
 8012abe:	b085      	sub	sp, #20
 8012ac0:	bfb8      	it	lt
 8012ac2:	3101      	addlt	r1, #1
 8012ac4:	f7ff ff10 	bl	80128e8 <_Balloc>
 8012ac8:	b930      	cbnz	r0, 8012ad8 <__multiply+0x44>
 8012aca:	4602      	mov	r2, r0
 8012acc:	4b44      	ldr	r3, [pc, #272]	@ (8012be0 <__multiply+0x14c>)
 8012ace:	4845      	ldr	r0, [pc, #276]	@ (8012be4 <__multiply+0x150>)
 8012ad0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012ad4:	f000 fac0 	bl	8013058 <__assert_func>
 8012ad8:	f100 0514 	add.w	r5, r0, #20
 8012adc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ae0:	462b      	mov	r3, r5
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	4543      	cmp	r3, r8
 8012ae6:	d321      	bcc.n	8012b2c <__multiply+0x98>
 8012ae8:	f107 0114 	add.w	r1, r7, #20
 8012aec:	f104 0214 	add.w	r2, r4, #20
 8012af0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012af4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012af8:	9302      	str	r3, [sp, #8]
 8012afa:	1b13      	subs	r3, r2, r4
 8012afc:	3b15      	subs	r3, #21
 8012afe:	f023 0303 	bic.w	r3, r3, #3
 8012b02:	3304      	adds	r3, #4
 8012b04:	f104 0715 	add.w	r7, r4, #21
 8012b08:	42ba      	cmp	r2, r7
 8012b0a:	bf38      	it	cc
 8012b0c:	2304      	movcc	r3, #4
 8012b0e:	9301      	str	r3, [sp, #4]
 8012b10:	9b02      	ldr	r3, [sp, #8]
 8012b12:	9103      	str	r1, [sp, #12]
 8012b14:	428b      	cmp	r3, r1
 8012b16:	d80c      	bhi.n	8012b32 <__multiply+0x9e>
 8012b18:	2e00      	cmp	r6, #0
 8012b1a:	dd03      	ble.n	8012b24 <__multiply+0x90>
 8012b1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d05b      	beq.n	8012bdc <__multiply+0x148>
 8012b24:	6106      	str	r6, [r0, #16]
 8012b26:	b005      	add	sp, #20
 8012b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b2c:	f843 2b04 	str.w	r2, [r3], #4
 8012b30:	e7d8      	b.n	8012ae4 <__multiply+0x50>
 8012b32:	f8b1 a000 	ldrh.w	sl, [r1]
 8012b36:	f1ba 0f00 	cmp.w	sl, #0
 8012b3a:	d024      	beq.n	8012b86 <__multiply+0xf2>
 8012b3c:	f104 0e14 	add.w	lr, r4, #20
 8012b40:	46a9      	mov	r9, r5
 8012b42:	f04f 0c00 	mov.w	ip, #0
 8012b46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012b4a:	f8d9 3000 	ldr.w	r3, [r9]
 8012b4e:	fa1f fb87 	uxth.w	fp, r7
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	fb0a 330b 	mla	r3, sl, fp, r3
 8012b58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012b5c:	f8d9 7000 	ldr.w	r7, [r9]
 8012b60:	4463      	add	r3, ip
 8012b62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b66:	fb0a c70b 	mla	r7, sl, fp, ip
 8012b6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b74:	4572      	cmp	r2, lr
 8012b76:	f849 3b04 	str.w	r3, [r9], #4
 8012b7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b7e:	d8e2      	bhi.n	8012b46 <__multiply+0xb2>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	f845 c003 	str.w	ip, [r5, r3]
 8012b86:	9b03      	ldr	r3, [sp, #12]
 8012b88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012b8c:	3104      	adds	r1, #4
 8012b8e:	f1b9 0f00 	cmp.w	r9, #0
 8012b92:	d021      	beq.n	8012bd8 <__multiply+0x144>
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	f104 0c14 	add.w	ip, r4, #20
 8012b9a:	46ae      	mov	lr, r5
 8012b9c:	f04f 0a00 	mov.w	sl, #0
 8012ba0:	f8bc b000 	ldrh.w	fp, [ip]
 8012ba4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012ba8:	fb09 770b 	mla	r7, r9, fp, r7
 8012bac:	4457      	add	r7, sl
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012bb4:	f84e 3b04 	str.w	r3, [lr], #4
 8012bb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012bbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012bc0:	f8be 3000 	ldrh.w	r3, [lr]
 8012bc4:	fb09 330a 	mla	r3, r9, sl, r3
 8012bc8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012bcc:	4562      	cmp	r2, ip
 8012bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012bd2:	d8e5      	bhi.n	8012ba0 <__multiply+0x10c>
 8012bd4:	9f01      	ldr	r7, [sp, #4]
 8012bd6:	51eb      	str	r3, [r5, r7]
 8012bd8:	3504      	adds	r5, #4
 8012bda:	e799      	b.n	8012b10 <__multiply+0x7c>
 8012bdc:	3e01      	subs	r6, #1
 8012bde:	e79b      	b.n	8012b18 <__multiply+0x84>
 8012be0:	0801471a 	.word	0x0801471a
 8012be4:	08014783 	.word	0x08014783

08012be8 <__pow5mult>:
 8012be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bec:	4615      	mov	r5, r2
 8012bee:	f012 0203 	ands.w	r2, r2, #3
 8012bf2:	4607      	mov	r7, r0
 8012bf4:	460e      	mov	r6, r1
 8012bf6:	d007      	beq.n	8012c08 <__pow5mult+0x20>
 8012bf8:	4c1a      	ldr	r4, [pc, #104]	@ (8012c64 <__pow5mult+0x7c>)
 8012bfa:	3a01      	subs	r2, #1
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c02:	f7ff fe9f 	bl	8012944 <__multadd>
 8012c06:	4606      	mov	r6, r0
 8012c08:	10ad      	asrs	r5, r5, #2
 8012c0a:	d027      	beq.n	8012c5c <__pow5mult+0x74>
 8012c0c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8012c0e:	b944      	cbnz	r4, 8012c22 <__pow5mult+0x3a>
 8012c10:	f240 2171 	movw	r1, #625	@ 0x271
 8012c14:	4638      	mov	r0, r7
 8012c16:	f7ff ff27 	bl	8012a68 <__i2b>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	6438      	str	r0, [r7, #64]	@ 0x40
 8012c1e:	4604      	mov	r4, r0
 8012c20:	6003      	str	r3, [r0, #0]
 8012c22:	f04f 0900 	mov.w	r9, #0
 8012c26:	07eb      	lsls	r3, r5, #31
 8012c28:	d50a      	bpl.n	8012c40 <__pow5mult+0x58>
 8012c2a:	4631      	mov	r1, r6
 8012c2c:	4622      	mov	r2, r4
 8012c2e:	4638      	mov	r0, r7
 8012c30:	f7ff ff30 	bl	8012a94 <__multiply>
 8012c34:	4631      	mov	r1, r6
 8012c36:	4680      	mov	r8, r0
 8012c38:	4638      	mov	r0, r7
 8012c3a:	f7ff fe7a 	bl	8012932 <_Bfree>
 8012c3e:	4646      	mov	r6, r8
 8012c40:	106d      	asrs	r5, r5, #1
 8012c42:	d00b      	beq.n	8012c5c <__pow5mult+0x74>
 8012c44:	6820      	ldr	r0, [r4, #0]
 8012c46:	b938      	cbnz	r0, 8012c58 <__pow5mult+0x70>
 8012c48:	4622      	mov	r2, r4
 8012c4a:	4621      	mov	r1, r4
 8012c4c:	4638      	mov	r0, r7
 8012c4e:	f7ff ff21 	bl	8012a94 <__multiply>
 8012c52:	6020      	str	r0, [r4, #0]
 8012c54:	f8c0 9000 	str.w	r9, [r0]
 8012c58:	4604      	mov	r4, r0
 8012c5a:	e7e4      	b.n	8012c26 <__pow5mult+0x3e>
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c62:	bf00      	nop
 8012c64:	080147dc 	.word	0x080147dc

08012c68 <__lshift>:
 8012c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c6c:	460c      	mov	r4, r1
 8012c6e:	6849      	ldr	r1, [r1, #4]
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c76:	68a3      	ldr	r3, [r4, #8]
 8012c78:	4607      	mov	r7, r0
 8012c7a:	4691      	mov	r9, r2
 8012c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c80:	f108 0601 	add.w	r6, r8, #1
 8012c84:	42b3      	cmp	r3, r6
 8012c86:	db0b      	blt.n	8012ca0 <__lshift+0x38>
 8012c88:	4638      	mov	r0, r7
 8012c8a:	f7ff fe2d 	bl	80128e8 <_Balloc>
 8012c8e:	4605      	mov	r5, r0
 8012c90:	b948      	cbnz	r0, 8012ca6 <__lshift+0x3e>
 8012c92:	4602      	mov	r2, r0
 8012c94:	4b28      	ldr	r3, [pc, #160]	@ (8012d38 <__lshift+0xd0>)
 8012c96:	4829      	ldr	r0, [pc, #164]	@ (8012d3c <__lshift+0xd4>)
 8012c98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012c9c:	f000 f9dc 	bl	8013058 <__assert_func>
 8012ca0:	3101      	adds	r1, #1
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	e7ee      	b.n	8012c84 <__lshift+0x1c>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	f100 0114 	add.w	r1, r0, #20
 8012cac:	f100 0210 	add.w	r2, r0, #16
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	4553      	cmp	r3, sl
 8012cb4:	db33      	blt.n	8012d1e <__lshift+0xb6>
 8012cb6:	6920      	ldr	r0, [r4, #16]
 8012cb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012cbc:	f104 0314 	add.w	r3, r4, #20
 8012cc0:	f019 091f 	ands.w	r9, r9, #31
 8012cc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012ccc:	d02b      	beq.n	8012d26 <__lshift+0xbe>
 8012cce:	f1c9 0e20 	rsb	lr, r9, #32
 8012cd2:	468a      	mov	sl, r1
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	6818      	ldr	r0, [r3, #0]
 8012cd8:	fa00 f009 	lsl.w	r0, r0, r9
 8012cdc:	4310      	orrs	r0, r2
 8012cde:	f84a 0b04 	str.w	r0, [sl], #4
 8012ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ce6:	459c      	cmp	ip, r3
 8012ce8:	fa22 f20e 	lsr.w	r2, r2, lr
 8012cec:	d8f3      	bhi.n	8012cd6 <__lshift+0x6e>
 8012cee:	ebac 0304 	sub.w	r3, ip, r4
 8012cf2:	3b15      	subs	r3, #21
 8012cf4:	f023 0303 	bic.w	r3, r3, #3
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	f104 0015 	add.w	r0, r4, #21
 8012cfe:	4584      	cmp	ip, r0
 8012d00:	bf38      	it	cc
 8012d02:	2304      	movcc	r3, #4
 8012d04:	50ca      	str	r2, [r1, r3]
 8012d06:	b10a      	cbz	r2, 8012d0c <__lshift+0xa4>
 8012d08:	f108 0602 	add.w	r6, r8, #2
 8012d0c:	3e01      	subs	r6, #1
 8012d0e:	4638      	mov	r0, r7
 8012d10:	612e      	str	r6, [r5, #16]
 8012d12:	4621      	mov	r1, r4
 8012d14:	f7ff fe0d 	bl	8012932 <_Bfree>
 8012d18:	4628      	mov	r0, r5
 8012d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d22:	3301      	adds	r3, #1
 8012d24:	e7c5      	b.n	8012cb2 <__lshift+0x4a>
 8012d26:	3904      	subs	r1, #4
 8012d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d30:	459c      	cmp	ip, r3
 8012d32:	d8f9      	bhi.n	8012d28 <__lshift+0xc0>
 8012d34:	e7ea      	b.n	8012d0c <__lshift+0xa4>
 8012d36:	bf00      	nop
 8012d38:	0801471a 	.word	0x0801471a
 8012d3c:	08014783 	.word	0x08014783

08012d40 <__mcmp>:
 8012d40:	690a      	ldr	r2, [r1, #16]
 8012d42:	4603      	mov	r3, r0
 8012d44:	6900      	ldr	r0, [r0, #16]
 8012d46:	1a80      	subs	r0, r0, r2
 8012d48:	b530      	push	{r4, r5, lr}
 8012d4a:	d10e      	bne.n	8012d6a <__mcmp+0x2a>
 8012d4c:	3314      	adds	r3, #20
 8012d4e:	3114      	adds	r1, #20
 8012d50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012d54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012d58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012d5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012d60:	4295      	cmp	r5, r2
 8012d62:	d003      	beq.n	8012d6c <__mcmp+0x2c>
 8012d64:	d205      	bcs.n	8012d72 <__mcmp+0x32>
 8012d66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d6a:	bd30      	pop	{r4, r5, pc}
 8012d6c:	42a3      	cmp	r3, r4
 8012d6e:	d3f3      	bcc.n	8012d58 <__mcmp+0x18>
 8012d70:	e7fb      	b.n	8012d6a <__mcmp+0x2a>
 8012d72:	2001      	movs	r0, #1
 8012d74:	e7f9      	b.n	8012d6a <__mcmp+0x2a>
	...

08012d78 <__mdiff>:
 8012d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	4689      	mov	r9, r1
 8012d7e:	4606      	mov	r6, r0
 8012d80:	4611      	mov	r1, r2
 8012d82:	4648      	mov	r0, r9
 8012d84:	4614      	mov	r4, r2
 8012d86:	f7ff ffdb 	bl	8012d40 <__mcmp>
 8012d8a:	1e05      	subs	r5, r0, #0
 8012d8c:	d112      	bne.n	8012db4 <__mdiff+0x3c>
 8012d8e:	4629      	mov	r1, r5
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7ff fda9 	bl	80128e8 <_Balloc>
 8012d96:	4602      	mov	r2, r0
 8012d98:	b928      	cbnz	r0, 8012da6 <__mdiff+0x2e>
 8012d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8012e98 <__mdiff+0x120>)
 8012d9c:	f240 2137 	movw	r1, #567	@ 0x237
 8012da0:	483e      	ldr	r0, [pc, #248]	@ (8012e9c <__mdiff+0x124>)
 8012da2:	f000 f959 	bl	8013058 <__assert_func>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012dac:	4610      	mov	r0, r2
 8012dae:	b003      	add	sp, #12
 8012db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db4:	bfbc      	itt	lt
 8012db6:	464b      	movlt	r3, r9
 8012db8:	46a1      	movlt	r9, r4
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012dc0:	bfba      	itte	lt
 8012dc2:	461c      	movlt	r4, r3
 8012dc4:	2501      	movlt	r5, #1
 8012dc6:	2500      	movge	r5, #0
 8012dc8:	f7ff fd8e 	bl	80128e8 <_Balloc>
 8012dcc:	4602      	mov	r2, r0
 8012dce:	b918      	cbnz	r0, 8012dd8 <__mdiff+0x60>
 8012dd0:	4b31      	ldr	r3, [pc, #196]	@ (8012e98 <__mdiff+0x120>)
 8012dd2:	f240 2145 	movw	r1, #581	@ 0x245
 8012dd6:	e7e3      	b.n	8012da0 <__mdiff+0x28>
 8012dd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012ddc:	6926      	ldr	r6, [r4, #16]
 8012dde:	60c5      	str	r5, [r0, #12]
 8012de0:	f109 0310 	add.w	r3, r9, #16
 8012de4:	f109 0514 	add.w	r5, r9, #20
 8012de8:	f104 0e14 	add.w	lr, r4, #20
 8012dec:	f100 0b14 	add.w	fp, r0, #20
 8012df0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012df4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012df8:	9301      	str	r3, [sp, #4]
 8012dfa:	46d9      	mov	r9, fp
 8012dfc:	f04f 0c00 	mov.w	ip, #0
 8012e00:	9b01      	ldr	r3, [sp, #4]
 8012e02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012e06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012e0a:	9301      	str	r3, [sp, #4]
 8012e0c:	fa1f f38a 	uxth.w	r3, sl
 8012e10:	4619      	mov	r1, r3
 8012e12:	b283      	uxth	r3, r0
 8012e14:	1acb      	subs	r3, r1, r3
 8012e16:	0c00      	lsrs	r0, r0, #16
 8012e18:	4463      	add	r3, ip
 8012e1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012e1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012e28:	4576      	cmp	r6, lr
 8012e2a:	f849 3b04 	str.w	r3, [r9], #4
 8012e2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e32:	d8e5      	bhi.n	8012e00 <__mdiff+0x88>
 8012e34:	1b33      	subs	r3, r6, r4
 8012e36:	3b15      	subs	r3, #21
 8012e38:	f023 0303 	bic.w	r3, r3, #3
 8012e3c:	3415      	adds	r4, #21
 8012e3e:	3304      	adds	r3, #4
 8012e40:	42a6      	cmp	r6, r4
 8012e42:	bf38      	it	cc
 8012e44:	2304      	movcc	r3, #4
 8012e46:	441d      	add	r5, r3
 8012e48:	445b      	add	r3, fp
 8012e4a:	461e      	mov	r6, r3
 8012e4c:	462c      	mov	r4, r5
 8012e4e:	4544      	cmp	r4, r8
 8012e50:	d30e      	bcc.n	8012e70 <__mdiff+0xf8>
 8012e52:	f108 0103 	add.w	r1, r8, #3
 8012e56:	1b49      	subs	r1, r1, r5
 8012e58:	f021 0103 	bic.w	r1, r1, #3
 8012e5c:	3d03      	subs	r5, #3
 8012e5e:	45a8      	cmp	r8, r5
 8012e60:	bf38      	it	cc
 8012e62:	2100      	movcc	r1, #0
 8012e64:	440b      	add	r3, r1
 8012e66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e6a:	b191      	cbz	r1, 8012e92 <__mdiff+0x11a>
 8012e6c:	6117      	str	r7, [r2, #16]
 8012e6e:	e79d      	b.n	8012dac <__mdiff+0x34>
 8012e70:	f854 1b04 	ldr.w	r1, [r4], #4
 8012e74:	46e6      	mov	lr, ip
 8012e76:	0c08      	lsrs	r0, r1, #16
 8012e78:	fa1c fc81 	uxtah	ip, ip, r1
 8012e7c:	4471      	add	r1, lr
 8012e7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012e82:	b289      	uxth	r1, r1
 8012e84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e88:	f846 1b04 	str.w	r1, [r6], #4
 8012e8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e90:	e7dd      	b.n	8012e4e <__mdiff+0xd6>
 8012e92:	3f01      	subs	r7, #1
 8012e94:	e7e7      	b.n	8012e66 <__mdiff+0xee>
 8012e96:	bf00      	nop
 8012e98:	0801471a 	.word	0x0801471a
 8012e9c:	08014783 	.word	0x08014783

08012ea0 <__d2b>:
 8012ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ea4:	460f      	mov	r7, r1
 8012ea6:	2101      	movs	r1, #1
 8012ea8:	ec59 8b10 	vmov	r8, r9, d0
 8012eac:	4616      	mov	r6, r2
 8012eae:	f7ff fd1b 	bl	80128e8 <_Balloc>
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	b930      	cbnz	r0, 8012ec4 <__d2b+0x24>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	4b23      	ldr	r3, [pc, #140]	@ (8012f48 <__d2b+0xa8>)
 8012eba:	4824      	ldr	r0, [pc, #144]	@ (8012f4c <__d2b+0xac>)
 8012ebc:	f240 310f 	movw	r1, #783	@ 0x30f
 8012ec0:	f000 f8ca 	bl	8013058 <__assert_func>
 8012ec4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ecc:	b10d      	cbz	r5, 8012ed2 <__d2b+0x32>
 8012ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012ed2:	9301      	str	r3, [sp, #4]
 8012ed4:	f1b8 0300 	subs.w	r3, r8, #0
 8012ed8:	d023      	beq.n	8012f22 <__d2b+0x82>
 8012eda:	4668      	mov	r0, sp
 8012edc:	9300      	str	r3, [sp, #0]
 8012ede:	f7ff fd96 	bl	8012a0e <__lo0bits>
 8012ee2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ee6:	b1d0      	cbz	r0, 8012f1e <__d2b+0x7e>
 8012ee8:	f1c0 0320 	rsb	r3, r0, #32
 8012eec:	fa02 f303 	lsl.w	r3, r2, r3
 8012ef0:	430b      	orrs	r3, r1
 8012ef2:	40c2      	lsrs	r2, r0
 8012ef4:	6163      	str	r3, [r4, #20]
 8012ef6:	9201      	str	r2, [sp, #4]
 8012ef8:	9b01      	ldr	r3, [sp, #4]
 8012efa:	61a3      	str	r3, [r4, #24]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	bf0c      	ite	eq
 8012f00:	2201      	moveq	r2, #1
 8012f02:	2202      	movne	r2, #2
 8012f04:	6122      	str	r2, [r4, #16]
 8012f06:	b1a5      	cbz	r5, 8012f32 <__d2b+0x92>
 8012f08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012f0c:	4405      	add	r5, r0
 8012f0e:	603d      	str	r5, [r7, #0]
 8012f10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012f14:	6030      	str	r0, [r6, #0]
 8012f16:	4620      	mov	r0, r4
 8012f18:	b003      	add	sp, #12
 8012f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f1e:	6161      	str	r1, [r4, #20]
 8012f20:	e7ea      	b.n	8012ef8 <__d2b+0x58>
 8012f22:	a801      	add	r0, sp, #4
 8012f24:	f7ff fd73 	bl	8012a0e <__lo0bits>
 8012f28:	9b01      	ldr	r3, [sp, #4]
 8012f2a:	6163      	str	r3, [r4, #20]
 8012f2c:	3020      	adds	r0, #32
 8012f2e:	2201      	movs	r2, #1
 8012f30:	e7e8      	b.n	8012f04 <__d2b+0x64>
 8012f32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012f3a:	6038      	str	r0, [r7, #0]
 8012f3c:	6918      	ldr	r0, [r3, #16]
 8012f3e:	f7ff fd47 	bl	80129d0 <__hi0bits>
 8012f42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f46:	e7e5      	b.n	8012f14 <__d2b+0x74>
 8012f48:	0801471a 	.word	0x0801471a
 8012f4c:	08014783 	.word	0x08014783

08012f50 <__ssprint_r>:
 8012f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	6893      	ldr	r3, [r2, #8]
 8012f56:	f8d2 b000 	ldr.w	fp, [r2]
 8012f5a:	9001      	str	r0, [sp, #4]
 8012f5c:	460c      	mov	r4, r1
 8012f5e:	4617      	mov	r7, r2
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d157      	bne.n	8013014 <__ssprint_r+0xc4>
 8012f64:	2000      	movs	r0, #0
 8012f66:	2300      	movs	r3, #0
 8012f68:	607b      	str	r3, [r7, #4]
 8012f6a:	b003      	add	sp, #12
 8012f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f70:	e9db a800 	ldrd	sl, r8, [fp]
 8012f74:	f10b 0b08 	add.w	fp, fp, #8
 8012f78:	68a6      	ldr	r6, [r4, #8]
 8012f7a:	6820      	ldr	r0, [r4, #0]
 8012f7c:	f1b8 0f00 	cmp.w	r8, #0
 8012f80:	d0f6      	beq.n	8012f70 <__ssprint_r+0x20>
 8012f82:	45b0      	cmp	r8, r6
 8012f84:	d32e      	bcc.n	8012fe4 <__ssprint_r+0x94>
 8012f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012f8e:	d029      	beq.n	8012fe4 <__ssprint_r+0x94>
 8012f90:	6921      	ldr	r1, [r4, #16]
 8012f92:	6965      	ldr	r5, [r4, #20]
 8012f94:	eba0 0901 	sub.w	r9, r0, r1
 8012f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012fa0:	f109 0001 	add.w	r0, r9, #1
 8012fa4:	106d      	asrs	r5, r5, #1
 8012fa6:	4440      	add	r0, r8
 8012fa8:	4285      	cmp	r5, r0
 8012faa:	bf38      	it	cc
 8012fac:	4605      	movcc	r5, r0
 8012fae:	0553      	lsls	r3, r2, #21
 8012fb0:	d534      	bpl.n	801301c <__ssprint_r+0xcc>
 8012fb2:	9801      	ldr	r0, [sp, #4]
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	f7fc fc41 	bl	800f83c <_malloc_r>
 8012fba:	4606      	mov	r6, r0
 8012fbc:	2800      	cmp	r0, #0
 8012fbe:	d038      	beq.n	8013032 <__ssprint_r+0xe2>
 8012fc0:	464a      	mov	r2, r9
 8012fc2:	6921      	ldr	r1, [r4, #16]
 8012fc4:	f7fd f9a2 	bl	801030c <memcpy>
 8012fc8:	89a2      	ldrh	r2, [r4, #12]
 8012fca:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8012fce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8012fd2:	81a2      	strh	r2, [r4, #12]
 8012fd4:	6126      	str	r6, [r4, #16]
 8012fd6:	6165      	str	r5, [r4, #20]
 8012fd8:	444e      	add	r6, r9
 8012fda:	eba5 0509 	sub.w	r5, r5, r9
 8012fde:	6026      	str	r6, [r4, #0]
 8012fe0:	60a5      	str	r5, [r4, #8]
 8012fe2:	4646      	mov	r6, r8
 8012fe4:	4546      	cmp	r6, r8
 8012fe6:	bf28      	it	cs
 8012fe8:	4646      	movcs	r6, r8
 8012fea:	4632      	mov	r2, r6
 8012fec:	4651      	mov	r1, sl
 8012fee:	6820      	ldr	r0, [r4, #0]
 8012ff0:	f7fd f863 	bl	80100ba <memmove>
 8012ff4:	68a2      	ldr	r2, [r4, #8]
 8012ff6:	1b92      	subs	r2, r2, r6
 8012ff8:	60a2      	str	r2, [r4, #8]
 8012ffa:	6822      	ldr	r2, [r4, #0]
 8012ffc:	4432      	add	r2, r6
 8012ffe:	6022      	str	r2, [r4, #0]
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	eba2 0308 	sub.w	r3, r2, r8
 8013006:	44c2      	add	sl, r8
 8013008:	60bb      	str	r3, [r7, #8]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d0aa      	beq.n	8012f64 <__ssprint_r+0x14>
 801300e:	f04f 0800 	mov.w	r8, #0
 8013012:	e7b1      	b.n	8012f78 <__ssprint_r+0x28>
 8013014:	f04f 0a00 	mov.w	sl, #0
 8013018:	46d0      	mov	r8, sl
 801301a:	e7ad      	b.n	8012f78 <__ssprint_r+0x28>
 801301c:	9801      	ldr	r0, [sp, #4]
 801301e:	462a      	mov	r2, r5
 8013020:	f000 f880 	bl	8013124 <_realloc_r>
 8013024:	4606      	mov	r6, r0
 8013026:	2800      	cmp	r0, #0
 8013028:	d1d4      	bne.n	8012fd4 <__ssprint_r+0x84>
 801302a:	6921      	ldr	r1, [r4, #16]
 801302c:	9801      	ldr	r0, [sp, #4]
 801302e:	f7fd f9e1 	bl	80103f4 <_free_r>
 8013032:	9a01      	ldr	r2, [sp, #4]
 8013034:	230c      	movs	r3, #12
 8013036:	6013      	str	r3, [r2, #0]
 8013038:	89a3      	ldrh	r3, [r4, #12]
 801303a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801303e:	81a3      	strh	r3, [r4, #12]
 8013040:	2300      	movs	r3, #0
 8013042:	60bb      	str	r3, [r7, #8]
 8013044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013048:	e78d      	b.n	8012f66 <__ssprint_r+0x16>
	...

0801304c <__locale_mb_cur_max>:
 801304c:	4b01      	ldr	r3, [pc, #4]	@ (8013054 <__locale_mb_cur_max+0x8>)
 801304e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8013052:	4770      	bx	lr
 8013054:	20000654 	.word	0x20000654

08013058 <__assert_func>:
 8013058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801305a:	4614      	mov	r4, r2
 801305c:	461a      	mov	r2, r3
 801305e:	4b09      	ldr	r3, [pc, #36]	@ (8013084 <__assert_func+0x2c>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4605      	mov	r5, r0
 8013064:	68d8      	ldr	r0, [r3, #12]
 8013066:	b954      	cbnz	r4, 801307e <__assert_func+0x26>
 8013068:	4b07      	ldr	r3, [pc, #28]	@ (8013088 <__assert_func+0x30>)
 801306a:	461c      	mov	r4, r3
 801306c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013070:	9100      	str	r1, [sp, #0]
 8013072:	462b      	mov	r3, r5
 8013074:	4905      	ldr	r1, [pc, #20]	@ (801308c <__assert_func+0x34>)
 8013076:	f000 fa0b 	bl	8013490 <fiprintf>
 801307a:	f7fc fbc7 	bl	800f80c <abort>
 801307e:	4b04      	ldr	r3, [pc, #16]	@ (8013090 <__assert_func+0x38>)
 8013080:	e7f4      	b.n	801306c <__assert_func+0x14>
 8013082:	bf00      	nop
 8013084:	2000052c 	.word	0x2000052c
 8013088:	0801491d 	.word	0x0801491d
 801308c:	080148ef 	.word	0x080148ef
 8013090:	080148e2 	.word	0x080148e2

08013094 <_calloc_r>:
 8013094:	b538      	push	{r3, r4, r5, lr}
 8013096:	fba1 1502 	umull	r1, r5, r1, r2
 801309a:	b935      	cbnz	r5, 80130aa <_calloc_r+0x16>
 801309c:	f7fc fbce 	bl	800f83c <_malloc_r>
 80130a0:	4604      	mov	r4, r0
 80130a2:	b938      	cbnz	r0, 80130b4 <_calloc_r+0x20>
 80130a4:	2400      	movs	r4, #0
 80130a6:	4620      	mov	r0, r4
 80130a8:	bd38      	pop	{r3, r4, r5, pc}
 80130aa:	f7fd f8f5 	bl	8010298 <__errno>
 80130ae:	230c      	movs	r3, #12
 80130b0:	6003      	str	r3, [r0, #0]
 80130b2:	e7f7      	b.n	80130a4 <_calloc_r+0x10>
 80130b4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80130b8:	f022 0203 	bic.w	r2, r2, #3
 80130bc:	3a04      	subs	r2, #4
 80130be:	2a24      	cmp	r2, #36	@ 0x24
 80130c0:	d819      	bhi.n	80130f6 <_calloc_r+0x62>
 80130c2:	2a13      	cmp	r2, #19
 80130c4:	d915      	bls.n	80130f2 <_calloc_r+0x5e>
 80130c6:	2a1b      	cmp	r2, #27
 80130c8:	e9c0 5500 	strd	r5, r5, [r0]
 80130cc:	d806      	bhi.n	80130dc <_calloc_r+0x48>
 80130ce:	f100 0308 	add.w	r3, r0, #8
 80130d2:	2200      	movs	r2, #0
 80130d4:	e9c3 2200 	strd	r2, r2, [r3]
 80130d8:	609a      	str	r2, [r3, #8]
 80130da:	e7e4      	b.n	80130a6 <_calloc_r+0x12>
 80130dc:	2a24      	cmp	r2, #36	@ 0x24
 80130de:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80130e2:	bf11      	iteee	ne
 80130e4:	f100 0310 	addne.w	r3, r0, #16
 80130e8:	6105      	streq	r5, [r0, #16]
 80130ea:	f100 0318 	addeq.w	r3, r0, #24
 80130ee:	6145      	streq	r5, [r0, #20]
 80130f0:	e7ef      	b.n	80130d2 <_calloc_r+0x3e>
 80130f2:	4603      	mov	r3, r0
 80130f4:	e7ed      	b.n	80130d2 <_calloc_r+0x3e>
 80130f6:	4629      	mov	r1, r5
 80130f8:	f7fc fff9 	bl	80100ee <memset>
 80130fc:	e7d3      	b.n	80130a6 <_calloc_r+0x12>

080130fe <__ascii_mbtowc>:
 80130fe:	b082      	sub	sp, #8
 8013100:	b901      	cbnz	r1, 8013104 <__ascii_mbtowc+0x6>
 8013102:	a901      	add	r1, sp, #4
 8013104:	b142      	cbz	r2, 8013118 <__ascii_mbtowc+0x1a>
 8013106:	b14b      	cbz	r3, 801311c <__ascii_mbtowc+0x1e>
 8013108:	7813      	ldrb	r3, [r2, #0]
 801310a:	600b      	str	r3, [r1, #0]
 801310c:	7812      	ldrb	r2, [r2, #0]
 801310e:	1e10      	subs	r0, r2, #0
 8013110:	bf18      	it	ne
 8013112:	2001      	movne	r0, #1
 8013114:	b002      	add	sp, #8
 8013116:	4770      	bx	lr
 8013118:	4610      	mov	r0, r2
 801311a:	e7fb      	b.n	8013114 <__ascii_mbtowc+0x16>
 801311c:	f06f 0001 	mvn.w	r0, #1
 8013120:	e7f8      	b.n	8013114 <__ascii_mbtowc+0x16>
	...

08013124 <_realloc_r>:
 8013124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013128:	4682      	mov	sl, r0
 801312a:	4693      	mov	fp, r2
 801312c:	460c      	mov	r4, r1
 801312e:	b929      	cbnz	r1, 801313c <_realloc_r+0x18>
 8013130:	4611      	mov	r1, r2
 8013132:	b003      	add	sp, #12
 8013134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013138:	f7fc bb80 	b.w	800f83c <_malloc_r>
 801313c:	f7fc fdb8 	bl	800fcb0 <__malloc_lock>
 8013140:	f10b 080b 	add.w	r8, fp, #11
 8013144:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8013148:	f1b8 0f16 	cmp.w	r8, #22
 801314c:	f1a4 0908 	sub.w	r9, r4, #8
 8013150:	f025 0603 	bic.w	r6, r5, #3
 8013154:	d908      	bls.n	8013168 <_realloc_r+0x44>
 8013156:	f038 0807 	bics.w	r8, r8, #7
 801315a:	d507      	bpl.n	801316c <_realloc_r+0x48>
 801315c:	230c      	movs	r3, #12
 801315e:	f8ca 3000 	str.w	r3, [sl]
 8013162:	f04f 0b00 	mov.w	fp, #0
 8013166:	e032      	b.n	80131ce <_realloc_r+0xaa>
 8013168:	f04f 0810 	mov.w	r8, #16
 801316c:	45c3      	cmp	fp, r8
 801316e:	d8f5      	bhi.n	801315c <_realloc_r+0x38>
 8013170:	4546      	cmp	r6, r8
 8013172:	f280 8174 	bge.w	801345e <_realloc_r+0x33a>
 8013176:	4b9e      	ldr	r3, [pc, #632]	@ (80133f0 <_realloc_r+0x2cc>)
 8013178:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801317c:	eb09 0106 	add.w	r1, r9, r6
 8013180:	458c      	cmp	ip, r1
 8013182:	6848      	ldr	r0, [r1, #4]
 8013184:	d005      	beq.n	8013192 <_realloc_r+0x6e>
 8013186:	f020 0201 	bic.w	r2, r0, #1
 801318a:	440a      	add	r2, r1
 801318c:	6852      	ldr	r2, [r2, #4]
 801318e:	07d7      	lsls	r7, r2, #31
 8013190:	d449      	bmi.n	8013226 <_realloc_r+0x102>
 8013192:	f020 0003 	bic.w	r0, r0, #3
 8013196:	458c      	cmp	ip, r1
 8013198:	eb06 0700 	add.w	r7, r6, r0
 801319c:	d11b      	bne.n	80131d6 <_realloc_r+0xb2>
 801319e:	f108 0210 	add.w	r2, r8, #16
 80131a2:	42ba      	cmp	r2, r7
 80131a4:	dc41      	bgt.n	801322a <_realloc_r+0x106>
 80131a6:	eb09 0208 	add.w	r2, r9, r8
 80131aa:	eba7 0708 	sub.w	r7, r7, r8
 80131ae:	f047 0701 	orr.w	r7, r7, #1
 80131b2:	609a      	str	r2, [r3, #8]
 80131b4:	6057      	str	r7, [r2, #4]
 80131b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80131ba:	f003 0301 	and.w	r3, r3, #1
 80131be:	ea43 0308 	orr.w	r3, r3, r8
 80131c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80131c6:	4650      	mov	r0, sl
 80131c8:	f7fc fd78 	bl	800fcbc <__malloc_unlock>
 80131cc:	46a3      	mov	fp, r4
 80131ce:	4658      	mov	r0, fp
 80131d0:	b003      	add	sp, #12
 80131d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d6:	45b8      	cmp	r8, r7
 80131d8:	dc27      	bgt.n	801322a <_realloc_r+0x106>
 80131da:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80131de:	60d3      	str	r3, [r2, #12]
 80131e0:	609a      	str	r2, [r3, #8]
 80131e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80131e6:	eba7 0008 	sub.w	r0, r7, r8
 80131ea:	280f      	cmp	r0, #15
 80131ec:	f003 0301 	and.w	r3, r3, #1
 80131f0:	eb09 0207 	add.w	r2, r9, r7
 80131f4:	f240 8135 	bls.w	8013462 <_realloc_r+0x33e>
 80131f8:	eb09 0108 	add.w	r1, r9, r8
 80131fc:	ea48 0303 	orr.w	r3, r8, r3
 8013200:	f040 0001 	orr.w	r0, r0, #1
 8013204:	f8c9 3004 	str.w	r3, [r9, #4]
 8013208:	6048      	str	r0, [r1, #4]
 801320a:	6853      	ldr	r3, [r2, #4]
 801320c:	f043 0301 	orr.w	r3, r3, #1
 8013210:	6053      	str	r3, [r2, #4]
 8013212:	3108      	adds	r1, #8
 8013214:	4650      	mov	r0, sl
 8013216:	f7fd f8ed 	bl	80103f4 <_free_r>
 801321a:	4650      	mov	r0, sl
 801321c:	f7fc fd4e 	bl	800fcbc <__malloc_unlock>
 8013220:	f109 0b08 	add.w	fp, r9, #8
 8013224:	e7d3      	b.n	80131ce <_realloc_r+0xaa>
 8013226:	2000      	movs	r0, #0
 8013228:	4601      	mov	r1, r0
 801322a:	07ea      	lsls	r2, r5, #31
 801322c:	f100 80c7 	bmi.w	80133be <_realloc_r+0x29a>
 8013230:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8013234:	eba9 0505 	sub.w	r5, r9, r5
 8013238:	686a      	ldr	r2, [r5, #4]
 801323a:	f022 0203 	bic.w	r2, r2, #3
 801323e:	4432      	add	r2, r6
 8013240:	9201      	str	r2, [sp, #4]
 8013242:	2900      	cmp	r1, #0
 8013244:	f000 8086 	beq.w	8013354 <_realloc_r+0x230>
 8013248:	458c      	cmp	ip, r1
 801324a:	eb00 0702 	add.w	r7, r0, r2
 801324e:	d149      	bne.n	80132e4 <_realloc_r+0x1c0>
 8013250:	f108 0210 	add.w	r2, r8, #16
 8013254:	42ba      	cmp	r2, r7
 8013256:	dc7d      	bgt.n	8013354 <_realloc_r+0x230>
 8013258:	46ab      	mov	fp, r5
 801325a:	68ea      	ldr	r2, [r5, #12]
 801325c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8013260:	60ca      	str	r2, [r1, #12]
 8013262:	6091      	str	r1, [r2, #8]
 8013264:	1f32      	subs	r2, r6, #4
 8013266:	2a24      	cmp	r2, #36	@ 0x24
 8013268:	d836      	bhi.n	80132d8 <_realloc_r+0x1b4>
 801326a:	2a13      	cmp	r2, #19
 801326c:	d932      	bls.n	80132d4 <_realloc_r+0x1b0>
 801326e:	6821      	ldr	r1, [r4, #0]
 8013270:	60a9      	str	r1, [r5, #8]
 8013272:	6861      	ldr	r1, [r4, #4]
 8013274:	60e9      	str	r1, [r5, #12]
 8013276:	2a1b      	cmp	r2, #27
 8013278:	d81a      	bhi.n	80132b0 <_realloc_r+0x18c>
 801327a:	3408      	adds	r4, #8
 801327c:	f105 0210 	add.w	r2, r5, #16
 8013280:	6821      	ldr	r1, [r4, #0]
 8013282:	6011      	str	r1, [r2, #0]
 8013284:	6861      	ldr	r1, [r4, #4]
 8013286:	6051      	str	r1, [r2, #4]
 8013288:	68a1      	ldr	r1, [r4, #8]
 801328a:	6091      	str	r1, [r2, #8]
 801328c:	eb05 0208 	add.w	r2, r5, r8
 8013290:	eba7 0708 	sub.w	r7, r7, r8
 8013294:	f047 0701 	orr.w	r7, r7, #1
 8013298:	609a      	str	r2, [r3, #8]
 801329a:	6057      	str	r7, [r2, #4]
 801329c:	686b      	ldr	r3, [r5, #4]
 801329e:	f003 0301 	and.w	r3, r3, #1
 80132a2:	ea43 0308 	orr.w	r3, r3, r8
 80132a6:	606b      	str	r3, [r5, #4]
 80132a8:	4650      	mov	r0, sl
 80132aa:	f7fc fd07 	bl	800fcbc <__malloc_unlock>
 80132ae:	e78e      	b.n	80131ce <_realloc_r+0xaa>
 80132b0:	68a1      	ldr	r1, [r4, #8]
 80132b2:	6129      	str	r1, [r5, #16]
 80132b4:	68e1      	ldr	r1, [r4, #12]
 80132b6:	6169      	str	r1, [r5, #20]
 80132b8:	2a24      	cmp	r2, #36	@ 0x24
 80132ba:	bf01      	itttt	eq
 80132bc:	6922      	ldreq	r2, [r4, #16]
 80132be:	61aa      	streq	r2, [r5, #24]
 80132c0:	6961      	ldreq	r1, [r4, #20]
 80132c2:	61e9      	streq	r1, [r5, #28]
 80132c4:	bf19      	ittee	ne
 80132c6:	3410      	addne	r4, #16
 80132c8:	f105 0218 	addne.w	r2, r5, #24
 80132cc:	f105 0220 	addeq.w	r2, r5, #32
 80132d0:	3418      	addeq	r4, #24
 80132d2:	e7d5      	b.n	8013280 <_realloc_r+0x15c>
 80132d4:	465a      	mov	r2, fp
 80132d6:	e7d3      	b.n	8013280 <_realloc_r+0x15c>
 80132d8:	4621      	mov	r1, r4
 80132da:	4658      	mov	r0, fp
 80132dc:	f7fc feed 	bl	80100ba <memmove>
 80132e0:	4b43      	ldr	r3, [pc, #268]	@ (80133f0 <_realloc_r+0x2cc>)
 80132e2:	e7d3      	b.n	801328c <_realloc_r+0x168>
 80132e4:	45b8      	cmp	r8, r7
 80132e6:	dc35      	bgt.n	8013354 <_realloc_r+0x230>
 80132e8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80132ec:	4628      	mov	r0, r5
 80132ee:	60d3      	str	r3, [r2, #12]
 80132f0:	609a      	str	r2, [r3, #8]
 80132f2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80132f6:	68eb      	ldr	r3, [r5, #12]
 80132f8:	60d3      	str	r3, [r2, #12]
 80132fa:	609a      	str	r2, [r3, #8]
 80132fc:	1f32      	subs	r2, r6, #4
 80132fe:	2a24      	cmp	r2, #36	@ 0x24
 8013300:	d824      	bhi.n	801334c <_realloc_r+0x228>
 8013302:	2a13      	cmp	r2, #19
 8013304:	d908      	bls.n	8013318 <_realloc_r+0x1f4>
 8013306:	6823      	ldr	r3, [r4, #0]
 8013308:	60ab      	str	r3, [r5, #8]
 801330a:	6863      	ldr	r3, [r4, #4]
 801330c:	60eb      	str	r3, [r5, #12]
 801330e:	2a1b      	cmp	r2, #27
 8013310:	d80a      	bhi.n	8013328 <_realloc_r+0x204>
 8013312:	3408      	adds	r4, #8
 8013314:	f105 0010 	add.w	r0, r5, #16
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	6003      	str	r3, [r0, #0]
 801331c:	6863      	ldr	r3, [r4, #4]
 801331e:	6043      	str	r3, [r0, #4]
 8013320:	68a3      	ldr	r3, [r4, #8]
 8013322:	6083      	str	r3, [r0, #8]
 8013324:	46a9      	mov	r9, r5
 8013326:	e75c      	b.n	80131e2 <_realloc_r+0xbe>
 8013328:	68a3      	ldr	r3, [r4, #8]
 801332a:	612b      	str	r3, [r5, #16]
 801332c:	68e3      	ldr	r3, [r4, #12]
 801332e:	616b      	str	r3, [r5, #20]
 8013330:	2a24      	cmp	r2, #36	@ 0x24
 8013332:	bf01      	itttt	eq
 8013334:	6923      	ldreq	r3, [r4, #16]
 8013336:	61ab      	streq	r3, [r5, #24]
 8013338:	6963      	ldreq	r3, [r4, #20]
 801333a:	61eb      	streq	r3, [r5, #28]
 801333c:	bf19      	ittee	ne
 801333e:	3410      	addne	r4, #16
 8013340:	f105 0018 	addne.w	r0, r5, #24
 8013344:	f105 0020 	addeq.w	r0, r5, #32
 8013348:	3418      	addeq	r4, #24
 801334a:	e7e5      	b.n	8013318 <_realloc_r+0x1f4>
 801334c:	4621      	mov	r1, r4
 801334e:	f7fc feb4 	bl	80100ba <memmove>
 8013352:	e7e7      	b.n	8013324 <_realloc_r+0x200>
 8013354:	9b01      	ldr	r3, [sp, #4]
 8013356:	4598      	cmp	r8, r3
 8013358:	dc31      	bgt.n	80133be <_realloc_r+0x29a>
 801335a:	4628      	mov	r0, r5
 801335c:	68eb      	ldr	r3, [r5, #12]
 801335e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013362:	60d3      	str	r3, [r2, #12]
 8013364:	609a      	str	r2, [r3, #8]
 8013366:	1f32      	subs	r2, r6, #4
 8013368:	2a24      	cmp	r2, #36	@ 0x24
 801336a:	d824      	bhi.n	80133b6 <_realloc_r+0x292>
 801336c:	2a13      	cmp	r2, #19
 801336e:	d908      	bls.n	8013382 <_realloc_r+0x25e>
 8013370:	6823      	ldr	r3, [r4, #0]
 8013372:	60ab      	str	r3, [r5, #8]
 8013374:	6863      	ldr	r3, [r4, #4]
 8013376:	60eb      	str	r3, [r5, #12]
 8013378:	2a1b      	cmp	r2, #27
 801337a:	d80a      	bhi.n	8013392 <_realloc_r+0x26e>
 801337c:	3408      	adds	r4, #8
 801337e:	f105 0010 	add.w	r0, r5, #16
 8013382:	6823      	ldr	r3, [r4, #0]
 8013384:	6003      	str	r3, [r0, #0]
 8013386:	6863      	ldr	r3, [r4, #4]
 8013388:	6043      	str	r3, [r0, #4]
 801338a:	68a3      	ldr	r3, [r4, #8]
 801338c:	6083      	str	r3, [r0, #8]
 801338e:	9f01      	ldr	r7, [sp, #4]
 8013390:	e7c8      	b.n	8013324 <_realloc_r+0x200>
 8013392:	68a3      	ldr	r3, [r4, #8]
 8013394:	612b      	str	r3, [r5, #16]
 8013396:	68e3      	ldr	r3, [r4, #12]
 8013398:	616b      	str	r3, [r5, #20]
 801339a:	2a24      	cmp	r2, #36	@ 0x24
 801339c:	bf01      	itttt	eq
 801339e:	6923      	ldreq	r3, [r4, #16]
 80133a0:	61ab      	streq	r3, [r5, #24]
 80133a2:	6963      	ldreq	r3, [r4, #20]
 80133a4:	61eb      	streq	r3, [r5, #28]
 80133a6:	bf19      	ittee	ne
 80133a8:	3410      	addne	r4, #16
 80133aa:	f105 0018 	addne.w	r0, r5, #24
 80133ae:	f105 0020 	addeq.w	r0, r5, #32
 80133b2:	3418      	addeq	r4, #24
 80133b4:	e7e5      	b.n	8013382 <_realloc_r+0x25e>
 80133b6:	4621      	mov	r1, r4
 80133b8:	f7fc fe7f 	bl	80100ba <memmove>
 80133bc:	e7e7      	b.n	801338e <_realloc_r+0x26a>
 80133be:	4659      	mov	r1, fp
 80133c0:	4650      	mov	r0, sl
 80133c2:	f7fc fa3b 	bl	800f83c <_malloc_r>
 80133c6:	4683      	mov	fp, r0
 80133c8:	b918      	cbnz	r0, 80133d2 <_realloc_r+0x2ae>
 80133ca:	4650      	mov	r0, sl
 80133cc:	f7fc fc76 	bl	800fcbc <__malloc_unlock>
 80133d0:	e6c7      	b.n	8013162 <_realloc_r+0x3e>
 80133d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80133d6:	f023 0301 	bic.w	r3, r3, #1
 80133da:	444b      	add	r3, r9
 80133dc:	f1a0 0208 	sub.w	r2, r0, #8
 80133e0:	4293      	cmp	r3, r2
 80133e2:	d107      	bne.n	80133f4 <_realloc_r+0x2d0>
 80133e4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80133e8:	f027 0703 	bic.w	r7, r7, #3
 80133ec:	4437      	add	r7, r6
 80133ee:	e6f8      	b.n	80131e2 <_realloc_r+0xbe>
 80133f0:	20000118 	.word	0x20000118
 80133f4:	1f32      	subs	r2, r6, #4
 80133f6:	2a24      	cmp	r2, #36	@ 0x24
 80133f8:	d82d      	bhi.n	8013456 <_realloc_r+0x332>
 80133fa:	2a13      	cmp	r2, #19
 80133fc:	d928      	bls.n	8013450 <_realloc_r+0x32c>
 80133fe:	6823      	ldr	r3, [r4, #0]
 8013400:	6003      	str	r3, [r0, #0]
 8013402:	6863      	ldr	r3, [r4, #4]
 8013404:	6043      	str	r3, [r0, #4]
 8013406:	2a1b      	cmp	r2, #27
 8013408:	d80e      	bhi.n	8013428 <_realloc_r+0x304>
 801340a:	f104 0208 	add.w	r2, r4, #8
 801340e:	f100 0308 	add.w	r3, r0, #8
 8013412:	6811      	ldr	r1, [r2, #0]
 8013414:	6019      	str	r1, [r3, #0]
 8013416:	6851      	ldr	r1, [r2, #4]
 8013418:	6059      	str	r1, [r3, #4]
 801341a:	6892      	ldr	r2, [r2, #8]
 801341c:	609a      	str	r2, [r3, #8]
 801341e:	4621      	mov	r1, r4
 8013420:	4650      	mov	r0, sl
 8013422:	f7fc ffe7 	bl	80103f4 <_free_r>
 8013426:	e73f      	b.n	80132a8 <_realloc_r+0x184>
 8013428:	68a3      	ldr	r3, [r4, #8]
 801342a:	6083      	str	r3, [r0, #8]
 801342c:	68e3      	ldr	r3, [r4, #12]
 801342e:	60c3      	str	r3, [r0, #12]
 8013430:	2a24      	cmp	r2, #36	@ 0x24
 8013432:	bf01      	itttt	eq
 8013434:	6923      	ldreq	r3, [r4, #16]
 8013436:	6103      	streq	r3, [r0, #16]
 8013438:	6961      	ldreq	r1, [r4, #20]
 801343a:	6141      	streq	r1, [r0, #20]
 801343c:	bf19      	ittee	ne
 801343e:	f104 0210 	addne.w	r2, r4, #16
 8013442:	f100 0310 	addne.w	r3, r0, #16
 8013446:	f104 0218 	addeq.w	r2, r4, #24
 801344a:	f100 0318 	addeq.w	r3, r0, #24
 801344e:	e7e0      	b.n	8013412 <_realloc_r+0x2ee>
 8013450:	4603      	mov	r3, r0
 8013452:	4622      	mov	r2, r4
 8013454:	e7dd      	b.n	8013412 <_realloc_r+0x2ee>
 8013456:	4621      	mov	r1, r4
 8013458:	f7fc fe2f 	bl	80100ba <memmove>
 801345c:	e7df      	b.n	801341e <_realloc_r+0x2fa>
 801345e:	4637      	mov	r7, r6
 8013460:	e6bf      	b.n	80131e2 <_realloc_r+0xbe>
 8013462:	431f      	orrs	r7, r3
 8013464:	f8c9 7004 	str.w	r7, [r9, #4]
 8013468:	6853      	ldr	r3, [r2, #4]
 801346a:	f043 0301 	orr.w	r3, r3, #1
 801346e:	6053      	str	r3, [r2, #4]
 8013470:	e6d3      	b.n	801321a <_realloc_r+0xf6>
 8013472:	bf00      	nop

08013474 <__ascii_wctomb>:
 8013474:	4603      	mov	r3, r0
 8013476:	4608      	mov	r0, r1
 8013478:	b141      	cbz	r1, 801348c <__ascii_wctomb+0x18>
 801347a:	2aff      	cmp	r2, #255	@ 0xff
 801347c:	d904      	bls.n	8013488 <__ascii_wctomb+0x14>
 801347e:	228a      	movs	r2, #138	@ 0x8a
 8013480:	601a      	str	r2, [r3, #0]
 8013482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013486:	4770      	bx	lr
 8013488:	700a      	strb	r2, [r1, #0]
 801348a:	2001      	movs	r0, #1
 801348c:	4770      	bx	lr
	...

08013490 <fiprintf>:
 8013490:	b40e      	push	{r1, r2, r3}
 8013492:	b503      	push	{r0, r1, lr}
 8013494:	4601      	mov	r1, r0
 8013496:	ab03      	add	r3, sp, #12
 8013498:	4805      	ldr	r0, [pc, #20]	@ (80134b0 <fiprintf+0x20>)
 801349a:	f853 2b04 	ldr.w	r2, [r3], #4
 801349e:	6800      	ldr	r0, [r0, #0]
 80134a0:	9301      	str	r3, [sp, #4]
 80134a2:	f000 f839 	bl	8013518 <_vfiprintf_r>
 80134a6:	b002      	add	sp, #8
 80134a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80134ac:	b003      	add	sp, #12
 80134ae:	4770      	bx	lr
 80134b0:	2000052c 	.word	0x2000052c

080134b4 <__sprint_r>:
 80134b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b8:	6893      	ldr	r3, [r2, #8]
 80134ba:	4680      	mov	r8, r0
 80134bc:	460e      	mov	r6, r1
 80134be:	4614      	mov	r4, r2
 80134c0:	b343      	cbz	r3, 8013514 <__sprint_r+0x60>
 80134c2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80134c4:	049d      	lsls	r5, r3, #18
 80134c6:	d522      	bpl.n	801350e <__sprint_r+0x5a>
 80134c8:	6815      	ldr	r5, [r2, #0]
 80134ca:	68a0      	ldr	r0, [r4, #8]
 80134cc:	3508      	adds	r5, #8
 80134ce:	b928      	cbnz	r0, 80134dc <__sprint_r+0x28>
 80134d0:	2300      	movs	r3, #0
 80134d2:	60a3      	str	r3, [r4, #8]
 80134d4:	2300      	movs	r3, #0
 80134d6:	6063      	str	r3, [r4, #4]
 80134d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134dc:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 80134e0:	f04f 0900 	mov.w	r9, #0
 80134e4:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80134e8:	45ca      	cmp	sl, r9
 80134ea:	dc05      	bgt.n	80134f8 <__sprint_r+0x44>
 80134ec:	68a3      	ldr	r3, [r4, #8]
 80134ee:	f027 0703 	bic.w	r7, r7, #3
 80134f2:	1bdb      	subs	r3, r3, r7
 80134f4:	60a3      	str	r3, [r4, #8]
 80134f6:	e7e8      	b.n	80134ca <__sprint_r+0x16>
 80134f8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80134fc:	4632      	mov	r2, r6
 80134fe:	4640      	mov	r0, r8
 8013500:	f000 feb5 	bl	801426e <_fputwc_r>
 8013504:	1c43      	adds	r3, r0, #1
 8013506:	d0e3      	beq.n	80134d0 <__sprint_r+0x1c>
 8013508:	f109 0901 	add.w	r9, r9, #1
 801350c:	e7ec      	b.n	80134e8 <__sprint_r+0x34>
 801350e:	f000 fccb 	bl	8013ea8 <__sfvwrite_r>
 8013512:	e7dd      	b.n	80134d0 <__sprint_r+0x1c>
 8013514:	4618      	mov	r0, r3
 8013516:	e7dd      	b.n	80134d4 <__sprint_r+0x20>

08013518 <_vfiprintf_r>:
 8013518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	b0bb      	sub	sp, #236	@ 0xec
 801351e:	460f      	mov	r7, r1
 8013520:	4693      	mov	fp, r2
 8013522:	461c      	mov	r4, r3
 8013524:	461d      	mov	r5, r3
 8013526:	9000      	str	r0, [sp, #0]
 8013528:	b118      	cbz	r0, 8013532 <_vfiprintf_r+0x1a>
 801352a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801352c:	b90b      	cbnz	r3, 8013532 <_vfiprintf_r+0x1a>
 801352e:	f7fc fcf7 	bl	800ff20 <__sinit>
 8013532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013534:	07db      	lsls	r3, r3, #31
 8013536:	d405      	bmi.n	8013544 <_vfiprintf_r+0x2c>
 8013538:	89bb      	ldrh	r3, [r7, #12]
 801353a:	059e      	lsls	r6, r3, #22
 801353c:	d402      	bmi.n	8013544 <_vfiprintf_r+0x2c>
 801353e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013540:	f7fc fed6 	bl	80102f0 <__retarget_lock_acquire_recursive>
 8013544:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013548:	0498      	lsls	r0, r3, #18
 801354a:	d406      	bmi.n	801355a <_vfiprintf_r+0x42>
 801354c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013550:	81bb      	strh	r3, [r7, #12]
 8013552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013558:	667b      	str	r3, [r7, #100]	@ 0x64
 801355a:	89bb      	ldrh	r3, [r7, #12]
 801355c:	0719      	lsls	r1, r3, #28
 801355e:	d501      	bpl.n	8013564 <_vfiprintf_r+0x4c>
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	b9ab      	cbnz	r3, 8013590 <_vfiprintf_r+0x78>
 8013564:	9800      	ldr	r0, [sp, #0]
 8013566:	4639      	mov	r1, r7
 8013568:	f000 fdea 	bl	8014140 <__swsetup_r>
 801356c:	b180      	cbz	r0, 8013590 <_vfiprintf_r+0x78>
 801356e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013570:	07da      	lsls	r2, r3, #31
 8013572:	d506      	bpl.n	8013582 <_vfiprintf_r+0x6a>
 8013574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013578:	9303      	str	r3, [sp, #12]
 801357a:	9803      	ldr	r0, [sp, #12]
 801357c:	b03b      	add	sp, #236	@ 0xec
 801357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013582:	89bb      	ldrh	r3, [r7, #12]
 8013584:	059b      	lsls	r3, r3, #22
 8013586:	d4f5      	bmi.n	8013574 <_vfiprintf_r+0x5c>
 8013588:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801358a:	f7fc feb2 	bl	80102f2 <__retarget_lock_release_recursive>
 801358e:	e7f1      	b.n	8013574 <_vfiprintf_r+0x5c>
 8013590:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013594:	f003 021a 	and.w	r2, r3, #26
 8013598:	2a0a      	cmp	r2, #10
 801359a:	d114      	bne.n	80135c6 <_vfiprintf_r+0xae>
 801359c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	db10      	blt.n	80135c6 <_vfiprintf_r+0xae>
 80135a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80135a6:	07d6      	lsls	r6, r2, #31
 80135a8:	d404      	bmi.n	80135b4 <_vfiprintf_r+0x9c>
 80135aa:	059d      	lsls	r5, r3, #22
 80135ac:	d402      	bmi.n	80135b4 <_vfiprintf_r+0x9c>
 80135ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80135b0:	f7fc fe9f 	bl	80102f2 <__retarget_lock_release_recursive>
 80135b4:	9800      	ldr	r0, [sp, #0]
 80135b6:	4623      	mov	r3, r4
 80135b8:	465a      	mov	r2, fp
 80135ba:	4639      	mov	r1, r7
 80135bc:	b03b      	add	sp, #236	@ 0xec
 80135be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c2:	f000 bc31 	b.w	8013e28 <__sbprintf>
 80135c6:	2300      	movs	r3, #0
 80135c8:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 80135cc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80135d0:	ae11      	add	r6, sp, #68	@ 0x44
 80135d2:	960e      	str	r6, [sp, #56]	@ 0x38
 80135d4:	9307      	str	r3, [sp, #28]
 80135d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80135d8:	9303      	str	r3, [sp, #12]
 80135da:	465b      	mov	r3, fp
 80135dc:	461c      	mov	r4, r3
 80135de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135e2:	b10a      	cbz	r2, 80135e8 <_vfiprintf_r+0xd0>
 80135e4:	2a25      	cmp	r2, #37	@ 0x25
 80135e6:	d1f9      	bne.n	80135dc <_vfiprintf_r+0xc4>
 80135e8:	ebb4 080b 	subs.w	r8, r4, fp
 80135ec:	d00d      	beq.n	801360a <_vfiprintf_r+0xf2>
 80135ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135f0:	4443      	add	r3, r8
 80135f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80135f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135f6:	3301      	adds	r3, #1
 80135f8:	2b07      	cmp	r3, #7
 80135fa:	e9c6 b800 	strd	fp, r8, [r6]
 80135fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013600:	dc75      	bgt.n	80136ee <_vfiprintf_r+0x1d6>
 8013602:	3608      	adds	r6, #8
 8013604:	9b03      	ldr	r3, [sp, #12]
 8013606:	4443      	add	r3, r8
 8013608:	9303      	str	r3, [sp, #12]
 801360a:	7823      	ldrb	r3, [r4, #0]
 801360c:	2b00      	cmp	r3, #0
 801360e:	f000 83cd 	beq.w	8013dac <_vfiprintf_r+0x894>
 8013612:	2300      	movs	r3, #0
 8013614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013618:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801361c:	3401      	adds	r4, #1
 801361e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013622:	469a      	mov	sl, r3
 8013624:	46a3      	mov	fp, r4
 8013626:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801362a:	f1a3 0220 	sub.w	r2, r3, #32
 801362e:	2a5a      	cmp	r2, #90	@ 0x5a
 8013630:	f200 8316 	bhi.w	8013c60 <_vfiprintf_r+0x748>
 8013634:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013638:	0314009a 	.word	0x0314009a
 801363c:	00a20314 	.word	0x00a20314
 8013640:	03140314 	.word	0x03140314
 8013644:	00820314 	.word	0x00820314
 8013648:	03140314 	.word	0x03140314
 801364c:	00af00a5 	.word	0x00af00a5
 8013650:	00ac0314 	.word	0x00ac0314
 8013654:	031400b1 	.word	0x031400b1
 8013658:	00d000cd 	.word	0x00d000cd
 801365c:	00d000d0 	.word	0x00d000d0
 8013660:	00d000d0 	.word	0x00d000d0
 8013664:	00d000d0 	.word	0x00d000d0
 8013668:	00d000d0 	.word	0x00d000d0
 801366c:	03140314 	.word	0x03140314
 8013670:	03140314 	.word	0x03140314
 8013674:	03140314 	.word	0x03140314
 8013678:	03140314 	.word	0x03140314
 801367c:	00f70314 	.word	0x00f70314
 8013680:	03140104 	.word	0x03140104
 8013684:	03140314 	.word	0x03140314
 8013688:	03140314 	.word	0x03140314
 801368c:	03140314 	.word	0x03140314
 8013690:	03140314 	.word	0x03140314
 8013694:	01520314 	.word	0x01520314
 8013698:	03140314 	.word	0x03140314
 801369c:	019a0314 	.word	0x019a0314
 80136a0:	027a0314 	.word	0x027a0314
 80136a4:	03140314 	.word	0x03140314
 80136a8:	0314029a 	.word	0x0314029a
 80136ac:	03140314 	.word	0x03140314
 80136b0:	03140314 	.word	0x03140314
 80136b4:	03140314 	.word	0x03140314
 80136b8:	03140314 	.word	0x03140314
 80136bc:	00f70314 	.word	0x00f70314
 80136c0:	03140106 	.word	0x03140106
 80136c4:	03140314 	.word	0x03140314
 80136c8:	010600e0 	.word	0x010600e0
 80136cc:	031400f1 	.word	0x031400f1
 80136d0:	031400eb 	.word	0x031400eb
 80136d4:	01540132 	.word	0x01540132
 80136d8:	00f10189 	.word	0x00f10189
 80136dc:	019a0314 	.word	0x019a0314
 80136e0:	027c0098 	.word	0x027c0098
 80136e4:	03140314 	.word	0x03140314
 80136e8:	03140065 	.word	0x03140065
 80136ec:	0098      	.short	0x0098
 80136ee:	9800      	ldr	r0, [sp, #0]
 80136f0:	aa0e      	add	r2, sp, #56	@ 0x38
 80136f2:	4639      	mov	r1, r7
 80136f4:	f7ff fede 	bl	80134b4 <__sprint_r>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	f040 8336 	bne.w	8013d6a <_vfiprintf_r+0x852>
 80136fe:	ae11      	add	r6, sp, #68	@ 0x44
 8013700:	e780      	b.n	8013604 <_vfiprintf_r+0xec>
 8013702:	4a99      	ldr	r2, [pc, #612]	@ (8013968 <_vfiprintf_r+0x450>)
 8013704:	9205      	str	r2, [sp, #20]
 8013706:	f01a 0220 	ands.w	r2, sl, #32
 801370a:	f000 8231 	beq.w	8013b70 <_vfiprintf_r+0x658>
 801370e:	3507      	adds	r5, #7
 8013710:	f025 0507 	bic.w	r5, r5, #7
 8013714:	46a8      	mov	r8, r5
 8013716:	686d      	ldr	r5, [r5, #4]
 8013718:	f858 4b08 	ldr.w	r4, [r8], #8
 801371c:	f01a 0f01 	tst.w	sl, #1
 8013720:	d009      	beq.n	8013736 <_vfiprintf_r+0x21e>
 8013722:	ea54 0205 	orrs.w	r2, r4, r5
 8013726:	bf1f      	itttt	ne
 8013728:	2230      	movne	r2, #48	@ 0x30
 801372a:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 801372e:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8013732:	f04a 0a02 	orrne.w	sl, sl, #2
 8013736:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801373a:	e112      	b.n	8013962 <_vfiprintf_r+0x44a>
 801373c:	9800      	ldr	r0, [sp, #0]
 801373e:	f7fe fa0f 	bl	8011b60 <_localeconv_r>
 8013742:	6843      	ldr	r3, [r0, #4]
 8013744:	9309      	str	r3, [sp, #36]	@ 0x24
 8013746:	4618      	mov	r0, r3
 8013748:	f7ec fd4a 	bl	80001e0 <strlen>
 801374c:	9007      	str	r0, [sp, #28]
 801374e:	9800      	ldr	r0, [sp, #0]
 8013750:	f7fe fa06 	bl	8011b60 <_localeconv_r>
 8013754:	6883      	ldr	r3, [r0, #8]
 8013756:	9306      	str	r3, [sp, #24]
 8013758:	9b07      	ldr	r3, [sp, #28]
 801375a:	b12b      	cbz	r3, 8013768 <_vfiprintf_r+0x250>
 801375c:	9b06      	ldr	r3, [sp, #24]
 801375e:	b11b      	cbz	r3, 8013768 <_vfiprintf_r+0x250>
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	b10b      	cbz	r3, 8013768 <_vfiprintf_r+0x250>
 8013764:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8013768:	465c      	mov	r4, fp
 801376a:	e75b      	b.n	8013624 <_vfiprintf_r+0x10c>
 801376c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8013770:	2b00      	cmp	r3, #0
 8013772:	d1f9      	bne.n	8013768 <_vfiprintf_r+0x250>
 8013774:	2320      	movs	r3, #32
 8013776:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801377a:	e7f5      	b.n	8013768 <_vfiprintf_r+0x250>
 801377c:	f04a 0a01 	orr.w	sl, sl, #1
 8013780:	e7f2      	b.n	8013768 <_vfiprintf_r+0x250>
 8013782:	f855 3b04 	ldr.w	r3, [r5], #4
 8013786:	9302      	str	r3, [sp, #8]
 8013788:	2b00      	cmp	r3, #0
 801378a:	daed      	bge.n	8013768 <_vfiprintf_r+0x250>
 801378c:	425b      	negs	r3, r3
 801378e:	9302      	str	r3, [sp, #8]
 8013790:	f04a 0a04 	orr.w	sl, sl, #4
 8013794:	e7e8      	b.n	8013768 <_vfiprintf_r+0x250>
 8013796:	232b      	movs	r3, #43	@ 0x2b
 8013798:	e7ed      	b.n	8013776 <_vfiprintf_r+0x25e>
 801379a:	465a      	mov	r2, fp
 801379c:	f812 3b01 	ldrb.w	r3, [r2], #1
 80137a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80137a2:	d112      	bne.n	80137ca <_vfiprintf_r+0x2b2>
 80137a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80137a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137ac:	9301      	str	r3, [sp, #4]
 80137ae:	4693      	mov	fp, r2
 80137b0:	e7da      	b.n	8013768 <_vfiprintf_r+0x250>
 80137b2:	9b01      	ldr	r3, [sp, #4]
 80137b4:	fb00 1303 	mla	r3, r0, r3, r1
 80137b8:	9301      	str	r3, [sp, #4]
 80137ba:	f812 3b01 	ldrb.w	r3, [r2], #1
 80137be:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80137c2:	2909      	cmp	r1, #9
 80137c4:	d9f5      	bls.n	80137b2 <_vfiprintf_r+0x29a>
 80137c6:	4693      	mov	fp, r2
 80137c8:	e72f      	b.n	801362a <_vfiprintf_r+0x112>
 80137ca:	2100      	movs	r1, #0
 80137cc:	9101      	str	r1, [sp, #4]
 80137ce:	200a      	movs	r0, #10
 80137d0:	e7f5      	b.n	80137be <_vfiprintf_r+0x2a6>
 80137d2:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80137d6:	e7c7      	b.n	8013768 <_vfiprintf_r+0x250>
 80137d8:	2100      	movs	r1, #0
 80137da:	465a      	mov	r2, fp
 80137dc:	9102      	str	r1, [sp, #8]
 80137de:	200a      	movs	r0, #10
 80137e0:	9902      	ldr	r1, [sp, #8]
 80137e2:	3b30      	subs	r3, #48	@ 0x30
 80137e4:	fb00 3301 	mla	r3, r0, r1, r3
 80137e8:	9302      	str	r3, [sp, #8]
 80137ea:	f812 3b01 	ldrb.w	r3, [r2], #1
 80137ee:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80137f2:	2909      	cmp	r1, #9
 80137f4:	d9f4      	bls.n	80137e0 <_vfiprintf_r+0x2c8>
 80137f6:	e7e6      	b.n	80137c6 <_vfiprintf_r+0x2ae>
 80137f8:	f89b 3000 	ldrb.w	r3, [fp]
 80137fc:	2b68      	cmp	r3, #104	@ 0x68
 80137fe:	bf06      	itte	eq
 8013800:	f10b 0b01 	addeq.w	fp, fp, #1
 8013804:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8013808:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 801380c:	e7ac      	b.n	8013768 <_vfiprintf_r+0x250>
 801380e:	f89b 3000 	ldrb.w	r3, [fp]
 8013812:	2b6c      	cmp	r3, #108	@ 0x6c
 8013814:	d104      	bne.n	8013820 <_vfiprintf_r+0x308>
 8013816:	f10b 0b01 	add.w	fp, fp, #1
 801381a:	f04a 0a20 	orr.w	sl, sl, #32
 801381e:	e7a3      	b.n	8013768 <_vfiprintf_r+0x250>
 8013820:	f04a 0a10 	orr.w	sl, sl, #16
 8013824:	e7a0      	b.n	8013768 <_vfiprintf_r+0x250>
 8013826:	46a8      	mov	r8, r5
 8013828:	2400      	movs	r4, #0
 801382a:	f858 3b04 	ldr.w	r3, [r8], #4
 801382e:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8013832:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8013836:	2301      	movs	r3, #1
 8013838:	9301      	str	r3, [sp, #4]
 801383a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801383e:	e0ab      	b.n	8013998 <_vfiprintf_r+0x480>
 8013840:	f04a 0a10 	orr.w	sl, sl, #16
 8013844:	f01a 0f20 	tst.w	sl, #32
 8013848:	d011      	beq.n	801386e <_vfiprintf_r+0x356>
 801384a:	3507      	adds	r5, #7
 801384c:	f025 0507 	bic.w	r5, r5, #7
 8013850:	46a8      	mov	r8, r5
 8013852:	686d      	ldr	r5, [r5, #4]
 8013854:	f858 4b08 	ldr.w	r4, [r8], #8
 8013858:	2d00      	cmp	r5, #0
 801385a:	da06      	bge.n	801386a <_vfiprintf_r+0x352>
 801385c:	4264      	negs	r4, r4
 801385e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8013862:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8013866:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801386a:	2301      	movs	r3, #1
 801386c:	e048      	b.n	8013900 <_vfiprintf_r+0x3e8>
 801386e:	46a8      	mov	r8, r5
 8013870:	f01a 0f10 	tst.w	sl, #16
 8013874:	f858 5b04 	ldr.w	r5, [r8], #4
 8013878:	d002      	beq.n	8013880 <_vfiprintf_r+0x368>
 801387a:	462c      	mov	r4, r5
 801387c:	17ed      	asrs	r5, r5, #31
 801387e:	e7eb      	b.n	8013858 <_vfiprintf_r+0x340>
 8013880:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8013884:	d003      	beq.n	801388e <_vfiprintf_r+0x376>
 8013886:	b22c      	sxth	r4, r5
 8013888:	f345 35c0 	sbfx	r5, r5, #15, #1
 801388c:	e7e4      	b.n	8013858 <_vfiprintf_r+0x340>
 801388e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8013892:	d0f2      	beq.n	801387a <_vfiprintf_r+0x362>
 8013894:	b26c      	sxtb	r4, r5
 8013896:	f345 15c0 	sbfx	r5, r5, #7, #1
 801389a:	e7dd      	b.n	8013858 <_vfiprintf_r+0x340>
 801389c:	f01a 0f20 	tst.w	sl, #32
 80138a0:	d007      	beq.n	80138b2 <_vfiprintf_r+0x39a>
 80138a2:	9a03      	ldr	r2, [sp, #12]
 80138a4:	682b      	ldr	r3, [r5, #0]
 80138a6:	9903      	ldr	r1, [sp, #12]
 80138a8:	17d2      	asrs	r2, r2, #31
 80138aa:	e9c3 1200 	strd	r1, r2, [r3]
 80138ae:	3504      	adds	r5, #4
 80138b0:	e693      	b.n	80135da <_vfiprintf_r+0xc2>
 80138b2:	f01a 0f10 	tst.w	sl, #16
 80138b6:	d003      	beq.n	80138c0 <_vfiprintf_r+0x3a8>
 80138b8:	682b      	ldr	r3, [r5, #0]
 80138ba:	9a03      	ldr	r2, [sp, #12]
 80138bc:	601a      	str	r2, [r3, #0]
 80138be:	e7f6      	b.n	80138ae <_vfiprintf_r+0x396>
 80138c0:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80138c4:	d003      	beq.n	80138ce <_vfiprintf_r+0x3b6>
 80138c6:	682b      	ldr	r3, [r5, #0]
 80138c8:	9a03      	ldr	r2, [sp, #12]
 80138ca:	801a      	strh	r2, [r3, #0]
 80138cc:	e7ef      	b.n	80138ae <_vfiprintf_r+0x396>
 80138ce:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80138d2:	d0f1      	beq.n	80138b8 <_vfiprintf_r+0x3a0>
 80138d4:	682b      	ldr	r3, [r5, #0]
 80138d6:	9a03      	ldr	r2, [sp, #12]
 80138d8:	701a      	strb	r2, [r3, #0]
 80138da:	e7e8      	b.n	80138ae <_vfiprintf_r+0x396>
 80138dc:	f04a 0a10 	orr.w	sl, sl, #16
 80138e0:	f01a 0320 	ands.w	r3, sl, #32
 80138e4:	d01f      	beq.n	8013926 <_vfiprintf_r+0x40e>
 80138e6:	3507      	adds	r5, #7
 80138e8:	f025 0507 	bic.w	r5, r5, #7
 80138ec:	46a8      	mov	r8, r5
 80138ee:	686d      	ldr	r5, [r5, #4]
 80138f0:	f858 4b08 	ldr.w	r4, [r8], #8
 80138f4:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80138f8:	2300      	movs	r3, #0
 80138fa:	2200      	movs	r2, #0
 80138fc:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8013900:	9a01      	ldr	r2, [sp, #4]
 8013902:	3201      	adds	r2, #1
 8013904:	f000 825f 	beq.w	8013dc6 <_vfiprintf_r+0x8ae>
 8013908:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 801390c:	9204      	str	r2, [sp, #16]
 801390e:	ea54 0205 	orrs.w	r2, r4, r5
 8013912:	f040 825e 	bne.w	8013dd2 <_vfiprintf_r+0x8ba>
 8013916:	9a01      	ldr	r2, [sp, #4]
 8013918:	2a00      	cmp	r2, #0
 801391a:	f000 8198 	beq.w	8013c4e <_vfiprintf_r+0x736>
 801391e:	2b01      	cmp	r3, #1
 8013920:	f040 825a 	bne.w	8013dd8 <_vfiprintf_r+0x8c0>
 8013924:	e13b      	b.n	8013b9e <_vfiprintf_r+0x686>
 8013926:	46a8      	mov	r8, r5
 8013928:	f01a 0510 	ands.w	r5, sl, #16
 801392c:	f858 4b04 	ldr.w	r4, [r8], #4
 8013930:	d001      	beq.n	8013936 <_vfiprintf_r+0x41e>
 8013932:	461d      	mov	r5, r3
 8013934:	e7de      	b.n	80138f4 <_vfiprintf_r+0x3dc>
 8013936:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801393a:	d001      	beq.n	8013940 <_vfiprintf_r+0x428>
 801393c:	b2a4      	uxth	r4, r4
 801393e:	e7d9      	b.n	80138f4 <_vfiprintf_r+0x3dc>
 8013940:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013944:	d0d6      	beq.n	80138f4 <_vfiprintf_r+0x3dc>
 8013946:	b2e4      	uxtb	r4, r4
 8013948:	e7f3      	b.n	8013932 <_vfiprintf_r+0x41a>
 801394a:	46a8      	mov	r8, r5
 801394c:	f647 0330 	movw	r3, #30768	@ 0x7830
 8013950:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8013954:	f858 4b04 	ldr.w	r4, [r8], #4
 8013958:	4b03      	ldr	r3, [pc, #12]	@ (8013968 <_vfiprintf_r+0x450>)
 801395a:	9305      	str	r3, [sp, #20]
 801395c:	2500      	movs	r5, #0
 801395e:	f04a 0a02 	orr.w	sl, sl, #2
 8013962:	2302      	movs	r3, #2
 8013964:	e7c9      	b.n	80138fa <_vfiprintf_r+0x3e2>
 8013966:	bf00      	nop
 8013968:	080146c9 	.word	0x080146c9
 801396c:	9b01      	ldr	r3, [sp, #4]
 801396e:	46a8      	mov	r8, r5
 8013970:	1c5c      	adds	r4, r3, #1
 8013972:	f04f 0500 	mov.w	r5, #0
 8013976:	f858 9b04 	ldr.w	r9, [r8], #4
 801397a:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 801397e:	f000 80d0 	beq.w	8013b22 <_vfiprintf_r+0x60a>
 8013982:	461a      	mov	r2, r3
 8013984:	4629      	mov	r1, r5
 8013986:	4648      	mov	r0, r9
 8013988:	f7ec fc32 	bl	80001f0 <memchr>
 801398c:	4604      	mov	r4, r0
 801398e:	b118      	cbz	r0, 8013998 <_vfiprintf_r+0x480>
 8013990:	eba0 0309 	sub.w	r3, r0, r9
 8013994:	9301      	str	r3, [sp, #4]
 8013996:	462c      	mov	r4, r5
 8013998:	9b01      	ldr	r3, [sp, #4]
 801399a:	42a3      	cmp	r3, r4
 801399c:	bfb8      	it	lt
 801399e:	4623      	movlt	r3, r4
 80139a0:	9304      	str	r3, [sp, #16]
 80139a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80139a6:	b113      	cbz	r3, 80139ae <_vfiprintf_r+0x496>
 80139a8:	9b04      	ldr	r3, [sp, #16]
 80139aa:	3301      	adds	r3, #1
 80139ac:	9304      	str	r3, [sp, #16]
 80139ae:	f01a 0302 	ands.w	r3, sl, #2
 80139b2:	9308      	str	r3, [sp, #32]
 80139b4:	bf1e      	ittt	ne
 80139b6:	9b04      	ldrne	r3, [sp, #16]
 80139b8:	3302      	addne	r3, #2
 80139ba:	9304      	strne	r3, [sp, #16]
 80139bc:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80139c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80139c2:	d11f      	bne.n	8013a04 <_vfiprintf_r+0x4ec>
 80139c4:	9b02      	ldr	r3, [sp, #8]
 80139c6:	9a04      	ldr	r2, [sp, #16]
 80139c8:	1a9d      	subs	r5, r3, r2
 80139ca:	2d00      	cmp	r5, #0
 80139cc:	dd1a      	ble.n	8013a04 <_vfiprintf_r+0x4ec>
 80139ce:	4ba9      	ldr	r3, [pc, #676]	@ (8013c74 <_vfiprintf_r+0x75c>)
 80139d0:	6033      	str	r3, [r6, #0]
 80139d2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80139d6:	2d10      	cmp	r5, #16
 80139d8:	f102 0201 	add.w	r2, r2, #1
 80139dc:	f106 0008 	add.w	r0, r6, #8
 80139e0:	f300 814e 	bgt.w	8013c80 <_vfiprintf_r+0x768>
 80139e4:	6075      	str	r5, [r6, #4]
 80139e6:	2a07      	cmp	r2, #7
 80139e8:	4465      	add	r5, ip
 80139ea:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80139ee:	f340 815a 	ble.w	8013ca6 <_vfiprintf_r+0x78e>
 80139f2:	9800      	ldr	r0, [sp, #0]
 80139f4:	aa0e      	add	r2, sp, #56	@ 0x38
 80139f6:	4639      	mov	r1, r7
 80139f8:	f7ff fd5c 	bl	80134b4 <__sprint_r>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	f040 81b4 	bne.w	8013d6a <_vfiprintf_r+0x852>
 8013a02:	ae11      	add	r6, sp, #68	@ 0x44
 8013a04:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8013a08:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013a0c:	b161      	cbz	r1, 8013a28 <_vfiprintf_r+0x510>
 8013a0e:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8013a12:	3301      	adds	r3, #1
 8013a14:	6031      	str	r1, [r6, #0]
 8013a16:	2101      	movs	r1, #1
 8013a18:	440a      	add	r2, r1
 8013a1a:	2b07      	cmp	r3, #7
 8013a1c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013a20:	6071      	str	r1, [r6, #4]
 8013a22:	f300 8142 	bgt.w	8013caa <_vfiprintf_r+0x792>
 8013a26:	3608      	adds	r6, #8
 8013a28:	9908      	ldr	r1, [sp, #32]
 8013a2a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013a2e:	b159      	cbz	r1, 8013a48 <_vfiprintf_r+0x530>
 8013a30:	a90d      	add	r1, sp, #52	@ 0x34
 8013a32:	3301      	adds	r3, #1
 8013a34:	6031      	str	r1, [r6, #0]
 8013a36:	2102      	movs	r1, #2
 8013a38:	440a      	add	r2, r1
 8013a3a:	2b07      	cmp	r3, #7
 8013a3c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013a40:	6071      	str	r1, [r6, #4]
 8013a42:	f300 813b 	bgt.w	8013cbc <_vfiprintf_r+0x7a4>
 8013a46:	3608      	adds	r6, #8
 8013a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a4a:	2b80      	cmp	r3, #128	@ 0x80
 8013a4c:	d11f      	bne.n	8013a8e <_vfiprintf_r+0x576>
 8013a4e:	9b02      	ldr	r3, [sp, #8]
 8013a50:	9a04      	ldr	r2, [sp, #16]
 8013a52:	1a9d      	subs	r5, r3, r2
 8013a54:	2d00      	cmp	r5, #0
 8013a56:	dd1a      	ble.n	8013a8e <_vfiprintf_r+0x576>
 8013a58:	4b87      	ldr	r3, [pc, #540]	@ (8013c78 <_vfiprintf_r+0x760>)
 8013a5a:	6033      	str	r3, [r6, #0]
 8013a5c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8013a60:	2d10      	cmp	r5, #16
 8013a62:	f102 0201 	add.w	r2, r2, #1
 8013a66:	f106 0008 	add.w	r0, r6, #8
 8013a6a:	f300 8130 	bgt.w	8013cce <_vfiprintf_r+0x7b6>
 8013a6e:	6075      	str	r5, [r6, #4]
 8013a70:	2a07      	cmp	r2, #7
 8013a72:	4465      	add	r5, ip
 8013a74:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8013a78:	f340 813c 	ble.w	8013cf4 <_vfiprintf_r+0x7dc>
 8013a7c:	9800      	ldr	r0, [sp, #0]
 8013a7e:	aa0e      	add	r2, sp, #56	@ 0x38
 8013a80:	4639      	mov	r1, r7
 8013a82:	f7ff fd17 	bl	80134b4 <__sprint_r>
 8013a86:	2800      	cmp	r0, #0
 8013a88:	f040 816f 	bne.w	8013d6a <_vfiprintf_r+0x852>
 8013a8c:	ae11      	add	r6, sp, #68	@ 0x44
 8013a8e:	9b01      	ldr	r3, [sp, #4]
 8013a90:	1ae4      	subs	r4, r4, r3
 8013a92:	2c00      	cmp	r4, #0
 8013a94:	dd1a      	ble.n	8013acc <_vfiprintf_r+0x5b4>
 8013a96:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013a9a:	4877      	ldr	r0, [pc, #476]	@ (8013c78 <_vfiprintf_r+0x760>)
 8013a9c:	6030      	str	r0, [r6, #0]
 8013a9e:	2c10      	cmp	r4, #16
 8013aa0:	f103 0301 	add.w	r3, r3, #1
 8013aa4:	f106 0108 	add.w	r1, r6, #8
 8013aa8:	f300 8126 	bgt.w	8013cf8 <_vfiprintf_r+0x7e0>
 8013aac:	6074      	str	r4, [r6, #4]
 8013aae:	2b07      	cmp	r3, #7
 8013ab0:	4414      	add	r4, r2
 8013ab2:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8013ab6:	f340 8130 	ble.w	8013d1a <_vfiprintf_r+0x802>
 8013aba:	9800      	ldr	r0, [sp, #0]
 8013abc:	aa0e      	add	r2, sp, #56	@ 0x38
 8013abe:	4639      	mov	r1, r7
 8013ac0:	f7ff fcf8 	bl	80134b4 <__sprint_r>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	f040 8150 	bne.w	8013d6a <_vfiprintf_r+0x852>
 8013aca:	ae11      	add	r6, sp, #68	@ 0x44
 8013acc:	9b01      	ldr	r3, [sp, #4]
 8013ace:	9a01      	ldr	r2, [sp, #4]
 8013ad0:	6073      	str	r3, [r6, #4]
 8013ad2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ad4:	f8c6 9000 	str.w	r9, [r6]
 8013ad8:	4413      	add	r3, r2
 8013ada:	9310      	str	r3, [sp, #64]	@ 0x40
 8013adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ade:	3301      	adds	r3, #1
 8013ae0:	2b07      	cmp	r3, #7
 8013ae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013ae4:	f300 811b 	bgt.w	8013d1e <_vfiprintf_r+0x806>
 8013ae8:	f106 0308 	add.w	r3, r6, #8
 8013aec:	f01a 0f04 	tst.w	sl, #4
 8013af0:	f040 811d 	bne.w	8013d2e <_vfiprintf_r+0x816>
 8013af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013af8:	9904      	ldr	r1, [sp, #16]
 8013afa:	428a      	cmp	r2, r1
 8013afc:	bfac      	ite	ge
 8013afe:	189b      	addge	r3, r3, r2
 8013b00:	185b      	addlt	r3, r3, r1
 8013b02:	9303      	str	r3, [sp, #12]
 8013b04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013b06:	b13b      	cbz	r3, 8013b18 <_vfiprintf_r+0x600>
 8013b08:	9800      	ldr	r0, [sp, #0]
 8013b0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8013b0c:	4639      	mov	r1, r7
 8013b0e:	f7ff fcd1 	bl	80134b4 <__sprint_r>
 8013b12:	2800      	cmp	r0, #0
 8013b14:	f040 8129 	bne.w	8013d6a <_vfiprintf_r+0x852>
 8013b18:	2300      	movs	r3, #0
 8013b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b1c:	4645      	mov	r5, r8
 8013b1e:	ae11      	add	r6, sp, #68	@ 0x44
 8013b20:	e55b      	b.n	80135da <_vfiprintf_r+0xc2>
 8013b22:	4648      	mov	r0, r9
 8013b24:	f7ec fb5c 	bl	80001e0 <strlen>
 8013b28:	9001      	str	r0, [sp, #4]
 8013b2a:	e734      	b.n	8013996 <_vfiprintf_r+0x47e>
 8013b2c:	f04a 0a10 	orr.w	sl, sl, #16
 8013b30:	f01a 0320 	ands.w	r3, sl, #32
 8013b34:	d008      	beq.n	8013b48 <_vfiprintf_r+0x630>
 8013b36:	3507      	adds	r5, #7
 8013b38:	f025 0507 	bic.w	r5, r5, #7
 8013b3c:	46a8      	mov	r8, r5
 8013b3e:	686d      	ldr	r5, [r5, #4]
 8013b40:	f858 4b08 	ldr.w	r4, [r8], #8
 8013b44:	2301      	movs	r3, #1
 8013b46:	e6d8      	b.n	80138fa <_vfiprintf_r+0x3e2>
 8013b48:	46a8      	mov	r8, r5
 8013b4a:	f01a 0510 	ands.w	r5, sl, #16
 8013b4e:	f858 4b04 	ldr.w	r4, [r8], #4
 8013b52:	d001      	beq.n	8013b58 <_vfiprintf_r+0x640>
 8013b54:	461d      	mov	r5, r3
 8013b56:	e7f5      	b.n	8013b44 <_vfiprintf_r+0x62c>
 8013b58:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8013b5c:	d001      	beq.n	8013b62 <_vfiprintf_r+0x64a>
 8013b5e:	b2a4      	uxth	r4, r4
 8013b60:	e7f0      	b.n	8013b44 <_vfiprintf_r+0x62c>
 8013b62:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013b66:	d0ed      	beq.n	8013b44 <_vfiprintf_r+0x62c>
 8013b68:	b2e4      	uxtb	r4, r4
 8013b6a:	e7f3      	b.n	8013b54 <_vfiprintf_r+0x63c>
 8013b6c:	4a43      	ldr	r2, [pc, #268]	@ (8013c7c <_vfiprintf_r+0x764>)
 8013b6e:	e5c9      	b.n	8013704 <_vfiprintf_r+0x1ec>
 8013b70:	46a8      	mov	r8, r5
 8013b72:	f01a 0510 	ands.w	r5, sl, #16
 8013b76:	f858 4b04 	ldr.w	r4, [r8], #4
 8013b7a:	d001      	beq.n	8013b80 <_vfiprintf_r+0x668>
 8013b7c:	4615      	mov	r5, r2
 8013b7e:	e5cd      	b.n	801371c <_vfiprintf_r+0x204>
 8013b80:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8013b84:	d001      	beq.n	8013b8a <_vfiprintf_r+0x672>
 8013b86:	b2a4      	uxth	r4, r4
 8013b88:	e5c8      	b.n	801371c <_vfiprintf_r+0x204>
 8013b8a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013b8e:	f43f adc5 	beq.w	801371c <_vfiprintf_r+0x204>
 8013b92:	b2e4      	uxtb	r4, r4
 8013b94:	e7f2      	b.n	8013b7c <_vfiprintf_r+0x664>
 8013b96:	2c0a      	cmp	r4, #10
 8013b98:	f175 0300 	sbcs.w	r3, r5, #0
 8013b9c:	d206      	bcs.n	8013bac <_vfiprintf_r+0x694>
 8013b9e:	3430      	adds	r4, #48	@ 0x30
 8013ba0:	b2e4      	uxtb	r4, r4
 8013ba2:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8013ba6:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8013baa:	e131      	b.n	8013e10 <_vfiprintf_r+0x8f8>
 8013bac:	ab3a      	add	r3, sp, #232	@ 0xe8
 8013bae:	9308      	str	r3, [sp, #32]
 8013bb0:	9b04      	ldr	r3, [sp, #16]
 8013bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013bb6:	f04f 0a00 	mov.w	sl, #0
 8013bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bbc:	220a      	movs	r2, #10
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	4620      	mov	r0, r4
 8013bc2:	4629      	mov	r1, r5
 8013bc4:	f7ed f898 	bl	8000cf8 <__aeabi_uldivmod>
 8013bc8:	460b      	mov	r3, r1
 8013bca:	9908      	ldr	r1, [sp, #32]
 8013bcc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013bce:	3230      	adds	r2, #48	@ 0x30
 8013bd0:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013bd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013bd6:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8013bda:	f10a 0a01 	add.w	sl, sl, #1
 8013bde:	b1e2      	cbz	r2, 8013c1a <_vfiprintf_r+0x702>
 8013be0:	9a06      	ldr	r2, [sp, #24]
 8013be2:	7812      	ldrb	r2, [r2, #0]
 8013be4:	4552      	cmp	r2, sl
 8013be6:	d118      	bne.n	8013c1a <_vfiprintf_r+0x702>
 8013be8:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8013bec:	d015      	beq.n	8013c1a <_vfiprintf_r+0x702>
 8013bee:	2c0a      	cmp	r4, #10
 8013bf0:	f175 0200 	sbcs.w	r2, r5, #0
 8013bf4:	d311      	bcc.n	8013c1a <_vfiprintf_r+0x702>
 8013bf6:	9308      	str	r3, [sp, #32]
 8013bf8:	9b07      	ldr	r3, [sp, #28]
 8013bfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013bfc:	eba9 0903 	sub.w	r9, r9, r3
 8013c00:	461a      	mov	r2, r3
 8013c02:	4648      	mov	r0, r9
 8013c04:	f7fd ff99 	bl	8011b3a <strncpy>
 8013c08:	9b06      	ldr	r3, [sp, #24]
 8013c0a:	785a      	ldrb	r2, [r3, #1]
 8013c0c:	9b08      	ldr	r3, [sp, #32]
 8013c0e:	b172      	cbz	r2, 8013c2e <_vfiprintf_r+0x716>
 8013c10:	9a06      	ldr	r2, [sp, #24]
 8013c12:	3201      	adds	r2, #1
 8013c14:	9206      	str	r2, [sp, #24]
 8013c16:	f04f 0a00 	mov.w	sl, #0
 8013c1a:	2c0a      	cmp	r4, #10
 8013c1c:	f175 0500 	sbcs.w	r5, r5, #0
 8013c20:	f0c0 80f6 	bcc.w	8013e10 <_vfiprintf_r+0x8f8>
 8013c24:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013c26:	f8cd 9020 	str.w	r9, [sp, #32]
 8013c2a:	461d      	mov	r5, r3
 8013c2c:	e7c6      	b.n	8013bbc <_vfiprintf_r+0x6a4>
 8013c2e:	4692      	mov	sl, r2
 8013c30:	e7f3      	b.n	8013c1a <_vfiprintf_r+0x702>
 8013c32:	f004 030f 	and.w	r3, r4, #15
 8013c36:	9a05      	ldr	r2, [sp, #20]
 8013c38:	0924      	lsrs	r4, r4, #4
 8013c3a:	5cd3      	ldrb	r3, [r2, r3]
 8013c3c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013c40:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8013c44:	092d      	lsrs	r5, r5, #4
 8013c46:	ea54 0305 	orrs.w	r3, r4, r5
 8013c4a:	d1f2      	bne.n	8013c32 <_vfiprintf_r+0x71a>
 8013c4c:	e0e0      	b.n	8013e10 <_vfiprintf_r+0x8f8>
 8013c4e:	b923      	cbnz	r3, 8013c5a <_vfiprintf_r+0x742>
 8013c50:	f01a 0f01 	tst.w	sl, #1
 8013c54:	d001      	beq.n	8013c5a <_vfiprintf_r+0x742>
 8013c56:	2430      	movs	r4, #48	@ 0x30
 8013c58:	e7a3      	b.n	8013ba2 <_vfiprintf_r+0x68a>
 8013c5a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8013c5e:	e0d7      	b.n	8013e10 <_vfiprintf_r+0x8f8>
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f000 80a3 	beq.w	8013dac <_vfiprintf_r+0x894>
 8013c66:	2400      	movs	r4, #0
 8013c68:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8013c6c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8013c70:	46a8      	mov	r8, r5
 8013c72:	e5e0      	b.n	8013836 <_vfiprintf_r+0x31e>
 8013c74:	0801492e 	.word	0x0801492e
 8013c78:	0801491e 	.word	0x0801491e
 8013c7c:	080146da 	.word	0x080146da
 8013c80:	2110      	movs	r1, #16
 8013c82:	6071      	str	r1, [r6, #4]
 8013c84:	2a07      	cmp	r2, #7
 8013c86:	4461      	add	r1, ip
 8013c88:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013c8c:	dd08      	ble.n	8013ca0 <_vfiprintf_r+0x788>
 8013c8e:	9800      	ldr	r0, [sp, #0]
 8013c90:	aa0e      	add	r2, sp, #56	@ 0x38
 8013c92:	4639      	mov	r1, r7
 8013c94:	f7ff fc0e 	bl	80134b4 <__sprint_r>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d166      	bne.n	8013d6a <_vfiprintf_r+0x852>
 8013c9c:	4b60      	ldr	r3, [pc, #384]	@ (8013e20 <_vfiprintf_r+0x908>)
 8013c9e:	a811      	add	r0, sp, #68	@ 0x44
 8013ca0:	3d10      	subs	r5, #16
 8013ca2:	4606      	mov	r6, r0
 8013ca4:	e694      	b.n	80139d0 <_vfiprintf_r+0x4b8>
 8013ca6:	4606      	mov	r6, r0
 8013ca8:	e6ac      	b.n	8013a04 <_vfiprintf_r+0x4ec>
 8013caa:	9800      	ldr	r0, [sp, #0]
 8013cac:	aa0e      	add	r2, sp, #56	@ 0x38
 8013cae:	4639      	mov	r1, r7
 8013cb0:	f7ff fc00 	bl	80134b4 <__sprint_r>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	d158      	bne.n	8013d6a <_vfiprintf_r+0x852>
 8013cb8:	ae11      	add	r6, sp, #68	@ 0x44
 8013cba:	e6b5      	b.n	8013a28 <_vfiprintf_r+0x510>
 8013cbc:	9800      	ldr	r0, [sp, #0]
 8013cbe:	aa0e      	add	r2, sp, #56	@ 0x38
 8013cc0:	4639      	mov	r1, r7
 8013cc2:	f7ff fbf7 	bl	80134b4 <__sprint_r>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d14f      	bne.n	8013d6a <_vfiprintf_r+0x852>
 8013cca:	ae11      	add	r6, sp, #68	@ 0x44
 8013ccc:	e6bc      	b.n	8013a48 <_vfiprintf_r+0x530>
 8013cce:	2110      	movs	r1, #16
 8013cd0:	6071      	str	r1, [r6, #4]
 8013cd2:	2a07      	cmp	r2, #7
 8013cd4:	4461      	add	r1, ip
 8013cd6:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013cda:	dd08      	ble.n	8013cee <_vfiprintf_r+0x7d6>
 8013cdc:	9800      	ldr	r0, [sp, #0]
 8013cde:	aa0e      	add	r2, sp, #56	@ 0x38
 8013ce0:	4639      	mov	r1, r7
 8013ce2:	f7ff fbe7 	bl	80134b4 <__sprint_r>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d13f      	bne.n	8013d6a <_vfiprintf_r+0x852>
 8013cea:	4b4e      	ldr	r3, [pc, #312]	@ (8013e24 <_vfiprintf_r+0x90c>)
 8013cec:	a811      	add	r0, sp, #68	@ 0x44
 8013cee:	3d10      	subs	r5, #16
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	e6b2      	b.n	8013a5a <_vfiprintf_r+0x542>
 8013cf4:	4606      	mov	r6, r0
 8013cf6:	e6ca      	b.n	8013a8e <_vfiprintf_r+0x576>
 8013cf8:	2010      	movs	r0, #16
 8013cfa:	4402      	add	r2, r0
 8013cfc:	2b07      	cmp	r3, #7
 8013cfe:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013d02:	6070      	str	r0, [r6, #4]
 8013d04:	dd06      	ble.n	8013d14 <_vfiprintf_r+0x7fc>
 8013d06:	9800      	ldr	r0, [sp, #0]
 8013d08:	aa0e      	add	r2, sp, #56	@ 0x38
 8013d0a:	4639      	mov	r1, r7
 8013d0c:	f7ff fbd2 	bl	80134b4 <__sprint_r>
 8013d10:	bb58      	cbnz	r0, 8013d6a <_vfiprintf_r+0x852>
 8013d12:	a911      	add	r1, sp, #68	@ 0x44
 8013d14:	3c10      	subs	r4, #16
 8013d16:	460e      	mov	r6, r1
 8013d18:	e6bd      	b.n	8013a96 <_vfiprintf_r+0x57e>
 8013d1a:	460e      	mov	r6, r1
 8013d1c:	e6d6      	b.n	8013acc <_vfiprintf_r+0x5b4>
 8013d1e:	9800      	ldr	r0, [sp, #0]
 8013d20:	aa0e      	add	r2, sp, #56	@ 0x38
 8013d22:	4639      	mov	r1, r7
 8013d24:	f7ff fbc6 	bl	80134b4 <__sprint_r>
 8013d28:	b9f8      	cbnz	r0, 8013d6a <_vfiprintf_r+0x852>
 8013d2a:	ab11      	add	r3, sp, #68	@ 0x44
 8013d2c:	e6de      	b.n	8013aec <_vfiprintf_r+0x5d4>
 8013d2e:	9a02      	ldr	r2, [sp, #8]
 8013d30:	9904      	ldr	r1, [sp, #16]
 8013d32:	1a54      	subs	r4, r2, r1
 8013d34:	2c00      	cmp	r4, #0
 8013d36:	f77f aedd 	ble.w	8013af4 <_vfiprintf_r+0x5dc>
 8013d3a:	4d39      	ldr	r5, [pc, #228]	@ (8013e20 <_vfiprintf_r+0x908>)
 8013d3c:	2610      	movs	r6, #16
 8013d3e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8013d42:	2c10      	cmp	r4, #16
 8013d44:	f102 0201 	add.w	r2, r2, #1
 8013d48:	601d      	str	r5, [r3, #0]
 8013d4a:	dc1d      	bgt.n	8013d88 <_vfiprintf_r+0x870>
 8013d4c:	605c      	str	r4, [r3, #4]
 8013d4e:	2a07      	cmp	r2, #7
 8013d50:	440c      	add	r4, r1
 8013d52:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8013d56:	f77f aecd 	ble.w	8013af4 <_vfiprintf_r+0x5dc>
 8013d5a:	9800      	ldr	r0, [sp, #0]
 8013d5c:	aa0e      	add	r2, sp, #56	@ 0x38
 8013d5e:	4639      	mov	r1, r7
 8013d60:	f7ff fba8 	bl	80134b4 <__sprint_r>
 8013d64:	2800      	cmp	r0, #0
 8013d66:	f43f aec5 	beq.w	8013af4 <_vfiprintf_r+0x5dc>
 8013d6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d6c:	07d9      	lsls	r1, r3, #31
 8013d6e:	d405      	bmi.n	8013d7c <_vfiprintf_r+0x864>
 8013d70:	89bb      	ldrh	r3, [r7, #12]
 8013d72:	059a      	lsls	r2, r3, #22
 8013d74:	d402      	bmi.n	8013d7c <_vfiprintf_r+0x864>
 8013d76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013d78:	f7fc fabb 	bl	80102f2 <__retarget_lock_release_recursive>
 8013d7c:	89bb      	ldrh	r3, [r7, #12]
 8013d7e:	065b      	lsls	r3, r3, #25
 8013d80:	f57f abfb 	bpl.w	801357a <_vfiprintf_r+0x62>
 8013d84:	f7ff bbf6 	b.w	8013574 <_vfiprintf_r+0x5c>
 8013d88:	3110      	adds	r1, #16
 8013d8a:	2a07      	cmp	r2, #7
 8013d8c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013d90:	605e      	str	r6, [r3, #4]
 8013d92:	dc02      	bgt.n	8013d9a <_vfiprintf_r+0x882>
 8013d94:	3308      	adds	r3, #8
 8013d96:	3c10      	subs	r4, #16
 8013d98:	e7d1      	b.n	8013d3e <_vfiprintf_r+0x826>
 8013d9a:	9800      	ldr	r0, [sp, #0]
 8013d9c:	aa0e      	add	r2, sp, #56	@ 0x38
 8013d9e:	4639      	mov	r1, r7
 8013da0:	f7ff fb88 	bl	80134b4 <__sprint_r>
 8013da4:	2800      	cmp	r0, #0
 8013da6:	d1e0      	bne.n	8013d6a <_vfiprintf_r+0x852>
 8013da8:	ab11      	add	r3, sp, #68	@ 0x44
 8013daa:	e7f4      	b.n	8013d96 <_vfiprintf_r+0x87e>
 8013dac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013dae:	b913      	cbnz	r3, 8013db6 <_vfiprintf_r+0x89e>
 8013db0:	2300      	movs	r3, #0
 8013db2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013db4:	e7d9      	b.n	8013d6a <_vfiprintf_r+0x852>
 8013db6:	9800      	ldr	r0, [sp, #0]
 8013db8:	aa0e      	add	r2, sp, #56	@ 0x38
 8013dba:	4639      	mov	r1, r7
 8013dbc:	f7ff fb7a 	bl	80134b4 <__sprint_r>
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	d0f5      	beq.n	8013db0 <_vfiprintf_r+0x898>
 8013dc4:	e7d1      	b.n	8013d6a <_vfiprintf_r+0x852>
 8013dc6:	ea54 0205 	orrs.w	r2, r4, r5
 8013dca:	f8cd a010 	str.w	sl, [sp, #16]
 8013dce:	f43f ada6 	beq.w	801391e <_vfiprintf_r+0x406>
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	f43f aedf 	beq.w	8013b96 <_vfiprintf_r+0x67e>
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8013dde:	f43f af28 	beq.w	8013c32 <_vfiprintf_r+0x71a>
 8013de2:	f004 0307 	and.w	r3, r4, #7
 8013de6:	08e4      	lsrs	r4, r4, #3
 8013de8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8013dec:	08ed      	lsrs	r5, r5, #3
 8013dee:	3330      	adds	r3, #48	@ 0x30
 8013df0:	ea54 0105 	orrs.w	r1, r4, r5
 8013df4:	464a      	mov	r2, r9
 8013df6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013dfa:	d1f2      	bne.n	8013de2 <_vfiprintf_r+0x8ca>
 8013dfc:	9904      	ldr	r1, [sp, #16]
 8013dfe:	07c8      	lsls	r0, r1, #31
 8013e00:	d506      	bpl.n	8013e10 <_vfiprintf_r+0x8f8>
 8013e02:	2b30      	cmp	r3, #48	@ 0x30
 8013e04:	d004      	beq.n	8013e10 <_vfiprintf_r+0x8f8>
 8013e06:	2330      	movs	r3, #48	@ 0x30
 8013e08:	f809 3c01 	strb.w	r3, [r9, #-1]
 8013e0c:	f1a2 0902 	sub.w	r9, r2, #2
 8013e10:	ab3a      	add	r3, sp, #232	@ 0xe8
 8013e12:	eba3 0309 	sub.w	r3, r3, r9
 8013e16:	9c01      	ldr	r4, [sp, #4]
 8013e18:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013e1c:	9301      	str	r3, [sp, #4]
 8013e1e:	e5bb      	b.n	8013998 <_vfiprintf_r+0x480>
 8013e20:	0801492e 	.word	0x0801492e
 8013e24:	0801491e 	.word	0x0801491e

08013e28 <__sbprintf>:
 8013e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e2a:	461f      	mov	r7, r3
 8013e2c:	898b      	ldrh	r3, [r1, #12]
 8013e2e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8013e32:	f023 0302 	bic.w	r3, r3, #2
 8013e36:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013e3a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8013e3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8013e3e:	89cb      	ldrh	r3, [r1, #14]
 8013e40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013e44:	69cb      	ldr	r3, [r1, #28]
 8013e46:	9307      	str	r3, [sp, #28]
 8013e48:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8013e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e4c:	ab1a      	add	r3, sp, #104	@ 0x68
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	9304      	str	r3, [sp, #16]
 8013e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013e56:	4615      	mov	r5, r2
 8013e58:	4606      	mov	r6, r0
 8013e5a:	9302      	str	r3, [sp, #8]
 8013e5c:	9305      	str	r3, [sp, #20]
 8013e5e:	a816      	add	r0, sp, #88	@ 0x58
 8013e60:	2300      	movs	r3, #0
 8013e62:	460c      	mov	r4, r1
 8013e64:	9306      	str	r3, [sp, #24]
 8013e66:	f7fc fa41 	bl	80102ec <__retarget_lock_init_recursive>
 8013e6a:	462a      	mov	r2, r5
 8013e6c:	463b      	mov	r3, r7
 8013e6e:	4669      	mov	r1, sp
 8013e70:	4630      	mov	r0, r6
 8013e72:	f7ff fb51 	bl	8013518 <_vfiprintf_r>
 8013e76:	1e05      	subs	r5, r0, #0
 8013e78:	db07      	blt.n	8013e8a <__sbprintf+0x62>
 8013e7a:	4669      	mov	r1, sp
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f7fd fe37 	bl	8011af0 <_fflush_r>
 8013e82:	2800      	cmp	r0, #0
 8013e84:	bf18      	it	ne
 8013e86:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8013e8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013e8e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8013e90:	065b      	lsls	r3, r3, #25
 8013e92:	bf42      	ittt	mi
 8013e94:	89a3      	ldrhmi	r3, [r4, #12]
 8013e96:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8013e9a:	81a3      	strhmi	r3, [r4, #12]
 8013e9c:	f7fc fa27 	bl	80102ee <__retarget_lock_close_recursive>
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8013ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ea8 <__sfvwrite_r>:
 8013ea8:	6893      	ldr	r3, [r2, #8]
 8013eaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eae:	4606      	mov	r6, r0
 8013eb0:	460c      	mov	r4, r1
 8013eb2:	4691      	mov	r9, r2
 8013eb4:	b91b      	cbnz	r3, 8013ebe <__sfvwrite_r+0x16>
 8013eb6:	2000      	movs	r0, #0
 8013eb8:	b003      	add	sp, #12
 8013eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ebe:	898b      	ldrh	r3, [r1, #12]
 8013ec0:	0718      	lsls	r0, r3, #28
 8013ec2:	d550      	bpl.n	8013f66 <__sfvwrite_r+0xbe>
 8013ec4:	690b      	ldr	r3, [r1, #16]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d04d      	beq.n	8013f66 <__sfvwrite_r+0xbe>
 8013eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ece:	f8d9 8000 	ldr.w	r8, [r9]
 8013ed2:	f013 0702 	ands.w	r7, r3, #2
 8013ed6:	d16b      	bne.n	8013fb0 <__sfvwrite_r+0x108>
 8013ed8:	f013 0301 	ands.w	r3, r3, #1
 8013edc:	f000 809c 	beq.w	8014018 <__sfvwrite_r+0x170>
 8013ee0:	4638      	mov	r0, r7
 8013ee2:	46ba      	mov	sl, r7
 8013ee4:	46bb      	mov	fp, r7
 8013ee6:	f1bb 0f00 	cmp.w	fp, #0
 8013eea:	f000 8103 	beq.w	80140f4 <__sfvwrite_r+0x24c>
 8013eee:	b950      	cbnz	r0, 8013f06 <__sfvwrite_r+0x5e>
 8013ef0:	465a      	mov	r2, fp
 8013ef2:	210a      	movs	r1, #10
 8013ef4:	4650      	mov	r0, sl
 8013ef6:	f7ec f97b 	bl	80001f0 <memchr>
 8013efa:	2800      	cmp	r0, #0
 8013efc:	f000 8100 	beq.w	8014100 <__sfvwrite_r+0x258>
 8013f00:	3001      	adds	r0, #1
 8013f02:	eba0 070a 	sub.w	r7, r0, sl
 8013f06:	6820      	ldr	r0, [r4, #0]
 8013f08:	6921      	ldr	r1, [r4, #16]
 8013f0a:	68a5      	ldr	r5, [r4, #8]
 8013f0c:	6963      	ldr	r3, [r4, #20]
 8013f0e:	455f      	cmp	r7, fp
 8013f10:	463a      	mov	r2, r7
 8013f12:	bf28      	it	cs
 8013f14:	465a      	movcs	r2, fp
 8013f16:	4288      	cmp	r0, r1
 8013f18:	f240 80f5 	bls.w	8014106 <__sfvwrite_r+0x25e>
 8013f1c:	441d      	add	r5, r3
 8013f1e:	42aa      	cmp	r2, r5
 8013f20:	f340 80f1 	ble.w	8014106 <__sfvwrite_r+0x25e>
 8013f24:	4651      	mov	r1, sl
 8013f26:	462a      	mov	r2, r5
 8013f28:	f7fc f8c7 	bl	80100ba <memmove>
 8013f2c:	6823      	ldr	r3, [r4, #0]
 8013f2e:	442b      	add	r3, r5
 8013f30:	6023      	str	r3, [r4, #0]
 8013f32:	4621      	mov	r1, r4
 8013f34:	4630      	mov	r0, r6
 8013f36:	f7fd fddb 	bl	8011af0 <_fflush_r>
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d167      	bne.n	801400e <__sfvwrite_r+0x166>
 8013f3e:	1b7f      	subs	r7, r7, r5
 8013f40:	f040 80f9 	bne.w	8014136 <__sfvwrite_r+0x28e>
 8013f44:	4621      	mov	r1, r4
 8013f46:	4630      	mov	r0, r6
 8013f48:	f7fd fdd2 	bl	8011af0 <_fflush_r>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d15e      	bne.n	801400e <__sfvwrite_r+0x166>
 8013f50:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013f54:	1b5b      	subs	r3, r3, r5
 8013f56:	44aa      	add	sl, r5
 8013f58:	ebab 0b05 	sub.w	fp, fp, r5
 8013f5c:	f8c9 3008 	str.w	r3, [r9, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d1c0      	bne.n	8013ee6 <__sfvwrite_r+0x3e>
 8013f64:	e7a7      	b.n	8013eb6 <__sfvwrite_r+0xe>
 8013f66:	4621      	mov	r1, r4
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f000 f8e9 	bl	8014140 <__swsetup_r>
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d0ab      	beq.n	8013eca <__sfvwrite_r+0x22>
 8013f72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f76:	e79f      	b.n	8013eb8 <__sfvwrite_r+0x10>
 8013f78:	e9d8 a500 	ldrd	sl, r5, [r8]
 8013f7c:	f108 0808 	add.w	r8, r8, #8
 8013f80:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8013f84:	69e1      	ldr	r1, [r4, #28]
 8013f86:	2d00      	cmp	r5, #0
 8013f88:	d0f6      	beq.n	8013f78 <__sfvwrite_r+0xd0>
 8013f8a:	42bd      	cmp	r5, r7
 8013f8c:	462b      	mov	r3, r5
 8013f8e:	4652      	mov	r2, sl
 8013f90:	bf28      	it	cs
 8013f92:	463b      	movcs	r3, r7
 8013f94:	4630      	mov	r0, r6
 8013f96:	47d8      	blx	fp
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	dd38      	ble.n	801400e <__sfvwrite_r+0x166>
 8013f9c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013fa0:	1a1b      	subs	r3, r3, r0
 8013fa2:	4482      	add	sl, r0
 8013fa4:	1a2d      	subs	r5, r5, r0
 8013fa6:	f8c9 3008 	str.w	r3, [r9, #8]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d1e8      	bne.n	8013f80 <__sfvwrite_r+0xd8>
 8013fae:	e782      	b.n	8013eb6 <__sfvwrite_r+0xe>
 8013fb0:	f04f 0a00 	mov.w	sl, #0
 8013fb4:	4f61      	ldr	r7, [pc, #388]	@ (801413c <__sfvwrite_r+0x294>)
 8013fb6:	4655      	mov	r5, sl
 8013fb8:	e7e2      	b.n	8013f80 <__sfvwrite_r+0xd8>
 8013fba:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8013fbe:	f108 0808 	add.w	r8, r8, #8
 8013fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fc6:	6820      	ldr	r0, [r4, #0]
 8013fc8:	68a2      	ldr	r2, [r4, #8]
 8013fca:	f1ba 0f00 	cmp.w	sl, #0
 8013fce:	d0f4      	beq.n	8013fba <__sfvwrite_r+0x112>
 8013fd0:	0599      	lsls	r1, r3, #22
 8013fd2:	d563      	bpl.n	801409c <__sfvwrite_r+0x1f4>
 8013fd4:	4552      	cmp	r2, sl
 8013fd6:	d836      	bhi.n	8014046 <__sfvwrite_r+0x19e>
 8013fd8:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8013fdc:	d033      	beq.n	8014046 <__sfvwrite_r+0x19e>
 8013fde:	6921      	ldr	r1, [r4, #16]
 8013fe0:	6965      	ldr	r5, [r4, #20]
 8013fe2:	eba0 0b01 	sub.w	fp, r0, r1
 8013fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013fee:	f10b 0201 	add.w	r2, fp, #1
 8013ff2:	106d      	asrs	r5, r5, #1
 8013ff4:	4452      	add	r2, sl
 8013ff6:	4295      	cmp	r5, r2
 8013ff8:	bf38      	it	cc
 8013ffa:	4615      	movcc	r5, r2
 8013ffc:	055b      	lsls	r3, r3, #21
 8013ffe:	d53d      	bpl.n	801407c <__sfvwrite_r+0x1d4>
 8014000:	4629      	mov	r1, r5
 8014002:	4630      	mov	r0, r6
 8014004:	f7fb fc1a 	bl	800f83c <_malloc_r>
 8014008:	b948      	cbnz	r0, 801401e <__sfvwrite_r+0x176>
 801400a:	230c      	movs	r3, #12
 801400c:	6033      	str	r3, [r6, #0]
 801400e:	89a3      	ldrh	r3, [r4, #12]
 8014010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014014:	81a3      	strh	r3, [r4, #12]
 8014016:	e7ac      	b.n	8013f72 <__sfvwrite_r+0xca>
 8014018:	461f      	mov	r7, r3
 801401a:	469a      	mov	sl, r3
 801401c:	e7d1      	b.n	8013fc2 <__sfvwrite_r+0x11a>
 801401e:	465a      	mov	r2, fp
 8014020:	6921      	ldr	r1, [r4, #16]
 8014022:	9001      	str	r0, [sp, #4]
 8014024:	f7fc f972 	bl	801030c <memcpy>
 8014028:	89a2      	ldrh	r2, [r4, #12]
 801402a:	9b01      	ldr	r3, [sp, #4]
 801402c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8014030:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8014034:	81a2      	strh	r2, [r4, #12]
 8014036:	6123      	str	r3, [r4, #16]
 8014038:	6165      	str	r5, [r4, #20]
 801403a:	445b      	add	r3, fp
 801403c:	eba5 050b 	sub.w	r5, r5, fp
 8014040:	6023      	str	r3, [r4, #0]
 8014042:	4652      	mov	r2, sl
 8014044:	60a5      	str	r5, [r4, #8]
 8014046:	4552      	cmp	r2, sl
 8014048:	bf28      	it	cs
 801404a:	4652      	movcs	r2, sl
 801404c:	6820      	ldr	r0, [r4, #0]
 801404e:	9201      	str	r2, [sp, #4]
 8014050:	4639      	mov	r1, r7
 8014052:	f7fc f832 	bl	80100ba <memmove>
 8014056:	68a3      	ldr	r3, [r4, #8]
 8014058:	9a01      	ldr	r2, [sp, #4]
 801405a:	1a9b      	subs	r3, r3, r2
 801405c:	60a3      	str	r3, [r4, #8]
 801405e:	6823      	ldr	r3, [r4, #0]
 8014060:	4413      	add	r3, r2
 8014062:	4655      	mov	r5, sl
 8014064:	6023      	str	r3, [r4, #0]
 8014066:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801406a:	1b5b      	subs	r3, r3, r5
 801406c:	442f      	add	r7, r5
 801406e:	ebaa 0a05 	sub.w	sl, sl, r5
 8014072:	f8c9 3008 	str.w	r3, [r9, #8]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d1a3      	bne.n	8013fc2 <__sfvwrite_r+0x11a>
 801407a:	e71c      	b.n	8013eb6 <__sfvwrite_r+0xe>
 801407c:	462a      	mov	r2, r5
 801407e:	4630      	mov	r0, r6
 8014080:	f7ff f850 	bl	8013124 <_realloc_r>
 8014084:	4603      	mov	r3, r0
 8014086:	2800      	cmp	r0, #0
 8014088:	d1d5      	bne.n	8014036 <__sfvwrite_r+0x18e>
 801408a:	6921      	ldr	r1, [r4, #16]
 801408c:	4630      	mov	r0, r6
 801408e:	f7fc f9b1 	bl	80103f4 <_free_r>
 8014092:	89a3      	ldrh	r3, [r4, #12]
 8014094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014098:	81a3      	strh	r3, [r4, #12]
 801409a:	e7b6      	b.n	801400a <__sfvwrite_r+0x162>
 801409c:	6923      	ldr	r3, [r4, #16]
 801409e:	4283      	cmp	r3, r0
 80140a0:	d302      	bcc.n	80140a8 <__sfvwrite_r+0x200>
 80140a2:	6961      	ldr	r1, [r4, #20]
 80140a4:	4551      	cmp	r1, sl
 80140a6:	d915      	bls.n	80140d4 <__sfvwrite_r+0x22c>
 80140a8:	4552      	cmp	r2, sl
 80140aa:	bf28      	it	cs
 80140ac:	4652      	movcs	r2, sl
 80140ae:	4639      	mov	r1, r7
 80140b0:	4615      	mov	r5, r2
 80140b2:	f7fc f802 	bl	80100ba <memmove>
 80140b6:	68a3      	ldr	r3, [r4, #8]
 80140b8:	6822      	ldr	r2, [r4, #0]
 80140ba:	1b5b      	subs	r3, r3, r5
 80140bc:	442a      	add	r2, r5
 80140be:	60a3      	str	r3, [r4, #8]
 80140c0:	6022      	str	r2, [r4, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1cf      	bne.n	8014066 <__sfvwrite_r+0x1be>
 80140c6:	4621      	mov	r1, r4
 80140c8:	4630      	mov	r0, r6
 80140ca:	f7fd fd11 	bl	8011af0 <_fflush_r>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	d0c9      	beq.n	8014066 <__sfvwrite_r+0x1be>
 80140d2:	e79c      	b.n	801400e <__sfvwrite_r+0x166>
 80140d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80140d8:	4553      	cmp	r3, sl
 80140da:	bf28      	it	cs
 80140dc:	4653      	movcs	r3, sl
 80140de:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80140e0:	fb93 f3f1 	sdiv	r3, r3, r1
 80140e4:	463a      	mov	r2, r7
 80140e6:	434b      	muls	r3, r1
 80140e8:	4630      	mov	r0, r6
 80140ea:	69e1      	ldr	r1, [r4, #28]
 80140ec:	47a8      	blx	r5
 80140ee:	1e05      	subs	r5, r0, #0
 80140f0:	dcb9      	bgt.n	8014066 <__sfvwrite_r+0x1be>
 80140f2:	e78c      	b.n	801400e <__sfvwrite_r+0x166>
 80140f4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80140f8:	2000      	movs	r0, #0
 80140fa:	f108 0808 	add.w	r8, r8, #8
 80140fe:	e6f2      	b.n	8013ee6 <__sfvwrite_r+0x3e>
 8014100:	f10b 0701 	add.w	r7, fp, #1
 8014104:	e6ff      	b.n	8013f06 <__sfvwrite_r+0x5e>
 8014106:	4293      	cmp	r3, r2
 8014108:	dc08      	bgt.n	801411c <__sfvwrite_r+0x274>
 801410a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801410c:	69e1      	ldr	r1, [r4, #28]
 801410e:	4652      	mov	r2, sl
 8014110:	4630      	mov	r0, r6
 8014112:	47a8      	blx	r5
 8014114:	1e05      	subs	r5, r0, #0
 8014116:	f73f af12 	bgt.w	8013f3e <__sfvwrite_r+0x96>
 801411a:	e778      	b.n	801400e <__sfvwrite_r+0x166>
 801411c:	4651      	mov	r1, sl
 801411e:	9201      	str	r2, [sp, #4]
 8014120:	f7fb ffcb 	bl	80100ba <memmove>
 8014124:	9a01      	ldr	r2, [sp, #4]
 8014126:	68a3      	ldr	r3, [r4, #8]
 8014128:	1a9b      	subs	r3, r3, r2
 801412a:	60a3      	str	r3, [r4, #8]
 801412c:	6823      	ldr	r3, [r4, #0]
 801412e:	4413      	add	r3, r2
 8014130:	6023      	str	r3, [r4, #0]
 8014132:	4615      	mov	r5, r2
 8014134:	e703      	b.n	8013f3e <__sfvwrite_r+0x96>
 8014136:	2001      	movs	r0, #1
 8014138:	e70a      	b.n	8013f50 <__sfvwrite_r+0xa8>
 801413a:	bf00      	nop
 801413c:	7ffffc00 	.word	0x7ffffc00

08014140 <__swsetup_r>:
 8014140:	b538      	push	{r3, r4, r5, lr}
 8014142:	4b29      	ldr	r3, [pc, #164]	@ (80141e8 <__swsetup_r+0xa8>)
 8014144:	4605      	mov	r5, r0
 8014146:	6818      	ldr	r0, [r3, #0]
 8014148:	460c      	mov	r4, r1
 801414a:	b118      	cbz	r0, 8014154 <__swsetup_r+0x14>
 801414c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801414e:	b90b      	cbnz	r3, 8014154 <__swsetup_r+0x14>
 8014150:	f7fb fee6 	bl	800ff20 <__sinit>
 8014154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014158:	0719      	lsls	r1, r3, #28
 801415a:	d422      	bmi.n	80141a2 <__swsetup_r+0x62>
 801415c:	06da      	lsls	r2, r3, #27
 801415e:	d407      	bmi.n	8014170 <__swsetup_r+0x30>
 8014160:	2209      	movs	r2, #9
 8014162:	602a      	str	r2, [r5, #0]
 8014164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014168:	81a3      	strh	r3, [r4, #12]
 801416a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801416e:	e033      	b.n	80141d8 <__swsetup_r+0x98>
 8014170:	0758      	lsls	r0, r3, #29
 8014172:	d512      	bpl.n	801419a <__swsetup_r+0x5a>
 8014174:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014176:	b141      	cbz	r1, 801418a <__swsetup_r+0x4a>
 8014178:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801417c:	4299      	cmp	r1, r3
 801417e:	d002      	beq.n	8014186 <__swsetup_r+0x46>
 8014180:	4628      	mov	r0, r5
 8014182:	f7fc f937 	bl	80103f4 <_free_r>
 8014186:	2300      	movs	r3, #0
 8014188:	6323      	str	r3, [r4, #48]	@ 0x30
 801418a:	89a3      	ldrh	r3, [r4, #12]
 801418c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014190:	81a3      	strh	r3, [r4, #12]
 8014192:	2300      	movs	r3, #0
 8014194:	6063      	str	r3, [r4, #4]
 8014196:	6923      	ldr	r3, [r4, #16]
 8014198:	6023      	str	r3, [r4, #0]
 801419a:	89a3      	ldrh	r3, [r4, #12]
 801419c:	f043 0308 	orr.w	r3, r3, #8
 80141a0:	81a3      	strh	r3, [r4, #12]
 80141a2:	6923      	ldr	r3, [r4, #16]
 80141a4:	b94b      	cbnz	r3, 80141ba <__swsetup_r+0x7a>
 80141a6:	89a3      	ldrh	r3, [r4, #12]
 80141a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80141ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80141b0:	d003      	beq.n	80141ba <__swsetup_r+0x7a>
 80141b2:	4621      	mov	r1, r4
 80141b4:	4628      	mov	r0, r5
 80141b6:	f000 f8c1 	bl	801433c <__smakebuf_r>
 80141ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141be:	f013 0201 	ands.w	r2, r3, #1
 80141c2:	d00a      	beq.n	80141da <__swsetup_r+0x9a>
 80141c4:	2200      	movs	r2, #0
 80141c6:	60a2      	str	r2, [r4, #8]
 80141c8:	6962      	ldr	r2, [r4, #20]
 80141ca:	4252      	negs	r2, r2
 80141cc:	61a2      	str	r2, [r4, #24]
 80141ce:	6922      	ldr	r2, [r4, #16]
 80141d0:	b942      	cbnz	r2, 80141e4 <__swsetup_r+0xa4>
 80141d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80141d6:	d1c5      	bne.n	8014164 <__swsetup_r+0x24>
 80141d8:	bd38      	pop	{r3, r4, r5, pc}
 80141da:	0799      	lsls	r1, r3, #30
 80141dc:	bf58      	it	pl
 80141de:	6962      	ldrpl	r2, [r4, #20]
 80141e0:	60a2      	str	r2, [r4, #8]
 80141e2:	e7f4      	b.n	80141ce <__swsetup_r+0x8e>
 80141e4:	2000      	movs	r0, #0
 80141e6:	e7f7      	b.n	80141d8 <__swsetup_r+0x98>
 80141e8:	2000052c 	.word	0x2000052c

080141ec <__fputwc>:
 80141ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80141f0:	4680      	mov	r8, r0
 80141f2:	460f      	mov	r7, r1
 80141f4:	4614      	mov	r4, r2
 80141f6:	f7fe ff29 	bl	801304c <__locale_mb_cur_max>
 80141fa:	2801      	cmp	r0, #1
 80141fc:	4605      	mov	r5, r0
 80141fe:	d11b      	bne.n	8014238 <__fputwc+0x4c>
 8014200:	1e7b      	subs	r3, r7, #1
 8014202:	2bfe      	cmp	r3, #254	@ 0xfe
 8014204:	d818      	bhi.n	8014238 <__fputwc+0x4c>
 8014206:	f88d 7004 	strb.w	r7, [sp, #4]
 801420a:	2600      	movs	r6, #0
 801420c:	f10d 0904 	add.w	r9, sp, #4
 8014210:	42ae      	cmp	r6, r5
 8014212:	d021      	beq.n	8014258 <__fputwc+0x6c>
 8014214:	68a3      	ldr	r3, [r4, #8]
 8014216:	f816 1009 	ldrb.w	r1, [r6, r9]
 801421a:	3b01      	subs	r3, #1
 801421c:	2b00      	cmp	r3, #0
 801421e:	60a3      	str	r3, [r4, #8]
 8014220:	da04      	bge.n	801422c <__fputwc+0x40>
 8014222:	69a2      	ldr	r2, [r4, #24]
 8014224:	4293      	cmp	r3, r2
 8014226:	db1b      	blt.n	8014260 <__fputwc+0x74>
 8014228:	290a      	cmp	r1, #10
 801422a:	d019      	beq.n	8014260 <__fputwc+0x74>
 801422c:	6823      	ldr	r3, [r4, #0]
 801422e:	1c5a      	adds	r2, r3, #1
 8014230:	6022      	str	r2, [r4, #0]
 8014232:	7019      	strb	r1, [r3, #0]
 8014234:	3601      	adds	r6, #1
 8014236:	e7eb      	b.n	8014210 <__fputwc+0x24>
 8014238:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 801423c:	463a      	mov	r2, r7
 801423e:	a901      	add	r1, sp, #4
 8014240:	4640      	mov	r0, r8
 8014242:	f000 f83d 	bl	80142c0 <_wcrtomb_r>
 8014246:	1c43      	adds	r3, r0, #1
 8014248:	4605      	mov	r5, r0
 801424a:	d1de      	bne.n	801420a <__fputwc+0x1e>
 801424c:	89a3      	ldrh	r3, [r4, #12]
 801424e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014252:	81a3      	strh	r3, [r4, #12]
 8014254:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014258:	4638      	mov	r0, r7
 801425a:	b003      	add	sp, #12
 801425c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014260:	4622      	mov	r2, r4
 8014262:	4640      	mov	r0, r8
 8014264:	f000 f8a6 	bl	80143b4 <__swbuf_r>
 8014268:	3001      	adds	r0, #1
 801426a:	d1e3      	bne.n	8014234 <__fputwc+0x48>
 801426c:	e7f2      	b.n	8014254 <__fputwc+0x68>

0801426e <_fputwc_r>:
 801426e:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8014270:	07db      	lsls	r3, r3, #31
 8014272:	b570      	push	{r4, r5, r6, lr}
 8014274:	4605      	mov	r5, r0
 8014276:	460e      	mov	r6, r1
 8014278:	4614      	mov	r4, r2
 801427a:	d405      	bmi.n	8014288 <_fputwc_r+0x1a>
 801427c:	8993      	ldrh	r3, [r2, #12]
 801427e:	0598      	lsls	r0, r3, #22
 8014280:	d402      	bmi.n	8014288 <_fputwc_r+0x1a>
 8014282:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8014284:	f7fc f834 	bl	80102f0 <__retarget_lock_acquire_recursive>
 8014288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801428c:	0499      	lsls	r1, r3, #18
 801428e:	d406      	bmi.n	801429e <_fputwc_r+0x30>
 8014290:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014294:	81a3      	strh	r3, [r4, #12]
 8014296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014298:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801429c:	6663      	str	r3, [r4, #100]	@ 0x64
 801429e:	4622      	mov	r2, r4
 80142a0:	4628      	mov	r0, r5
 80142a2:	4631      	mov	r1, r6
 80142a4:	f7ff ffa2 	bl	80141ec <__fputwc>
 80142a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142aa:	07da      	lsls	r2, r3, #31
 80142ac:	4605      	mov	r5, r0
 80142ae:	d405      	bmi.n	80142bc <_fputwc_r+0x4e>
 80142b0:	89a3      	ldrh	r3, [r4, #12]
 80142b2:	059b      	lsls	r3, r3, #22
 80142b4:	d402      	bmi.n	80142bc <_fputwc_r+0x4e>
 80142b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142b8:	f7fc f81b 	bl	80102f2 <__retarget_lock_release_recursive>
 80142bc:	4628      	mov	r0, r5
 80142be:	bd70      	pop	{r4, r5, r6, pc}

080142c0 <_wcrtomb_r>:
 80142c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142c2:	4c09      	ldr	r4, [pc, #36]	@ (80142e8 <_wcrtomb_r+0x28>)
 80142c4:	b085      	sub	sp, #20
 80142c6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 80142ca:	4605      	mov	r5, r0
 80142cc:	461e      	mov	r6, r3
 80142ce:	b909      	cbnz	r1, 80142d4 <_wcrtomb_r+0x14>
 80142d0:	460a      	mov	r2, r1
 80142d2:	a901      	add	r1, sp, #4
 80142d4:	47b8      	blx	r7
 80142d6:	1c43      	adds	r3, r0, #1
 80142d8:	bf01      	itttt	eq
 80142da:	2300      	moveq	r3, #0
 80142dc:	6033      	streq	r3, [r6, #0]
 80142de:	238a      	moveq	r3, #138	@ 0x8a
 80142e0:	602b      	streq	r3, [r5, #0]
 80142e2:	b005      	add	sp, #20
 80142e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142e6:	bf00      	nop
 80142e8:	20000654 	.word	0x20000654

080142ec <__swhatbuf_r>:
 80142ec:	b570      	push	{r4, r5, r6, lr}
 80142ee:	460c      	mov	r4, r1
 80142f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142f4:	2900      	cmp	r1, #0
 80142f6:	b096      	sub	sp, #88	@ 0x58
 80142f8:	4615      	mov	r5, r2
 80142fa:	461e      	mov	r6, r3
 80142fc:	da07      	bge.n	801430e <__swhatbuf_r+0x22>
 80142fe:	89a1      	ldrh	r1, [r4, #12]
 8014300:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8014304:	d117      	bne.n	8014336 <__swhatbuf_r+0x4a>
 8014306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801430a:	4608      	mov	r0, r1
 801430c:	e00f      	b.n	801432e <__swhatbuf_r+0x42>
 801430e:	466a      	mov	r2, sp
 8014310:	f000 f89a 	bl	8014448 <_fstat_r>
 8014314:	2800      	cmp	r0, #0
 8014316:	dbf2      	blt.n	80142fe <__swhatbuf_r+0x12>
 8014318:	9901      	ldr	r1, [sp, #4]
 801431a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801431e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014322:	4259      	negs	r1, r3
 8014324:	4159      	adcs	r1, r3
 8014326:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801432a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801432e:	6031      	str	r1, [r6, #0]
 8014330:	602b      	str	r3, [r5, #0]
 8014332:	b016      	add	sp, #88	@ 0x58
 8014334:	bd70      	pop	{r4, r5, r6, pc}
 8014336:	2100      	movs	r1, #0
 8014338:	2340      	movs	r3, #64	@ 0x40
 801433a:	e7e6      	b.n	801430a <__swhatbuf_r+0x1e>

0801433c <__smakebuf_r>:
 801433c:	898b      	ldrh	r3, [r1, #12]
 801433e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014340:	079d      	lsls	r5, r3, #30
 8014342:	4606      	mov	r6, r0
 8014344:	460c      	mov	r4, r1
 8014346:	d507      	bpl.n	8014358 <__smakebuf_r+0x1c>
 8014348:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 801434c:	6023      	str	r3, [r4, #0]
 801434e:	6123      	str	r3, [r4, #16]
 8014350:	2301      	movs	r3, #1
 8014352:	6163      	str	r3, [r4, #20]
 8014354:	b003      	add	sp, #12
 8014356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014358:	ab01      	add	r3, sp, #4
 801435a:	466a      	mov	r2, sp
 801435c:	f7ff ffc6 	bl	80142ec <__swhatbuf_r>
 8014360:	9f00      	ldr	r7, [sp, #0]
 8014362:	4605      	mov	r5, r0
 8014364:	4639      	mov	r1, r7
 8014366:	4630      	mov	r0, r6
 8014368:	f7fb fa68 	bl	800f83c <_malloc_r>
 801436c:	b948      	cbnz	r0, 8014382 <__smakebuf_r+0x46>
 801436e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014372:	059a      	lsls	r2, r3, #22
 8014374:	d4ee      	bmi.n	8014354 <__smakebuf_r+0x18>
 8014376:	f023 0303 	bic.w	r3, r3, #3
 801437a:	f043 0302 	orr.w	r3, r3, #2
 801437e:	81a3      	strh	r3, [r4, #12]
 8014380:	e7e2      	b.n	8014348 <__smakebuf_r+0xc>
 8014382:	89a3      	ldrh	r3, [r4, #12]
 8014384:	6020      	str	r0, [r4, #0]
 8014386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801438a:	81a3      	strh	r3, [r4, #12]
 801438c:	9b01      	ldr	r3, [sp, #4]
 801438e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014392:	b15b      	cbz	r3, 80143ac <__smakebuf_r+0x70>
 8014394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014398:	4630      	mov	r0, r6
 801439a:	f000 f867 	bl	801446c <_isatty_r>
 801439e:	b128      	cbz	r0, 80143ac <__smakebuf_r+0x70>
 80143a0:	89a3      	ldrh	r3, [r4, #12]
 80143a2:	f023 0303 	bic.w	r3, r3, #3
 80143a6:	f043 0301 	orr.w	r3, r3, #1
 80143aa:	81a3      	strh	r3, [r4, #12]
 80143ac:	89a3      	ldrh	r3, [r4, #12]
 80143ae:	431d      	orrs	r5, r3
 80143b0:	81a5      	strh	r5, [r4, #12]
 80143b2:	e7cf      	b.n	8014354 <__smakebuf_r+0x18>

080143b4 <__swbuf_r>:
 80143b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143b6:	460e      	mov	r6, r1
 80143b8:	4614      	mov	r4, r2
 80143ba:	4605      	mov	r5, r0
 80143bc:	b118      	cbz	r0, 80143c6 <__swbuf_r+0x12>
 80143be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80143c0:	b90b      	cbnz	r3, 80143c6 <__swbuf_r+0x12>
 80143c2:	f7fb fdad 	bl	800ff20 <__sinit>
 80143c6:	69a3      	ldr	r3, [r4, #24]
 80143c8:	60a3      	str	r3, [r4, #8]
 80143ca:	89a3      	ldrh	r3, [r4, #12]
 80143cc:	0719      	lsls	r1, r3, #28
 80143ce:	d501      	bpl.n	80143d4 <__swbuf_r+0x20>
 80143d0:	6923      	ldr	r3, [r4, #16]
 80143d2:	b943      	cbnz	r3, 80143e6 <__swbuf_r+0x32>
 80143d4:	4621      	mov	r1, r4
 80143d6:	4628      	mov	r0, r5
 80143d8:	f7ff feb2 	bl	8014140 <__swsetup_r>
 80143dc:	b118      	cbz	r0, 80143e6 <__swbuf_r+0x32>
 80143de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80143e2:	4638      	mov	r0, r7
 80143e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143ea:	b2f6      	uxtb	r6, r6
 80143ec:	049a      	lsls	r2, r3, #18
 80143ee:	4637      	mov	r7, r6
 80143f0:	d406      	bmi.n	8014400 <__swbuf_r+0x4c>
 80143f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80143f6:	81a3      	strh	r3, [r4, #12]
 80143f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80143fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80143fe:	6663      	str	r3, [r4, #100]	@ 0x64
 8014400:	6823      	ldr	r3, [r4, #0]
 8014402:	6922      	ldr	r2, [r4, #16]
 8014404:	1a98      	subs	r0, r3, r2
 8014406:	6963      	ldr	r3, [r4, #20]
 8014408:	4283      	cmp	r3, r0
 801440a:	dc05      	bgt.n	8014418 <__swbuf_r+0x64>
 801440c:	4621      	mov	r1, r4
 801440e:	4628      	mov	r0, r5
 8014410:	f7fd fb6e 	bl	8011af0 <_fflush_r>
 8014414:	2800      	cmp	r0, #0
 8014416:	d1e2      	bne.n	80143de <__swbuf_r+0x2a>
 8014418:	68a3      	ldr	r3, [r4, #8]
 801441a:	3b01      	subs	r3, #1
 801441c:	60a3      	str	r3, [r4, #8]
 801441e:	6823      	ldr	r3, [r4, #0]
 8014420:	1c5a      	adds	r2, r3, #1
 8014422:	6022      	str	r2, [r4, #0]
 8014424:	701e      	strb	r6, [r3, #0]
 8014426:	6962      	ldr	r2, [r4, #20]
 8014428:	1c43      	adds	r3, r0, #1
 801442a:	429a      	cmp	r2, r3
 801442c:	d004      	beq.n	8014438 <__swbuf_r+0x84>
 801442e:	89a3      	ldrh	r3, [r4, #12]
 8014430:	07db      	lsls	r3, r3, #31
 8014432:	d5d6      	bpl.n	80143e2 <__swbuf_r+0x2e>
 8014434:	2e0a      	cmp	r6, #10
 8014436:	d1d4      	bne.n	80143e2 <__swbuf_r+0x2e>
 8014438:	4621      	mov	r1, r4
 801443a:	4628      	mov	r0, r5
 801443c:	f7fd fb58 	bl	8011af0 <_fflush_r>
 8014440:	2800      	cmp	r0, #0
 8014442:	d0ce      	beq.n	80143e2 <__swbuf_r+0x2e>
 8014444:	e7cb      	b.n	80143de <__swbuf_r+0x2a>
	...

08014448 <_fstat_r>:
 8014448:	b538      	push	{r3, r4, r5, lr}
 801444a:	4d07      	ldr	r5, [pc, #28]	@ (8014468 <_fstat_r+0x20>)
 801444c:	2300      	movs	r3, #0
 801444e:	4604      	mov	r4, r0
 8014450:	4608      	mov	r0, r1
 8014452:	4611      	mov	r1, r2
 8014454:	602b      	str	r3, [r5, #0]
 8014456:	f7f0 fecd 	bl	80051f4 <_fstat>
 801445a:	1c43      	adds	r3, r0, #1
 801445c:	d102      	bne.n	8014464 <_fstat_r+0x1c>
 801445e:	682b      	ldr	r3, [r5, #0]
 8014460:	b103      	cbz	r3, 8014464 <_fstat_r+0x1c>
 8014462:	6023      	str	r3, [r4, #0]
 8014464:	bd38      	pop	{r3, r4, r5, pc}
 8014466:	bf00      	nop
 8014468:	2000208c 	.word	0x2000208c

0801446c <_isatty_r>:
 801446c:	b538      	push	{r3, r4, r5, lr}
 801446e:	4d06      	ldr	r5, [pc, #24]	@ (8014488 <_isatty_r+0x1c>)
 8014470:	2300      	movs	r3, #0
 8014472:	4604      	mov	r4, r0
 8014474:	4608      	mov	r0, r1
 8014476:	602b      	str	r3, [r5, #0]
 8014478:	f7f0 fecc 	bl	8005214 <_isatty>
 801447c:	1c43      	adds	r3, r0, #1
 801447e:	d102      	bne.n	8014486 <_isatty_r+0x1a>
 8014480:	682b      	ldr	r3, [r5, #0]
 8014482:	b103      	cbz	r3, 8014486 <_isatty_r+0x1a>
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	bd38      	pop	{r3, r4, r5, pc}
 8014488:	2000208c 	.word	0x2000208c

0801448c <_init>:
 801448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448e:	bf00      	nop
 8014490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014492:	bc08      	pop	{r3}
 8014494:	469e      	mov	lr, r3
 8014496:	4770      	bx	lr

08014498 <_fini>:
 8014498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801449a:	bf00      	nop
 801449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801449e:	bc08      	pop	{r3}
 80144a0:	469e      	mov	lr, r3
 80144a2:	4770      	bx	lr
